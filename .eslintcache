[{"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\index.js":"1","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\App.js":"2","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\serviceWorker.js":"3","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Navigator\\Navigator.js":"4","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\EmployeeForm\\EmployeeForm.js":"5","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LoginSignup\\Login.js":"6","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Header\\Header.js":"7","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SideBar\\SideBar.js":"8","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPage\\LandingPage.js":"9","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\utility-service.js":"10","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\circular-loader\\circular-loader.js":"11","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\user-service.js":"12","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\whatsApp-service.js":"13","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LoginSignup\\LoginSignup.js":"14","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\FileUpload\\FileUpload.js":"15","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Dashboard\\dashboard.js":"16","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\PkgServices\\PkgServices.js":"17","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\BuyCredits\\BuyCredits.js":"18","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Campaign\\Campaign.js":"19","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Campaign\\CreateCampaign.js":"20","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadManagement\\LeadManagement.js":"21","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadManagement\\LeadPush.js":"22","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadFunnel.js":"23","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadTypeAssign.js":"24","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadStatus\\LeadStatus.js":"25","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadBucket\\LeadBucket.js":"26","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\StatusGroup\\StatusGroup.js":"27","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadsMapping\\LeadStatusMapping.js":"28","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\PublisherMapping\\PublisherMapping.js":"29","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Roles\\RolesV1.js":"30","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SenderIds\\SenderIds.js":"31","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\StatusGroup\\StatusMapping.js":"32","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Datasource\\Datasource.js":"33","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadReportUpload\\LeadReportUpload.js":"34","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Leads\\Leads.js":"35","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Mediums\\Mediums.js":"36","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Transactions\\Transaction.js":"37","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Segments\\Segments.js":"38","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Task\\Task.js":"39","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Segments\\MappedSegmentGroup.js":"40","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\DatasourceMappedSegments.js":"41","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\ViewCampaignPopup.js":"42","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\MappedDatasource\\MappedDatasource.js":"43","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Lead\\LeadTable.js":"44","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Subscriptions\\ServicePackages.js":"45","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\ViewCampaign.js":"46","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Templates\\Templates.js":"47","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPages\\LandingPages.js":"48","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\JourneyDesigner\\JourneyDesigner.js":"49","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SegmentGroup\\SegmentGroup.js":"50","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaign.js":"51","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\IVR\\IVR.js":"52","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\Clients.js":"53","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\AddClients.js":"54","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\LeadDetail.js":"55","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadReports\\LeadReports.js":"56","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\ProfileV1.js":"57","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Youtube\\YouTubeVideo.js":"58","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Subscriptions\\ManageSubscription.js":"59","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Svg-icon\\Svg-icon.js":"60","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\SMSReports.js":"61","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Popup\\Popup.js":"62","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Constants\\icons.constants.js":"63","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\common-service.js":"64","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Helmet.js":"65","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\shortUrl-service.js":"66","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\clients-service.js":"67","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Youtube\\Youtube.js":"68","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\subscriptions-service.js":"69","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\medium-service.js":"70","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\roles-service.js":"71","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\datasource-service.js":"72","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\campaign-service.js":"73","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\ProfileDetails.js":"74","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\TaxDetails.js":"75","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\EmailPopup.js":"76","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\SMSPopup.js":"77","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\BusinessDetails.js":"78","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\lead-service.js":"79","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\CallPopup.js":"80","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\ivr-services.js":"81","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\LeadTaskStatus.js":"82","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\AssignOwnerLead.js":"83","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\ClientDetails.js":"84","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\ClientsTable.js":"85","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SmsProBilling.js":"86","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignBillingDetails.js":"87","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignWhatsApp.js":"88","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\senderId-service.js":"89","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignHeaderSMS.js":"90","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Content\\Content.js":"91","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Revenue\\Revenue.js":"92","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\template-service.js":"93","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\ManagePackageDetail.js":"94","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\IVR\\IVRFilter.js":"95","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\IVR\\IVRtable.js":"96","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\CampaignSummary.js":"97","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignProcessSMS.js":"98","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignHeader.js":"99","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignProcess.js":"100","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\DailySummaty.js":"101","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\SMSFilter.js":"102","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\AllTxns.js":"103","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Pagination\\Pagination.js":"104","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\segment-service.js":"105","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SegmentGroup\\EditSegment.js":"106","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SegmentGroup\\CreateSegmentGroups.js":"107","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\JourneyDesigner\\RetargettingSMSPro.js":"108","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\SegmentGroup\\SegmentGroupTable.js":"109","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\landingPage-service.js":"110","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPages\\LandingPagesTable.js":"111","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPages\\CreateMapping.js":"112","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Templates\\CreateTemplate.js":"113","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Templates\\TemplatesTable.js":"114","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\CreatePackage.js":"115","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\PackageDetail.js":"116","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\Packages.js":"117","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Lead\\AddLead.js":"118","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Segments\\CreateSegments.js":"119","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\EditPackage.js":"120","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Lead\\LeadFilter.js":"121","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ConfirmationModal\\ConfirmationModal.js":"122","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Task\\TaskFilter.js":"123","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Task\\TaskTable.js":"124","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\RemarksModal\\RemarksModal.js":"125","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\ViewPkgDetail.js":"126","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\HistoryTable.js":"127","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Constants\\cities.constants.js":"128","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\DatasourceTable.js":"129","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\ClientEditDatasource.js":"130","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CustomSMSTemplate.js":"131","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Revenue\\RevenueFilter.js":"132","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Revenue\\RevenueTable.js":"133","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Client\\ClientServiceTable.js":"134","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSProMobile.js":"135","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\GenericWhatsApp\\WhatsAppDP.js":"136","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\GenericWhatsApp\\GenericWhatsApp.js":"137","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignMainSource.js":"138","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\IconSearch\\IconSearch.js":"139","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignPreview.js":"140","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignMessage.js":"141","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignAudienceForm.js":"142","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\DragDropEditor.js":"143","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CustomSelect.js":"144","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Constants\\icon-names.constants.js":"145","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Campaign\\Segment-Container.js":"146","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignWhenTemplate.js":"147","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignCreateSegment.js":"148","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignRecurring.js":"149","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignTrigger.js":"150","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignOneTime.js":"151","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignSegmentAudience.js":"152","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Segments\\SegmentTable.js":"153","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\NewMedium\\NewMedium.js":"154","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\MediumTable\\MediumTable.js":"155","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\CreateDatasource.js":"156","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ModalSenderId\\NewSenderId.js":"157","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\SenderTable\\SenderTable.js":"158","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Roles\\NewRole.js":"159","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Roles\\RoleTable.js":"160","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadsMapping\\LeadsMapping.js":"161","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\PublisherMapping\\PublisherMapProcess.js":"162","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\StatusGroup\\NewLeadStatusGr.js":"163","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadBucket\\NewLeadBucket.js":"164","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\SelectAutomationType.js":"165","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadStatus\\NewLeasStatus.js":"166","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\tag-service.js":"167","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignTable.js":"168","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignInlineHeader.js":"169","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\TransactionHistory\\TransactionHistory.js":"170"},{"size":407,"mtime":1609568574000,"results":"171","hashOfConfig":"172"},{"size":10942,"mtime":1615557565253,"results":"173","hashOfConfig":"172"},{"size":4202,"mtime":1609568574000,"results":"174","hashOfConfig":"172"},{"size":9187,"mtime":1615573595400,"results":"175","hashOfConfig":"172"},{"size":36399,"mtime":1609568574000,"results":"176","hashOfConfig":"172"},{"size":3222,"mtime":1609568574000,"results":"177","hashOfConfig":"172"},{"size":6022,"mtime":1609568574000,"results":"178","hashOfConfig":"172"},{"size":4101,"mtime":1615385648682,"results":"179","hashOfConfig":"172"},{"size":16418,"mtime":1609568574000,"results":"180","hashOfConfig":"172"},{"size":2042,"mtime":1609568574000,"results":"181","hashOfConfig":"172"},{"size":1014,"mtime":1609568574000,"results":"182","hashOfConfig":"172"},{"size":6726,"mtime":1614605923518,"results":"183","hashOfConfig":"172"},{"size":405,"mtime":1614605941468,"results":"184","hashOfConfig":"172"},{"size":31346,"mtime":1609568574000,"results":"185","hashOfConfig":"172"},{"size":25390,"mtime":1609568574000,"results":"186","hashOfConfig":"172"},{"size":9346,"mtime":1609568574000,"results":"187","hashOfConfig":"172"},{"size":3732,"mtime":1609568574000,"results":"188","hashOfConfig":"172"},{"size":54153,"mtime":1609568574000,"results":"189","hashOfConfig":"172"},{"size":13984,"mtime":1615707732737,"results":"190","hashOfConfig":"172"},{"size":7577,"mtime":1615707699313,"results":"191","hashOfConfig":"172"},{"size":4661,"mtime":1609568574000,"results":"192","hashOfConfig":"172"},{"size":16123,"mtime":1609568574000,"results":"193","hashOfConfig":"172"},{"size":3243,"mtime":1609568574000,"results":"194","hashOfConfig":"172"},{"size":11685,"mtime":1609568574000,"results":"195","hashOfConfig":"172"},{"size":7034,"mtime":1609568574000,"results":"196","hashOfConfig":"172"},{"size":6676,"mtime":1609568574000,"results":"197","hashOfConfig":"172"},{"size":10473,"mtime":1609568574000,"results":"198","hashOfConfig":"172"},{"size":9065,"mtime":1609568574000,"results":"199","hashOfConfig":"172"},{"size":9405,"mtime":1609568574000,"results":"200","hashOfConfig":"172"},{"size":8397,"mtime":1609568574000,"results":"201","hashOfConfig":"172"},{"size":12374,"mtime":1609568574000,"results":"202","hashOfConfig":"172"},{"size":8780,"mtime":1609568574000,"results":"203","hashOfConfig":"172"},{"size":18442,"mtime":1609568574000,"results":"204","hashOfConfig":"172"},{"size":15467,"mtime":1609568574000,"results":"205","hashOfConfig":"172"},{"size":35137,"mtime":1609568574000,"results":"206","hashOfConfig":"172"},{"size":9538,"mtime":1615388969325,"results":"207","hashOfConfig":"172"},{"size":1806,"mtime":1609568574000,"results":"208","hashOfConfig":"172"},{"size":16374,"mtime":1609568574000,"results":"209","hashOfConfig":"172"},{"size":19802,"mtime":1609568574000,"results":"210","hashOfConfig":"172"},{"size":20783,"mtime":1609568574000,"results":"211","hashOfConfig":"172"},{"size":7386,"mtime":1609568574000,"results":"212","hashOfConfig":"172"},{"size":4588,"mtime":1609568574000,"results":"213","hashOfConfig":"172"},{"size":9947,"mtime":1609568574000,"results":"214","hashOfConfig":"172"},{"size":52279,"mtime":1609568574000,"results":"215","hashOfConfig":"172"},{"size":20130,"mtime":1609568574000,"results":"216","hashOfConfig":"172"},{"size":25472,"mtime":1609568574000,"results":"217","hashOfConfig":"172"},{"size":14951,"mtime":1609568574000,"results":"218","hashOfConfig":"172"},{"size":11276,"mtime":1609568574000,"results":"219","hashOfConfig":"172"},{"size":8876,"mtime":1614606976646,"results":"220","hashOfConfig":"172"},{"size":15052,"mtime":1609568574000,"results":"221","hashOfConfig":"172"},{"size":103948,"mtime":1615625022881,"results":"222","hashOfConfig":"172"},{"size":8968,"mtime":1609568574000,"results":"223","hashOfConfig":"172"},{"size":26438,"mtime":1609568574000,"results":"224","hashOfConfig":"172"},{"size":8056,"mtime":1609568574000,"results":"225","hashOfConfig":"172"},{"size":47715,"mtime":1609568574000,"results":"226","hashOfConfig":"172"},{"size":1361,"mtime":1609568574000,"results":"227","hashOfConfig":"172"},{"size":40922,"mtime":1609568574000,"results":"228","hashOfConfig":"172"},{"size":503,"mtime":1609568574000,"results":"229","hashOfConfig":"172"},{"size":12969,"mtime":1609568574000,"results":"230","hashOfConfig":"172"},{"size":401,"mtime":1609568574000,"results":"231","hashOfConfig":"172"},{"size":21364,"mtime":1609568574000,"results":"232","hashOfConfig":"172"},{"size":1940,"mtime":1609568574000,"results":"233","hashOfConfig":"172"},{"size":14254,"mtime":1609568574000,"results":"234","hashOfConfig":"172"},{"size":1577,"mtime":1614605639070,"results":"235","hashOfConfig":"172"},{"size":284,"mtime":1609568574000,"results":"236","hashOfConfig":"172"},{"size":1679,"mtime":1614605856058,"results":"237","hashOfConfig":"172"},{"size":2670,"mtime":1614605616448,"results":"238","hashOfConfig":"172"},{"size":446,"mtime":1609568574000,"results":"239","hashOfConfig":"172"},{"size":6452,"mtime":1614605895907,"results":"240","hashOfConfig":"172"},{"size":706,"mtime":1614605799278,"results":"241","hashOfConfig":"172"},{"size":2244,"mtime":1614605810106,"results":"242","hashOfConfig":"172"},{"size":4508,"mtime":1614605693194,"results":"243","hashOfConfig":"172"},{"size":4928,"mtime":1614605587861,"results":"244","hashOfConfig":"172"},{"size":11597,"mtime":1609568574000,"results":"245","hashOfConfig":"172"},{"size":6804,"mtime":1609568574000,"results":"246","hashOfConfig":"172"},{"size":3907,"mtime":1609568574000,"results":"247","hashOfConfig":"172"},{"size":2859,"mtime":1609568574000,"results":"248","hashOfConfig":"172"},{"size":11944,"mtime":1609568574000,"results":"249","hashOfConfig":"172"},{"size":14256,"mtime":1614605756771,"results":"250","hashOfConfig":"172"},{"size":1314,"mtime":1609568574000,"results":"251","hashOfConfig":"172"},{"size":489,"mtime":1614605709433,"results":"252","hashOfConfig":"172"},{"size":9510,"mtime":1609568574000,"results":"253","hashOfConfig":"172"},{"size":3476,"mtime":1609568574000,"results":"254","hashOfConfig":"172"},{"size":121231,"mtime":1609568574000,"results":"255","hashOfConfig":"172"},{"size":4085,"mtime":1609568574000,"results":"256","hashOfConfig":"172"},{"size":5678,"mtime":1609568574000,"results":"257","hashOfConfig":"172"},{"size":5377,"mtime":1609568574000,"results":"258","hashOfConfig":"172"},{"size":3318,"mtime":1609568574000,"results":"259","hashOfConfig":"172"},{"size":1676,"mtime":1614605839749,"results":"260","hashOfConfig":"172"},{"size":33985,"mtime":1609568574000,"results":"261","hashOfConfig":"172"},{"size":2354,"mtime":1609568574000,"results":"262","hashOfConfig":"172"},{"size":15090,"mtime":1609568574000,"results":"263","hashOfConfig":"172"},{"size":2572,"mtime":1614605908932,"results":"264","hashOfConfig":"172"},{"size":5987,"mtime":1609568574000,"results":"265","hashOfConfig":"172"},{"size":4685,"mtime":1609568574000,"results":"266","hashOfConfig":"172"},{"size":4796,"mtime":1609568574000,"results":"267","hashOfConfig":"172"},{"size":3014,"mtime":1609568574000,"results":"268","hashOfConfig":"172"},{"size":5165,"mtime":1609568574000,"results":"269","hashOfConfig":"172"},{"size":4179,"mtime":1615574070240,"results":"270","hashOfConfig":"172"},{"size":33575,"mtime":1609568574000,"results":"271","hashOfConfig":"172"},{"size":2424,"mtime":1609568574000,"results":"272","hashOfConfig":"172"},{"size":3854,"mtime":1609568574000,"results":"273","hashOfConfig":"172"},{"size":2814,"mtime":1609568574000,"results":"274","hashOfConfig":"172"},{"size":4561,"mtime":1609568574000,"results":"275","hashOfConfig":"172"},{"size":2844,"mtime":1614605822965,"results":"276","hashOfConfig":"172"},{"size":4083,"mtime":1609568574000,"results":"277","hashOfConfig":"172"},{"size":5518,"mtime":1609568574000,"results":"278","hashOfConfig":"172"},{"size":37837,"mtime":1609568574000,"results":"279","hashOfConfig":"172"},{"size":3614,"mtime":1609568574000,"results":"280","hashOfConfig":"172"},{"size":760,"mtime":1614605731601,"results":"281","hashOfConfig":"172"},{"size":2739,"mtime":1609568574000,"results":"282","hashOfConfig":"172"},{"size":4731,"mtime":1609568574000,"results":"283","hashOfConfig":"172"},{"size":6492,"mtime":1609568574000,"results":"284","hashOfConfig":"172"},{"size":3576,"mtime":1609568574000,"results":"285","hashOfConfig":"172"},{"size":18091,"mtime":1609568574000,"results":"286","hashOfConfig":"172"},{"size":16190,"mtime":1609568574000,"results":"287","hashOfConfig":"172"},{"size":2892,"mtime":1609568574000,"results":"288","hashOfConfig":"172"},{"size":7963,"mtime":1609568574000,"results":"289","hashOfConfig":"172"},{"size":9643,"mtime":1609568574000,"results":"290","hashOfConfig":"172"},{"size":12474,"mtime":1609568574000,"results":"291","hashOfConfig":"172"},{"size":9321,"mtime":1609568574000,"results":"292","hashOfConfig":"172"},{"size":1626,"mtime":1609568574000,"results":"293","hashOfConfig":"172"},{"size":4159,"mtime":1609568574000,"results":"294","hashOfConfig":"172"},{"size":2744,"mtime":1609568574000,"results":"295","hashOfConfig":"172"},{"size":2569,"mtime":1609568574000,"results":"296","hashOfConfig":"172"},{"size":6441,"mtime":1609568574000,"results":"297","hashOfConfig":"172"},{"size":931,"mtime":1609568574000,"results":"298","hashOfConfig":"172"},{"size":1919,"mtime":1609568574000,"results":"299","hashOfConfig":"172"},{"size":6011,"mtime":1609568574000,"results":"300","hashOfConfig":"172"},{"size":6667,"mtime":1609568574000,"results":"301","hashOfConfig":"172"},{"size":14339,"mtime":1609568574000,"results":"302","hashOfConfig":"172"},{"size":7472,"mtime":1609568574000,"results":"303","hashOfConfig":"172"},{"size":2824,"mtime":1609568574000,"results":"304","hashOfConfig":"172"},{"size":3057,"mtime":1609568574000,"results":"305","hashOfConfig":"172"},{"size":1692,"mtime":1609568574000,"results":"306","hashOfConfig":"172"},{"size":5604,"mtime":1609568574000,"results":"307","hashOfConfig":"172"},{"size":13986,"mtime":1609568574000,"results":"308","hashOfConfig":"172"},{"size":1073,"mtime":1615474695144,"results":"309","hashOfConfig":"172"},{"size":2846,"mtime":1609568574000,"results":"310","hashOfConfig":"172"},{"size":4318,"mtime":1615666714710,"results":"311","hashOfConfig":"172"},{"size":12644,"mtime":1615699712976,"results":"312","hashOfConfig":"172"},{"size":15218,"mtime":1615700219884,"results":"313","hashOfConfig":"172"},{"size":987,"mtime":1615571885801,"results":"314","hashOfConfig":"172"},{"size":1621,"mtime":1615619829634,"results":"315","hashOfConfig":"172"},{"size":36109,"mtime":1609568574000,"results":"316","hashOfConfig":"172"},{"size":8438,"mtime":1615625666991,"results":"317","hashOfConfig":"172"},{"size":5072,"mtime":1615661973001,"results":"318","hashOfConfig":"172"},{"size":13647,"mtime":1615622634861,"results":"319","hashOfConfig":"172"},{"size":7121,"mtime":1615619802679,"results":"320","hashOfConfig":"172"},{"size":5288,"mtime":1615661870889,"results":"321","hashOfConfig":"172"},{"size":3280,"mtime":1615661797222,"results":"322","hashOfConfig":"172"},{"size":12626,"mtime":1615459848088,"results":"323","hashOfConfig":"172"},{"size":2935,"mtime":1609568574000,"results":"324","hashOfConfig":"172"},{"size":3249,"mtime":1609568574000,"results":"325","hashOfConfig":"172"},{"size":3308,"mtime":1609568574000,"results":"326","hashOfConfig":"172"},{"size":10743,"mtime":1609568574000,"results":"327","hashOfConfig":"172"},{"size":7418,"mtime":1609568574000,"results":"328","hashOfConfig":"172"},{"size":3871,"mtime":1609568574000,"results":"329","hashOfConfig":"172"},{"size":2227,"mtime":1609568574000,"results":"330","hashOfConfig":"172"},{"size":1972,"mtime":1609568574000,"results":"331","hashOfConfig":"172"},{"size":3492,"mtime":1609568574000,"results":"332","hashOfConfig":"172"},{"size":2520,"mtime":1609568574000,"results":"333","hashOfConfig":"172"},{"size":2039,"mtime":1609568574000,"results":"334","hashOfConfig":"172"},{"size":2936,"mtime":1609568574000,"results":"335","hashOfConfig":"172"},{"size":3564,"mtime":1615709729641,"results":"336","hashOfConfig":"172"},{"size":2915,"mtime":1609568574000,"results":"337","hashOfConfig":"172"},{"size":705,"mtime":1615700398952,"results":"338","hashOfConfig":"172"},{"size":24827,"mtime":1609568574000,"results":"339","hashOfConfig":"172"},{"size":3579,"mtime":1615483143135,"results":"340","hashOfConfig":"172"},{"size":24658,"mtime":1609568574000,"results":"341","hashOfConfig":"172"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yy3hqk",{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"546","messages":"547","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\index.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\App.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\serviceWorker.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Navigator\\Navigator.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\EmployeeForm\\EmployeeForm.js",["705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725"],"import React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport Popup from '../../Components/Popup/Popup';\nimport {leadSendOtpBetaCura,submitLeadData} from '../../Services/user-service';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\nimport CircularLoader from '../../Components/circular-loader/circular-loader';\nimport './EmployeeForm.css';\n\n\nconst initialState ={\n    page:\"form\",\n    parentUrl:\"\",\n    opnPopup: false,\n    // timeChange:{\n    //     timeMM:{\n    //         value:\"\",\n    //     },\n    //     timeHH:{\n    //         value:'',\n    //     },\n    //     clockType:{\n    //         value:\"AM\"\n    //     },\n    // }, \n    formControls:{\n        email:{\n            value:'',\n            error:''\n        },\n        name:{\n            value:'',\n            error:''\n        },\n        employeeID:{\n            value:'',\n            error:''\n        },  \n        phoneNumber:{\n            value:'',\n            error:''\n        },\n        secondaryPhone:{\n            value:'',\n            error:''\n        },\n       \n        testName:{\n            value:'',\n            error:''\n        },\n        city:{\n            value:'',\n            error:''\n        },\n        homeAddress:{\n            value:'',\n            error:''\n        },\n        collectionDateTime:{\n            value:'',\n            error:''\n        },\n       \n        collectionTime:{\n            value:\"\",\n            error:\"\"\n        },\n        pincode:{\n            value:'',\n            error:''\n        },   \n        otp:{\n            value:'',\n            error:''\n        },\n        paidType :{\n            value:\"\",\n            error:\"\"\n        },\n        sourceType:{\n            value: \"betacura\"\n        },\n        partner:{\n            value:\"aditya-birla\"\n        }\n    }\n}\nexport default class EmployeeFrom extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state=initialState;\n     //   this.getTimee = this.getTimee.bind(this);        \n        this.resendOTP=this.resendOTP.bind(this);\n        this.dobChange =this.dobChange.bind(this);\n       // this.timecheck = this.timecheck.bind(this);\n        this.submitOTP = this.submitOTP.bind(this);\n        this.submitData = this.submitData.bind(this);\n        this.getFormData = this.getFormData.bind(this);\n        this.prefillData = this.prefillData.bind(this);        \n        this.changeHandler = this.changeHandler.bind(this);         \n       // this.clickedHandler= this.clickedHandler.bind(this);\n      //  this.timeChangeHandler = this.timeChangeHandler.bind(this);\n      // this.getDateFormatDDMMYY = this.getDateFormatDDMMYY.bind(this);\n    }\n\n    componentDidMount(){\n        this.setState({\n            parentUrl: document.referrer,\n           \n        },this.prefillData);\n       \n    }\n\n    // timeChangeHandler(event){\n    //     let name=event.target.name;\n    //     let value=event.target.value;\n\n    //     this.setState(state=>{\n    //         return{\n    //         timeChange:{\n    //             ...state.timeChange,\n    //             [name]:{\n    //                 ...state.timeChange.name,\n    //                 value:value\n    //             }\n    //         }\n    //     }\n    //     })\n    // }\n\n    changeHandler = event => {\n\n        const name = event.target.name;\n        const value = event.target.value;\n        \n        this.setState({\n            formControls: {\n                ...this.state.formControls,\n                [name]: {\n                ...this.state.formControls[name],\n                value\n                }\n            }\n        });\n     \n    }\n  \n    resendOTP(event){\n        event.preventDefault();\n        this.setState({\n            submitLoader: true,\n        })\n        \n        var qp = this.state.parentUrl.split('?')[1];\n        let body = '?' + (qp ? qp : '') + '&' + \"sourceType\"+ \"=\" + \"betacura\" + '&' + \"partner\"+ \"=\" + \"aditya-birla\" + '&' + \"mobile\" + \"=\" + this.state.formControls.phoneNumber.value\n        leadSendOtpBetaCura(body)\n        .then(response => response.json())\n        .then(data => {\n            if(data.success) {\n                // this.submitData();\n                this.setState({\n                    submitLoader: false,\n                    opnPopup: false,\n                    page:\"otp\"                    \n                })\n                ToastsStore.success(data.message);\n            } \n            if(!data.success) {\n                this.setState({\n                    page: 'form' \n                });\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error => {\n            console.log(error);\n            this.setState({\n                submitLoader:false\n            });\n            ToastsStore.error(\"Something Went Wrong!!! Please Try Again\");\n        })\n\n    }\n\n    // getDateFormatDDMMYY(){\n        \n    //     let longDate = this.state.formControls && this.state.formControls.collectionDateTime && this.state.formControls.collectionDateTime.value;\n      \n    //     let date = longDate.getTime();\n    //     let temp = this.state.formControls;\n    //     temp.collectionDateTime.value = date;\n    //     this.setState({\n    //         formControls: temp   \n    //     })\n    // }\n\n    getFormData(){\n        // this.getDateFormatDDMMYY();\n        let queryString = \"\";\n        Object.entries(this.state.formControls).forEach(e => {\n            queryString+= '&' + e[0] + '=' + e[1].value    \n        })\n        return queryString;\n    }\n\n    dobChange(event){\n        let value=event;\n        this.setState({\n            formControls: {\n                ...this.state.formControls,\n                collectionDateTime: {\n                ...this.state.formControls.collectionDateTime,\n                value\n                }\n            }\n        });   \n    }\n   \n    prefillData(){\n        try{\n            let str = this.state.parentUrl;\n            // console.dir(str);\n            str = str.split('?')[1];\n            let prefillParams = JSON.parse('{\"' + decodeURI(str).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g,'\":\"') + '\"}');\n            let temp = this.state.formControls;\n            Object.entries(prefillParams).forEach(e => {\n                Object.entries(temp).forEach(f => {\n                    if(e[0] === f[0]){\n                        f[1].value = e[1];\n                    }\n                })\n            })\n            this.setState({\n                formControls: temp,\n            })\n        }catch(e){\n            console.log(e);\n        }\n    }\n  \n    submitData(event){\n        event.preventDefault();\n        let temp = this.state.formControls;\n        if(!this.state.formControls.otp.value){\n            temp.otp.error = \"Please enter valid OTP\";\n            this.setState({\n                formControls: temp\n            })\n            return;\n        }else{\n            temp.otp.error = \"\";\n            this.setState({\n                formControls: temp\n            })\n        }\n        // console.log(window.location);\n        this.setState({\n            submitLoader: true,\n        });\n        var qp = this.state.parentUrl.split('?')[1];\n        var body = '?' + (qp ? qp : '') + this.getFormData();\n        \n        submitLeadData(body)\n        .then(response => response.json())\n        .then(data => {\n            \n            if(data.success){\n                this.setState({\n                    submitLoader: false,\n                    page: 'thank'                    \n                })\n                ToastsStore.success(data.message);\n            }else{\n                ToastsStore.error(data.message);\n                let temp2 = this.state.formControls;\n                temp2.otp.error = data.message;\n                this.setState({\n                    submitLoader: false,\n                    page: \"error\",\n                    formControls:temp2                 \n                })\n                \n            }\n        }).catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something Went Wrong!!! Please Try Again\");\n            this.setState({\n                submitLoader: false,\n                view: 'thank'                    \n            })\n        })\n    }\n      \n    submitOTP(){\n        // this.timecheck();\n        let temp=this.state.formControls;\n        for(let ele in temp){\n                      \n            if(ele !== \"otp\"){\n                if(temp[ele].value){\n                    temp[ele].error = \"\"; \n                    this.setState({\n                        formControls: temp\n                    })      \n                }\n                else{\n                    temp[ele].error = `${ele} field is manadatory`; \n                    ToastsStore.error(`${ele} field is manadatory`) ;\n                    let sc = document.querySelector(`[name=${ele}]`);\n                    sc.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                    this.setState({\n                        formControls: temp\n                    })\n                    return;\n                }    \n            }      \n        }\n \n        this.setState({\n            submitLoader: true,\n        });\n        var qp = this.state.parentUrl.split('?')[1];\n        let body = '?' + (qp ? qp : '') + '&' + \"sourceType\"+ \"=\" + \"betacura\" + '&' + \"partner\"+ \"=\" + \"aditya-birla\" + '&' + \"mobile\" + \"=\" + this.state.formControls.phoneNumber.value\n             \n        leadSendOtpBetaCura(body)\n        .then(response => response.json())\n        .then(data => {\n            if(data.success) {\n                this.setState({\n                    submitLoader: false,\n                    page: 'otp'                    \n                })\n                ToastsStore.success(data.message);\n            } \n            if(!data.success) {\n                this.setState({\n                    submitLoader: false\n                });\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error => {\n            console.log(error);\n            this.setState({\n                submitLoader:false\n            });\n            ToastsStore.error(\"Something Went Wrong!!! Please Try Again\");\n        })\n    }\n    \n\n    render(){\n        let logo = window.localStorage.getItem('logoUrl');\n        return(\n            <React.Fragment>\n                <figure className=\"text--center\">\n                    <img src ={logo} alt=\"Company Logo\" style={{marginTop: '18px',width: '60%',height:'250px',objectFit:'cover'}}/>\n                </figure>    \n                {\n                    this.state.page === \"form\" &&\n                    <section>        \n                {/* <h1>${landingPageConfig.h1Title}</h1>\n                <p>${landingPageConfig.h1Desc}</p> */}\n                \n                    <h1 className=\"text--center\" onClick={this.getDateFormatDDMMYY}>ABHI  Employee Information Form  AHC</h1>\n                    <p className=\"text--center\" style={{fontSize: \"large\"}}>Please fill in the details to ensure your samples are collected accurately on time.<br/>\n                        BetaCura Health Solutions Pvt Ltd will be facilitating the health screening  from your residences on your chosen time &amp; date for your AHC.\n                    </p>\n                    <hr/>\n                    <article className=\"card-custom  pad--half  bakgrnd-grad\">\n                        <div className=\"col-12 flex flex-direction--col margin-right--auto margin-left--auto\"> \n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Email address *</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"email\"\n                                placeholder=\"Your Email\"\n                                value={this.state.formControls && this.state.formControls.email && this.state.formControls.email.value}\n                                onChange={this.changeHandler}\n                                >\n                            </input>\n                            {\n                                this.state.formControls && this.state.formControls.email && this.state.formControls.email.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.email && this.state.formControls.email.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom \">\n                            <div className=\"label\">Your Full Name *</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"name\"\n                                placeholder=\"Your Name\"\n                                value={this.state.formControls && this.state.formControls.name && this.state.formControls.name.value}\n                                onChange={this.changeHandler}\n                            />\n                            {\n                                this.state.formControls && this.state.formControls.name && this.state.formControls.name.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.name && this.state.formControls.name.error}</div>  \n                            }\n                        </div>\n                        \n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Employee ID *</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"employeeID\"\n                                placeholder=\"Type Here\"\n                                value={this.state.formControls && this.state.formControls.employeeID && this.state.formControls.employeeID.value}\n                                onChange={this.changeHandler}\n                            />\n                            {\n                                this.state.formControls && this.state.formControls.employeeID && this.state.formControls.employeeID.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.employeeID && this.state.formControls.employeeID.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Your Primary Phone Number *</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"phoneNumber\"\n                                placeholder=\"This phone number will be used for OTP purpose\"\n                                value={this.state.formControls && this.state.formControls.phoneNumber && this.state.formControls.phoneNumber.value}\n                                onChange={this.changeHandler}\n                            />\n                            {\n                                this.state.formControls && this.state.formControls.phoneNumber && this.state.formControls.phoneNumber.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.phoneNumber && this.state.formControls.phoneNumber.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Your Secondary Phone Number *</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"secondaryPhone\"\n                                placeholder=\"Type Here\"\n                                value={this.state.formControls && this.state.formControls.secondaryPhone && this.state.formControls.secondaryPhone.value}\n                                onChange={this.changeHandler}\n                            />\n                            {\n                                this.state.formControls && this.state.formControls.secondaryPhone && this.state.formControls.secondaryPhone.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.secondaryPhone && this.state.formControls.secondaryPhone.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Select the Test Type *</div>\n                            <select className=\"form-control\" name=\"testName\" \n                            value={this.state.formControls && this.state.formControls.testName && this.state.formControls.testName.value} \n                            onChange={this.changeHandler}\n                            style={{width:\"90%\"}}\n                            >                                  \n                                    <option defaultValue hidden >-Select Test Type-</option>\n                                    <option value=\"Annual Health Checkup (Male)-Rs 2800\" >Annual Health Checkup (Male)-Rs 2800</option>\n                                    <option value=\"Annual Health Checkup (Female)-Rs 2800\" >Annual Health Checkup (Female)-Rs 2800</option>\n                                    <option value=\"Annual Health Checkup + Stress Test (Male &amp; Female)-Rs 3600\" >Annual Health Checkup + Stress Test (Male &amp; Female)-Rs 3600</option>\n                                    <option value=\"Annual Health Checkup (Female) + Mammography (Above 35 yrs)-Rs 5000\"> Annual Health Checkup (Female) + Mammography (Above 35 yrs)-Rs 5000</option>\n                                    {/* <option value=\"PRELIMINARY TEST\" >PRELIMINARY TEST</option> \n                                    <option value=\"DIABETIC CHECK UP\" >DIABETIC CHECK UP</option>\n                                    <option value=\"KIDNEY PROFILE\" >KIDNEY PROFILE</option>\n                                    <option value=\"LIVER PROFILE\" >LIVER PROFILE</option>\n                                    <option value=\"LIPID PROFILE\" >LIPID PROFILE</option>\n                                    <option value=\"THYROID PROFILE\" >THYROID PROFILE</option>\n                                    <option value=\"USG(Abdomen &amp; Pelvis)\" >USG(Abdomen &amp; Pelvis)</option>\n                                    <option value=\"Chest X-ray\" >Chest X-ray</option>\n                                    <option value=\"Pulmonary Function Test\" >Pulmonary Function Test</option>\n                                    <option value=\"Physician Examination with BP, BMI\" >Physician Examination with BP, BMI</option>\n                                    <option value=\"Vit D 25 Hydroxy\" >Vit D 25 Hydroxy</option>\n                                    <option value=\"Vit.B12\" >Vit.B12</option>\n                                    <option value=\"PSA (Above 40 years)\" >PSA (Above 40 years)</option>\n                                    <option value=\"Stress test\" >Stress test</option>\n                                    <option value=\"Post Prandial Sugar\" >Post Prandial Sugar</option>\n                                    <option value=\"Mammography (Above 35 yrs)\" >Mammography (Above 35 yrs)</option> */}\n                                    \n                            </select>\n                            {\n                                this.state.formControls && this.state.formControls.testName && this.state.formControls.testName.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.testName && this.state.formControls.testName.error}</div>  \n                            }\n                        </div>\n                      \n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Select your City of residence *</div>\n                            <select className=\"form-control\" name=\"city\"\n                            name=\"city\"\n                            placeholder=\"Type Here\" \n                            value={this.state.formControls && this.state.formControls.city && this.state.formControls.city.value} \n                            onChange={this.changeHandler}\n                            style={{width:\"90%\"}}\n                            >                                  \n                                    <option defaultValue hidden >-Select City-</option>\n                                    <option value=\"Delhi/NCR\">Delhi/NCR</option>\n                                    <option value=\"Mumbai\">Mumbai</option>\n                                    <option value=\"Hyderabad\">Hyderabad</option>\n                                    <option value=\"Chennai\">Chennai</option>\n                                    <option value=\"Pune\">Pune</option>\n                                    <option value=\"Kolkata\">Kolkata</option>\n                                    <option value=\"Bengaluru\">Bengaluru</option>\n                            </select>\n                            {\n                                this.state.formControls && this.state.formControls.city && this.state.formControls.city.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.city && this.state.formControls.city.error}</div>  \n                            }\n                        </div>\n                        \n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Your Complete Address for Sample Collection *</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"homeAddress\"\n                                placeholder=\"Type Here\"\n                                value={this.state.formControls && this.state.formControls.homeAddress && this.state.formControls.homeAddress.value}\n                                onChange={this.changeHandler}\n                            />\n                            {\n                                this.state.formControls && this.state.formControls.homeAddress && this.state.formControls.homeAddress.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.homeAddress && this.state.formControls.homeAddress.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Your Pin Code *</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"pincode\"\n                                placeholder=\"Type Here\"\n                                value={this.state.formControls && this.state.formControls.pincode && this.state.formControls.pincode.value}\n                                onChange={this.changeHandler}\n                            />\n                            {\n                                this.state.formControls && this.state.formControls.pincode && this.state.formControls.pincode.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.pincode && this.state.formControls.pincode.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Please select the preferred day for the sample collection. *</div>\n                            <DatePicker\n                                    selected={this.state.formControls && this.state.formControls.collectionDateTime && this.state.formControls.collectionDateTime.value}\n                                    placeholderText=\"Click to select Date\"\n                                //   minDate={d}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    onChange={this.dobChange}\n                                    peekNextMonth\n                                    showMonthDropdown\n                                    showYearDropdown\n                                    dropdownMode=\"select\"      \n                                    name=\"collectionDateTime\"\n                                    style={{width: \"95%\"}}\n                            />\n                            {\n                                this.state.formControls && this.state.formControls.collectionDateTime && this.state.formControls.collectionDateTime.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.collectionDateTime && this.state.formControls.collectionDateTime.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Please select the preferred time for the sample collection. *</div>\n                            <select className=\"form-control\" name=\"collectionTime\" \n                            value={this.state.formControls && this.state.formControls.collectionTime && this.state.formControls.collectionTime.value} \n                            onChange={this.changeHandler}\n                            style={{width:\"90%\"}}\n                            >\n                                <option value=\"\" defaultValue>-Select Time Period-</option>\n                                <option value=\"06 AM to 07 AM\">06 AM - 07 AM</option>\n                                <option value=\"07 AM to 08 AM\">07 AM - 08 AM </option>\n                                <option value=\"08 AM to 09 AM\">08 AM - 09 AM </option>\n                                <option value=\"09 AM to 10 AM\">09 AM - 10 AM</option>\n                                <option value=\"10 AM to 11 AM\">10 AM - 11 AM</option>\n                                <option value=\"11 AM to 12 Noon\">11 AM - 12 Noon</option>\n                                <option value=\"12 PM to 01 PM\">12 PM - 01 PM</option>\n                                <option value=\"01 PM to 02 PM\">01 PM - 02 PM </option>\n                                <option value=\"2 PM to 3 PM\">02 PM - 03 PM </option>\n                                <option value=\"3 PM to 4 PM\">03 PM - 04 PM </option>\n                                <option value=\"4 PM to 5 PM\">04 PM - 05 PM </option>\n                                <option value=\"5 PM to 6 PM\">05 PM - 06 PM </option>\n                                <option value=\"6 PM to 7 PM\">06 PM - 07 PM</option>\n                                <option value=\"7 PM to 8 PM\">07 PM - 08 PM </option>\n                            </select>\n                                                  \n                            {\n                                this.state.formControls && this.state.formControls.collectionTime && this.state.formControls.collectionTime.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls.collectionTime.error}</div>  \n                            }\n                        </div>\n                        <div className=\"col-20 padding-all-12 card-custom\">\n                            <div className=\"label\">Preferred Payment Mode *</div>\n                            <select className=\"form-control\" name=\"paidType\"\n                            style={{width:\"90%\"}} \n                             value={this.state.formControls && this.state.formControls.paidType && this.state.formControls.paidType.value} \n                             onChange={this.changeHandler}\n                            >                                  \n                                    <option defaultValue hidden >-Select Payment Mode-</option>\n                                    <option value=\"COD\" >COD</option>\n                                    <option value=\"PrePaid\" >PrePaid</option>\n                            </select>\n                            {\n                                this.state.formControls && this.state.formControls.paidType && this.state.formControls.paidType.error &&\n                                <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.paidType && this.state.formControls.paidType.error}</div>  \n                            }\n                        </div>\n                        <article className=\"dialog-footer pad margin-top col-20\">                                                      \n                            <button onClick={this.submitOTP}     \n                            className=\"BetaCuraSubmit\">SUBMIT DETAILS</button>                                                                                                                                                                \n                        </article> \n                    </div>\n                </article>  \n            </section>\n                }\n                \n                {\n                    this.state.page === \"otp\" &&\n                    <article className=\"bakgrnd-grad\" style={{paddingBottom:\"20%\"}}>\n                         <div className=\"login-wrapper flex flex-direction--col flex-wrap pad card-custom margin-right--auto margin-left--auto\" style={{minWidht:\"55%\", maxWidth:\"55%\",overflowX: \"auto\"}}>\n                            <p style={{fontSize: \"large\", paddingTop:\"10%\"}}>OTP Sent to your mobile {this.state.formControls && this.state.formControls.phoneNumber && this.state.formControls.phoneNumber.value}.<br/>\n                            Please submit the OTP (One Time Password).</p>\n                            <input  type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"otp\"\n                                    placeholder=\"Type Here\"\n                                    value={this.state.formControls && this.state.formControls.otp && this.state.formControls.otp.value}\n                                    onChange={this.changeHandler}\n                                />\n                                {\n                                    this.state.formControls && this.state.formControls.otp && this.state.formControls.otp.error &&\n                                    <div className=\"form-error text--center\">{this.state.formControls && this.state.formControls.otp && this.state.formControls.otp.error}</div>  \n                                }\n                                <article className=\"dialog-footer pad margin-top col-20\">                                                                                                                                                                                                                       \n                                    <button onClick={this.submitData}                                                                                                                                                                                                                                                    \n                                    className=\"btn btn-fill btn-green margin-left--half dialog--cta pointer\">SUBMIT OTP</button>                                                                                                                                                                      \n                                </article> \n                                <div style={{textAlign:'left',fontSize:\"medium\"}}> \n                                    <i className=\"mobile icon\"></i>  \n                                    <span className=\"pointer text--bold text--underline\" style={{color:'#4183c4',textAlign:'left'}} onClick={()=>this.setState({opnPopup:true})}>Change Phone Number ?</span>   \n                                </div>\n                        </div>\n                       \n                    </article>\n                }\n                {\n                    this.state.opnPopup &&\n                    <Popup title=\"Resend OTP on new phone number\" togglePopup={()=>this.setState(state=>{return{opnPopup:!state.opnPopup}})}>\n                        <div className=\"senderId-modal--wrapper\">\n                            <div className=\"label\">Change phone number ?</div>\n                            <input  type=\"text\"\n                                className=\"form-control\"\n                                name=\"phoneNumber\"\n                                placeholder=\"New Phone Number\"\n                                value={this.state.formControls.phoneNumber.value}\n                                onChange={this.changeHandler}\n                            />\n                        </div> \n                        <article className=\"dialog-footer pad margin-top col-20\">\n                            <button onClick={this.resendOTP} className=\"btn btn-fill btn-blue dialog--cta pointer\">Resend OTP</button>           \n                        </article>\n                    </Popup>\n                }\n                {\n                    this.state.page === \"error\" &&\n                    <article className=\"bakgrnd-grad\" style={{paddingBottom:\"20%\"}}>\n                        <div className=\"login-wrapper flex flex-direction--col flex-wrap pad card-custom margin-right--auto margin-left--auto\" style={{minWidht:\"55%\", maxWidth:\"55%\"}}>\n                            <p style={{fontSize: \"large\",paddingTop:\"10%\"}}>{this.state.formControls.otp.error}</p>\n                            <div className=\"dialog-footer pad margin-top col-20\">                                                                 \n                                <button onClick={this.resendOTP}     \n                                className=\"btn btn-fill btn-green margin-left--half dialog--cta pointer\">Resend OTP Again</button>                                                                                                                                                                \n                            </div>\n                            <div style={{textAlign:'left',fontSize:\"medium\"}}>  \n                                <span className=\"pointer text--bold text--underline\" style={{color:'#4183c4',textAlign:'left'}} onClick={()=>this.setState({page:\"form\"})}>Back to Employee Infomation form</span>                                                                                                                                       \n                            </div> \n                        </div>\n                            \n                    </article>\n                }\n                {\n                    this.state.page === \"thank\" &&\n                    <article className=\"bakgrnd-grad\" style={{paddingBottom:\"50%\"}}>\n                        <div className=\"login-wrapper flex flex-direction--col flex-wrap pad card-custom margin-right--auto margin-left--auto\" style={{minWidht:\"55%\", maxWidth:\"55%\",height:\"330px\"}}>\n                            <div style={{fontSize: \"large\",fontWeight:\"bold\", padding:\"20px 0\"}} class=\"text--center\">Thank you for the submission.<br/>Betacura team will reach out to you soon to co-ordinate further.</div>\n                            {/* <div style={{fontWeight:'700',fontSize:'14px',fontStyle:'normal',marginTop:'8px'}}>An Aditys Birla representative will reach out to you.</div> */}\n                        </div>\n                    </article>\n                }\n                { \n                    this.state.submitLoader &&\n                    <div className=\"flex col-2 margin-left--auto margin-right--auto\">\n                        <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                    </div>\n                }\n                 <ToastsContainer position={ToastsContainerPosition.TOP_RIGHT} lightBackground store={ToastsStore} /> \n            </React.Fragment>\n            \n        );\n\n    }\n}","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LoginSignup\\Login.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Header\\Header.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SideBar\\SideBar.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPage\\LandingPage.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\utility-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\circular-loader\\circular-loader.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\user-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\whatsApp-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LoginSignup\\LoginSignup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\FileUpload\\FileUpload.js",["726"],"import React, { Component } from 'react';\nimport PageTitle from '../Helmet';\nimport CircularLoader from '../circular-loader/circular-loader';\nimport Moment from 'react-moment';\nimport {fileUpload,getAudienceGroup,getAudienceData} from '../../Services/common-service';\nimport Popup from '../Popup/Popup';\nimport utils from '../../Services/utility-service';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\nimport './FileUpload.css';\n\nconst initialState = {\n    formControls:{\n        file:{\n            value:null\n        },\n        gpName:{\n            value:null\n        }\n        \n    },\n    operation: \"fileUpload\",\n    fileFormat:null,\n    gpUpdate: null,  \n    submitIdLoader:false,\n    openPopup: false,\n    groupNameList:[],\n    audienceData:[],\n    audienceGroupId: null,\n    fetchingData:false\n}\n\nclass FileUpload extends Component {\n    constructor(){\n        super();\n        this.state = initialState;\n        this.radioChangeHandler = this.radioChangeHandler.bind(this);\n    }\n    componentDidMount(){\n        this.fetchGroupNames();\n    }\n\n    fetchGroupNames(){\n        const body = {\n            \"maxResults\": 20,\n            \"start\": 0\n        }\n        getAudienceGroup(body)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                this.setState({\n                    groupNameList:data.audienceGroups\n                })\n            }\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    changeHandler = event => {\n        this.setState({\n              formControls: {\n                    file:{\n                        value: event.target.files \n                    }\n              }\n        });\n\n       console.log(this.state.formControls.file.value);\n    }\n\n    radioChangeHandler(event,params){\n\n        let v = event.target.value;\n        if(params === \"operation\"){\n            this.setState(state=>{\n                return{                   \n                    formControls:{\n                        ...state.formControls,\n                        file:{\n                            ...state.formControls.file,\n                            value:null\n                        }\n                    },\n                    operation: v,\n                    fileFormat: null,\n                }\n            })\n        }\n        else if(params === \"fileFormat\"){\n            this.setState({\n                fileFormat: event.target.value\n            })\n        } \n    }\n\n    togglePopup() {\n        this.setState({\n            openPopup: !this.state.openPopup\n        })\n    }\n    \n    chooseAgain(){\n        this.setState({\n            formControls: initialState.formControls\n        })\n    }\n    loadData(event){\n        const body = {\n            audienceGroupId: event.target.value\n        };\n        this.setState({\n            fetchingData:true,\n            audienceGroupId: event.target.value,\n            audienceData: []\n        })\n        getAudienceData(body)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success && parseInt(data.audience.length) > 0 ) {\n                this.setState({\n                    audienceData:data.audience,   \n                })\n                ToastsStore.success(data.message);\n            }\n            else if(parseInt(data.audience) === (null || [])){\n                this.setState({\n                    audienceData: [],   \n                })\n                ToastsStore.success(data.message);\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                fetchingData:false\n            })\n        }).catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n            this.setState({\n                fetchingData:false,\n                audienceData: null\n            })\n        })\n    }\n\n    \n    handleUpload(task){\n        if(task === \"update\"){\n            let audienceId = this.state.gpUpdate;\n            let audiences = this.state.formControls.file.value[0];\n            //const groupName = document.getElementById('gNameUpdate').value; \n            this.setState({\n                submitIdLoader:true\n            });\n            var formData = new FormData();\n            formData.append(\"audiences\",audiences); \n            formData.append(\"agId\",audienceId);\n            formData.append(\"fileFormat\",this.state.fileFormat.toUpperCase());\n        }\n        else if(task === \"fileUpload\"){\n            const groupName = document.getElementById('groupName').value;\n            console.log(document.getElementById('groupName'));\n            //let groupId = this.state.gpUpdate;\n            const checked = document.getElementById('remember').checked;\n            if(!groupName){\n                ToastsStore.error(\"Group Name is required\");\n                return;\n            }\n            this.setState({\n                submitIdLoader:true\n            });\n            var formData = new FormData();\n            formData.append(\"audiences\",this.state.formControls.file.value[0]);\n            formData.append(\"encoded\",checked);\n            formData.append(\"fileFormat\",this.state.fileFormat.toUpperCase());\n            formData.append(\"audienceName\",groupName);  \n            // formData.append(\"audienceId\",groupId); \n        }             \n        fileUpload(formData)\n        .then(response => response.json())\n        .then(data => {\n            // console.log(data);\n            this.setState({\n                submitIdLoader: false\n            })\n            if (data.success) {\n                ToastsStore.success(data.message);\n                let str = (data.rowProcessed > 1) ? data.rowProcessed+\" rows processed\" : data.rowProcessed+\" row processed\";\n                ToastsStore.success(str);\n                this.togglePopup();\n                this.fetchGroupNames();\n            } else {\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                submitIdLoader:false\n            })\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                submitIdLoader:false\n            })\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n    render() {\n      return (\n                <div className=\"wrapper-container\">\n                    <PageTitle title=\"Upload\" description=\"Welcome to Upload\"/>\n                    <div className=\"card-custom flex flex-direction--row flex-wrap pad--half\">\n                    <div className=\"col-20 flex flex-direction--row flex-wrap margin-btm margin-top senderId-action--wrapper\">\n                        <div className=\"col-5\">\n                            <div className=\"label\">Group Name</div>\n                            <select className=\"form-control\" name=\"gpName\" onChange={(e)=>this.loadData(e)}>\n                                <option>Choose...</option>\n                                {\n                                    this.state.groupNameList.map((item,index)=>{\n                                        return(\n                                            <option key={index} value={item.agId}>{item.name}</option>\n                                        );\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <button onClick={()=>{return(this.togglePopup(),this.setState(state =>{\n                            return{ formControls:{\n                                    ...state.formControls,\n                                    file:{\n                                        ...state.formControls.file,\n                                        value:null\n                                    }\n                                },\n                                fileFormat:null}}))}} className=\"btn btn-fill btn-success margin-left--auto\">Upload/Update Audience</button>\n                    </div>\n                    </div>\n                    <div className=\"card-custom padding-btm--half leads-table-wrapper\"\n                        style = { utils.isMobile ? {maxHeight: \"60vh\"} : {maxHeight: \"70vh\"}}\n                    >          \n                        <table className=\"client\">\n                            <thead>\n                                <tr>\n                                    <th>Audience Group Id</th>\n                                    <th>Name</th>\n                                    <th>Gender</th>\n                                    <th>City</th>\n                                    <th>Email</th>\n                                    <th>Mobile</th>\n                                    <th>Pincode</th>\n                                    <th>State</th>\n                                    <th>Created</th>\n                                    <th>Updated</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {   \n                                    this.state.audienceData && this.state.audienceData !== (null || []) && this.state.audienceData.map((item,index)=>{\n                                    return(\n                                        <tr key={index}>\n                                            <td>{this.state.audienceGroupId ? this.state.audienceGroupId : \"--\"}</td>\n                                            {(!item.namePrefix && !item.firstName && !item.middleName && !item.lastName) ? <td>--</td> :<td> {item.namePrefix} {item.firstName} {item.middleName} {item.lastName}</td>}\n                                            <td>{item.gender ? item.gender : \"--\"}</td>\n                                            <td>{item.city ? item.city : \"--\"}</td>\n                                            <td>{item.email ? item.email : \"--\"}</td>\n                                            <td>{item.mobile ? item.mobile :\"--\"}</td>\n                                            <td>{item.pincode ? item.pincode :\"--\"}</td>\n                                            <td>{item.state ? item.state : \"--\"}</td>          \n                                            <td><Moment format=\"DD-MM-YYYY\">{item.created ? item.created:\"--\" }</Moment></td>\n                                            <td><Moment format=\"DD-MM-YYYY\">{item.updated ? item.updated : \"--\"}</Moment></td>\n                                        </tr>                              \n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                        {\n                            this.state.audienceData.length === 0 &&\n                            <div className=\"margin-btm margin-top\" style={{textAlign:'center',fontSize:'small'}}>\n                                Choose Group Name to view Data\n                            </div>\n                        }\n                        {\n                            this.state.fetchingData &&\n                            <div className=\"margin-btm margin-top\">\n                                <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                            </div>\n                        }\n                    </div>\n                    {this.state.openPopup &&                    \n                        <Popup title={'Upload/Update Audience'} togglePopup={this.togglePopup.bind(this)}>\n\n            <article className=\"padding-all-12 col-20\">\n                <div className=\"label\">Please select one of the operation</div>\n                <label for=\"fileUpload\" className=\"radioBtn\">\n                    <input type=\"radio\" name=\"fileUpload\" checked={this.state.operation === \"fileUpload\"} \n                      value=\"fileUpload\"\n                      id=\"fileUpload\" \n                      onChange={(e)=>{this.radioChangeHandler(e,\"operation\")}}/>Add New Audience\n                    <span className=\"checkmark1\"></span>\n                </label>\n                <label for=\"fileUpdate\" className=\"radioBtn\">\n                    <input type=\"radio\" name=\"fileUpdate\" checked={this.state.operation === \"fileUpdate\"} \n                    id=\"fileUpdate\" \n                    value=\"fileUpdate\" onChange={(e)=>{this.radioChangeHandler(e,\"operation\")}}\n                    // onClick={props.loadData}\n                    // disabled ={(props.formControls.audienceGrId.value || props.audienceGrId) ? false: true}\n                    />Update Audience\n                    \n                    <span className=\"checkmark1\"></span>\n                </label>\n            </article> \n\n                        {\n                            this.state.operation === \"fileUpload\" &&\n                            <div className=\"file-upload--card pad--half flex flex-direction--col\">\n                                 <div className=\"section-title\">File Upload</div>\n                                <div className=\"col-20 margin-top--half margin-btm--half\">\n                                    <div className=\"label\">Group Name</div>\n                                    <input type=\"text\" className=\"form-control\" id=\"groupName\" style={{width:\"100%\"}}/>\n                                    <div className=\"margin-top--half\">\n                                        <input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\"/>\n                                        <span className=\"label\" style={{verticalAlign:'text-top'}}>SHA Encryption Required</span>\n                                    </div>\n                                </div>\n                               \n                                <article className=\"margin-btm--half\">            \n                                    <div><b>Please select format</b></div>\n                                    <form className=\"flex align-space-between\" style={{border:\"1px solid rgb(204, 204, 204)\",borderRadius: \"5px\",padding:\"5px\" }}>\n                                        <span>\n                                            <input type=\"radio\" id=\".xls\" value=\".xls\" name=\".xls\" checked={this.state.fileFormat === \".xls\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                            <label for=\".xls\">XLS</label>\n                                            <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xls Template</u></b></a></div>\n                                        </span>\n                                        <span>\n                                            <input type=\"radio\" id=\".xlsx\" value=\".xlsx\" name=\".xlsx\" checked={this.state.fileFormat === \".xlsx\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                            <label for=\".xlsx\">XLSX</label>\n                                            <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_XLSX.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xlsx Template</u></b></a></div>\n                                        </span>\n                                        <span>\n                                            <input type=\"radio\" id=\".csv\" value=\".csv\" name=\".csv\" checked={this.state.fileFormat === \".csv\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                            <label for=\".csv\">CSV</label>\n                                            <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download csv Template</u></b></a></div>\n                                        </span>\n                                    </form>\n                                </article> \n                                {\n                                    this.state.formControls &&  this.state.formControls.file && !this.state.formControls.file.value && this.state.fileFormat &&\n                                    \n                                        <form>\n                                            <input type=\"file\" \n                                                accept={`${this.state.fileFormat}`}\n                                                className=\"form-control\" \n                                                name=\"file\" \n                                                id=\"file\"\n                                                style={{width:\"100%\"}}\n                                                onChange={this.changeHandler.bind(this)} /> \n                                                <div className=\"col-20\">\n                                                    <p style={{color:\"green\"}}>Please upload {`${this.state.fileFormat}`} file only</p> \n                                                    {/* <a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\" className=\"\"><b><u>Download csv Template</u></b></a> */}\n                                                </div>                            \n                                        </form>\n                                }                                \n                                {\n                                    this.state.formControls &&  this.state.formControls.file && this.state.formControls.file.value && \n                                    <div className=\"label\">{this.state.formControls.file.value[0].name}</div>\n                                }\n                                {\n                                    this.state.submitIdLoader &&\n                                    <div>\n                                            <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                    </div>\n                                }\n                                {\n                                    !this.state.submitIdLoader && this.state.formControls &&  this.state.formControls.file && this.state.formControls.file.value &&\n                                    <div className=\"margin-top--half\">\n                                        <button className=\"btn btn-fill btn-primary\" onClick={()=>this.chooseAgain()}>Choose Again</button>\n                                        <button className=\"btn btn-fill btn-success margin-left--half\" onClick={()=>this.handleUpload(\"fileUpload\")}>Upload</button>\n                                    </div>\n                                }\n                            </div>\n                        }\n                        {\n                            this.state.operation === \"fileUpdate\" &&\n                            <article className=\"file-upload--card pad--half flex flex-direction--col\">                    \n                            <div className=\"col-14 margin-btm--half\">\n                                <div className=\"label\">Group Name</div>\n                                <select className=\"form-control\" style={utils.isMobile ? {width: \"300%\"}: {width:\"125%\"}} name=\"gpUpdate\" onChange={(e)=>this.setState({gpUpdate: e.target.value})} id=\"gNameUpdate\">\n                                    <option>Choose...</option>\n                                    {\n                                        this.state.groupNameList.map((item,index)=>{\n                                            return(\n                                                <option key={index} value={item.agId}>{item.name}</option>\n                                            );\n                                        })\n                                    }\n                                </select>                               \n                            </div>\n                            { this.state.gpUpdate &&\n                            <article className=\"margin-btm--half\">            \n                                <div><b>Please select format</b></div>\n                                <form className=\"flex align-space-between\" style={{border:\"1px solid rgb(204, 204, 204)\",borderRadius: \"5px\",padding:\"5px\" }}>\n                                    <span>\n                                        <input type=\"radio\" id=\".xls\" value=\".xls\" name=\".xls\" checked={this.state.fileFormat === \".xls\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                        <label for=\".xls\">XLS</label>\n                                        <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xls Template</u></b></a></div>\n                                    </span>\n                                    <span>\n                                        <input type=\"radio\" id=\".xlsx\" value=\".xlsx\" name=\".xlsx\" checked={this.state.fileFormat === \".xlsx\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                        <label for=\".xlsx\">XLSX</label>\n                                        <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_XLSX.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xlsx Template</u></b></a></div>\n                                    </span>\n                                    <span>\n                                        <input type=\"radio\" id=\".csv\" value=\".csv\" name=\".csv\" checked={this.state.fileFormat === \".csv\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                        <label for=\".csv\">CSV</label>\n                                        <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download csv Template</u></b></a></div>\n                                    </span>\n                                </form>\n                            </article> \n                            }\n                                {\n                                    !this.state.formControls.file.value && this.state.fileFormat &&\n                                    <form>\n                                        <input type=\"file\" \n                                            accept={`${this.state.fileFormat}`} \n                                            className=\"form-control\" \n                                            name=\"file\" \n                                            id=\"file\"\n                                            onChange={this.changeHandler.bind(this)}\n                                            style={{width:\"100%\"}} />  \n                                             <div className=\"col-20\">\n                                                <p style={{color:\"green\"}}>Please upload {`${this.state.fileFormat}`} file only</p> \n                                                {/* <a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\" className=\"\"><b><u>Download Template</u></b></a> */}\n                                            </div>                           \n                                    </form>\n                                }\n                                {\n                                    this.state.formControls &&  this.state.formControls.file && this.state.formControls.file.value && \n                                    <div className=\"label\">{this.state.formControls.file.value[0].name}</div>\n                                }\n                                {\n                                    this.state.submitIdLoader &&\n                                    <div>\n                                            <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                    </div>\n                                }\n                                {\n                                    this.state.gpUpdate && this.state.formControls &&  this.state.formControls.file && this.state.formControls.file.value && \n                                    <div className=\"margin-top--half\">\n                                        <button className=\"btn btn-fill btn-primary\" onClick={()=>this.chooseAgain()}>Choose Again</button>\n                                        <button className=\"btn btn-fill btn-green margin-left--half\" onClick={()=>this.handleUpload(\"update\")}>UPDATE</button>\n                                    </div>\n                                }\n                            \n                            </article>\n                        }\n                               \n                        </Popup>\n                    }\n                    <ToastsContainer position={ToastsContainerPosition.TOP_RIGHT} lightBackground store={ToastsStore} />\n                </div>\n                \n              );\n    }\n  }\n  \n  export default FileUpload;","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Dashboard\\dashboard.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\PkgServices\\PkgServices.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\BuyCredits\\BuyCredits.js",["727"],"import React, { Component } from 'react';\nimport PageTitle from '../../Components/Helmet';\nimport {fetchRoles} from '../../Services/roles-service';\nimport utils from '../../Services/utility-service';\nimport CircularLoader from '../../Components/circular-loader/circular-loader';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\nimport {getMediums} from '../../Services/medium-service';\nimport {getAudienceMediumMapping} from '../../Services/datasource-service';\nimport {getCampaign}from '../../Services/campaign-service';\nimport {getAllClients} from '../../Services/clients-service';\nimport {unPaidSubs,makePayment,getUpdatedWallet} from '../../Services/subscriptions-service';\nimport {getAllServicePackages} from '../../Services/subscriptions-service';\nimport './BuyCredit.css';\nimport Revenue from '../../Components/Revenue/Revenue';\nimport {Link} from 'react-router-dom';\nimport PopUp from '../../Components/Popup/Popup';\nimport TransactionHistory from '../../Components/TransactionHistory/TransactionHistory';\nimport {updateManualTxn} from '../../Services/subscriptions-service';\nimport DatePicker from \"react-datepicker\";\nimport { Icon, Popup } from 'semantic-ui-react';\nimport Youtube from '../../Components/Youtube/Youtube';\nimport Packages from '../Subscriptions/ServicePackages';\n\nconst initialState = {\n    formControls: {\n        amount: {\n          value: '1000'\n        },\n        bId: {\n            value: '',\n        },\n        tId: {\n            value: '',\n        },\n        pmtMode: {\n            value: '',\n        },\n        amt: {\n            value: '',\n        },\n        invoice:{\n            value:\"\"\n        },\n        // url: {\n        //     value: '',\n        // },\n        date: {\n            value: '',\n        },\n        remarks:{\n            error:'',\n            value:''\n        },\n        client:{\n            value:'',\n        }\n    },\n    datasources:[{id:'1',name:'sample 1'},{id:'2',name:'sample 2'},{id:'3',name:'sample 3'}],\n    detailOpen:'SMS',\n    error: \"\",\n    rolesFetched:false,\n    accessDenied:false,\n    active:6,\n    userInfo:{\n        walletInfo: {\n            amount: 0,\n            walletId: 0\n        }\n    },\n    list:[],\n    mediums:[],\n    segments:[],\n    servicePackages:[],\n    clients:[],\n    showSegments:false,\n    loader:false,\n    howTo: false\n}\n\nclass BuyCredits extends Component {\n    constructor(props){\n        super(props);\n        this.state = initialState;\n    }\n\n    changeHandler = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n        this.setState({\n                formControls: {\n                    ...this.state.formControls,\n                    [name]: {\n                    ...this.state.formControls[name],\n                    value\n                    }\n                }\n        });\n        \n    }\n    getAllServicePackages(){\n        let body={}\n        getAllServicePackages(body)\n        .then( response => response.json())\n        .then( data=>{\n            if(data.success){\n                this.setState({\n                    servicePackages: data.servicePackages\n                })\n                // ToastsStore.success(data.message);\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error =>{\n            console.log(error);\n            ToastsStore.error(\"Something Went Wrong, Please Try Again Later.!!!\");\n        })     \n    }\n\n    showDetail(item){\n        this.setState({\n            detailOpen:item\n        })\n    }\n\n    componentDidMount(){\n        if(utils.isAdmin){\n            this.afterDidMount();\n        }else{\n            this.getRequiredRoles();\n        }\n    }\n\n    getRequiredRoles(){\n        fetchRoles('Credits')\n        .then(response => response.json())\n        .then(data =>{\n            if(data.success && data.subRoles && data.subRoles.length>0){\n                utils.roles = data.subRoles;\n                // console.log(data.subRoles);\n                this.afterDidMount();\n            }else if(data.success && data.subRoles && data.subRoles.length === 0){\n                this.setState({\n                    accessDenied:true\n                })\n            }else{\n                ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n            }\n        })\n        .catch(error =>{\n             console.log(error);\n             ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n\n    afterDidMount(){\n        this.setState({\n            rolesFetched: true\n\n        },()=>{\n            let qp = utils.getQueryParams();\n            if(qp && qp.prfl){\n                this.setState({\n                    active: 2\n                },()=>{\n                    document.getElementById(\"input-amount\").value = (1-(parseFloat(qp.prfl))).toFixed(2);\n                })\n            }else{\n                this.changeTab(0);\n            }\n            if(qp && qp.success){\n                ToastsStore.success(qp.message,3000);\n            }else if(qp && !qp.success && qp.message){\n                ToastsStore.error(qp.message,3000);\n            }\n        })\n        let userInfo = localStorage.getItem(\"userInfo\");\n        if(userInfo){\n            let info = JSON.parse(userInfo);\n            if(info.walletInfo){\n                this.setState({\n                    userInfo: info\n                })\n            }\n        }\n        this.fetchUpdatedWalletBalance();\n    }\n\n    fetchUpdatedWalletBalance(){\n        getUpdatedWallet({})\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) { \n                let temp = this.state.userInfo;\n                temp.walletInfo.amount = data.walletInfo.amount;\n                this.setState({\n                    userInfo: temp\n                });                              \n            } \n        })\n        .catch(error => {\n              console.log(error);\n        })\n    }\n\n    checkWallet(){\n        let body={\n            maxResults: 50,\n            start: 0\n        }\n        unPaidSubs(body)\n        .then( response => response.json())\n        .then( data=>{      \n            if(data.success){\n                this.setState({\n                    list: data.subscriptionDTOs,\n                })\n            }\n        })\n        .catch(error =>{\n            console.log(error);\n            this.setState({\n                submitLoader: true\n            })\n            ToastsStore.error(\"Something went wrong, Please try again later.!!!\");\n        })\n    }\n\n    submitPaymentForm(){\n        let form = document.getElementById(\"paymentForm\");\n        let amount = document.getElementById(\"input-amount\").value;\n        if(!amount || (amount && amount < 1)){\n            this.setState({\n                error: \"Please enter a valid amount\"\n            })\n            return;\n        }else{\n            this.setState({\n                error: \"\"\n            })\n        }\n        document.getElementById(\"form-amount\").value = parseInt(amount);\n        form.submit();\n    }\n\n    buyNow(index){\n        let body = {\n            \"amount\": this.state.list[index].totalPrice,\n            \"subscriptionCode\": this.state.list[index].code\n        }\n        makePayment(body)\n        .then( response => response.json())\n        .then( data=>{      \n            if(data.success){\n                ToastsStore.success(data.message);\n                let body={\n                    maxResults: 50,\n                    start: 0\n                }\n                unPaidSubs(body)\n                .then( response => response.json())\n                .then( data=>{      \n                    if(data.success){\n                        this.setState({\n                            list: data.subscriptionDTOs,\n                        })\n                    }\n                })\n                .catch(error =>{\n                    console.log(error);\n                    this.setState({\n                        submitLoader: true\n                    })\n                    ToastsStore.error(\"Something went wrong, Please try again later.!!!\");\n                })\n            }else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error =>{\n            console.log(error);\n            this.setState({\n                submitLoader: true\n            })\n            ToastsStore.error(\"Something went wrong, Please try again later.!!!\");\n        })\n    }\n\n    changeTab(tab){\n        this.setState({\n            active: tab\n        },()=>{\n            if(tab === 6){\n                this.fetchMediums();\n            }else if(tab === 1){\n                this.checkWallet();\n            }\n            else if(tab === 4){\n                this.fetchClients();\n            }\n        })\n    }\n\n    fetchMediums(){\n        const body={}\n        getMediums(body)\n        .then(response => response.json())\n        .then(data => {\n              if (data.success) { \n                    this.setState({\n                          mediums: this.formatMediums(data.mediumList), \n                    },()=>{\n                        for(let i=0;i<this.state.mediums.length;i++){\n                            this.fetchDatasourcesByMedium(i);\n                        }\n                    });                              \n              } \n        })\n        .catch(error => {\n              console.log(error);\n        })\n    }\n\n    formatMediums(data){\n        if(data && data.length>0){\n            data.forEach(el => {\n                el['audienceGroups'] = [];\n                el['ammId'] = \"\";\n                el['rc'] = \"\";\n                el['rpc'] = \"\";\n                el['tax'] = 0;\n                el['minRc'] = 0;\n                el['ta'] = 0;\n                el['error'] = \"\";\n            });\n        }\n        return data;\n    }\n\n    fetchDatasourcesByMedium(index){\n        let body = {\n              mediumId: this.state.mediums[index].id                \n        }\n        getAudienceMediumMapping(body)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                let temp = this.state.mediums;\n                temp[index].audienceGroups = data.audienceGroups; \n                this.setState({\n                    mediums: temp     \n                });                 \n            }\n        })\n        .catch(error => {\n              console.log(error);\n        })\n    }\n  \n    payNow(index){\n        let temp = this.state.mediums;\n        let medium = temp[index];\n        if(!medium.ammId){\n            temp[index].error = \"Please choose Datasource to proceed\";\n        }else if(medium.rc < medium.minRc){\n            temp[index].error = \"Minimum \"+medium.minRc+\" credits has to be bought\";\n        }else{\n            temp[index].error=\"\"\n        }\n        this.setState({\n            mediums: temp\n        })\n        if(!temp[index].error){\n            let form = document.getElementById(\"paymentForm\");\n            document.getElementById(\"form-amount\").value = parseFloat((medium.ta).toFixed(2));\n            form.submit();\n        }\n    }\n\n    handleDsChange(event,index){\n        let val = event.target.value;\n        let temp = this.state.mediums;\n        let ag = temp[index].audienceGroups[parseInt(val)];\n        temp[index].ammId = val;\n        temp[index].rc = ag.minCampaignCount;\n        temp[index].rpc = ag.price;\n        let prc = (ag.price*ag.minCampaignCount);\n        temp[index].tax = (prc*0.18);\n        temp[index].minRc = ag.minCampaignCount;\n        temp[index].ta = prc+(prc*0.18);\n        this.setState({\n            mediums: temp   \n        });\n    }\n\n    handleChange(event,index){\n        let val = event.target.value;\n        let temp = this.state.mediums;\n        let ag = temp[index].audienceGroups[parseInt(temp[index].ammId)];\n        temp[index].rc = val;\n        let prc = (ag.price*val);\n        temp[index].tax = (prc*0.18);\n        temp[index].ta = prc+(prc*0.18);\n        this.setState({\n            mediums: temp   \n        });\n    }\n\n    showSegments(index){\n        this.setState({\n            showSegments: true,\n            segments: []\n        })\n        let temp = this.state.mediums;\n        let ag = temp[index].audienceGroups[parseInt(temp[index].ammId)];\n        const body={\n            ammId: parseInt(ag.ammId),\n            bamId: parseInt(ag.bamId)\n        }\n        getCampaign(body)\n        .then((response)=> response.json())\n        .then((data)=> {\n            //let data = {\"success\":true,\"message\":null,\"allowedActions\":[],\"segmentDetails\":[{\"segmentName\":\"city\",\"title\":\"City\",\"desc\":null,\"icon\":\"fas fa-map-marked\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":null},\"segmentType\":\"TXT\",\"asmId\":128,\"basmId\":null,\"segmentId\":52},{\"segmentName\":\"mobile_bill\",\"title\":\"Mobile Bill Per Month (ARPU)\",\"desc\":null,\"icon\":\"fa fa-mobile\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Upto Rs. 200\"},{\"id\":3,\"value\":\"Rs. 201 to 500\"},{\"id\":4,\"value\":\"Rs. 501 to 1000\"},{\"id\":5,\"value\":\"Rs. 1001+\"}]},\"segmentType\":\"MUL\",\"asmId\":129,\"basmId\":null,\"segmentId\":6},{\"segmentName\":\"pincode\",\"title\":\"Pincode\",\"desc\":null,\"icon\":\"fas fa-thumbtack\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":null},\"segmentType\":\"TXT\",\"asmId\":130,\"basmId\":null,\"segmentId\":50},{\"segmentName\":\"handset_name\",\"title\":\"Handset Name\",\"desc\":null,\"icon\":\"fa fa-font\",\"price\":0.05,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Acer\"},{\"id\":2,\"value\":\"Apple\"},{\"id\":3,\"value\":\"Asus\"},{\"id\":4,\"value\":\"Blackberry\"},{\"id\":5,\"value\":\"Celkon\"},{\"id\":6,\"value\":\"Gionee\"},{\"id\":7,\"value\":\"Google\"},{\"id\":8,\"value\":\"HTC\"},{\"id\":9,\"value\":\"Huawei\"},{\"id\":10,\"value\":\"Intex\"},{\"id\":11,\"value\":\"Jolla\"},{\"id\":12,\"value\":\"Karbonn\"},{\"id\":13,\"value\":\"LAVA\"},{\"id\":14,\"value\":\"LeEco\"},{\"id\":15,\"value\":\"Lenovo\"},{\"id\":16,\"value\":\"LG\"},{\"id\":17,\"value\":\"Meizu\"},{\"id\":18,\"value\":\"Micromax\"},{\"id\":19,\"value\":\"Motorola\"},{\"id\":20,\"value\":\"Nokia\"},{\"id\":21,\"value\":\"OnePlus\"},{\"id\":22,\"value\":\"Oppo\"},{\"id\":23,\"value\":\"Panasonic\"},{\"id\":24,\"value\":\"Philips\"},{\"id\":25,\"value\":\"Sagem\"},{\"id\":26,\"value\":\"Samsung\"},{\"id\":27,\"value\":\"Sony\"},{\"id\":28,\"value\":\"Sony Ericson\"},{\"id\":29,\"value\":\"Spice\"},{\"id\":30,\"value\":\"Vertu\"},{\"id\":31,\"value\":\"Vivo\"},{\"id\":32,\"value\":\"Vodofone\"},{\"id\":33,\"value\":\"Xiaomi\"},{\"id\":34,\"value\":\"Xolo\"},{\"id\":35,\"value\":\"ZTE\"}]},\"segmentType\":\"MUL\",\"asmId\":131,\"basmId\":null,\"segmentId\":13},{\"segmentName\":\"ageSlider2\",\"title\":\"Age\",\"desc\":\"\",\"icon\":\"\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":15,\"maxValue\":75,\"segmentValuesList\":null},\"segmentType\":\"RNG\",\"asmId\":132,\"basmId\":null,\"segmentId\":1},{\"segmentName\":\"handset_cost\",\"title\":\"Handset Cost\",\"desc\":null,\"icon\":\"fas fa-hand-holding-usd\",\"price\":0.02,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Less than INR 1500\"},{\"id\":2,\"value\":\"INR 1500 - 3000\"},{\"id\":3,\"value\":\"INR 3001 - 5000\"},{\"id\":4,\"value\":\"INR 5K - 10K\"},{\"id\":5,\"value\":\"INR 10K - 15K\"},{\"id\":6,\"value\":\"INR 15K - 20K\"},{\"id\":7,\"value\":\"INR 20K - 30K\"},{\"id\":8,\"value\":\"INR 30K - 40K\"},{\"id\":9,\"value\":\"INR 40K+\"}]},\"segmentType\":\"MUL\",\"asmId\":133,\"basmId\":null,\"segmentId\":16},{\"segmentName\":\"data_user\",\"title\":\"Data User\",\"desc\":null,\"icon\":\"fa fa-user-lock\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Yes\"},{\"id\":2,\"value\":\"No\"}]},\"segmentType\":\"RDO\",\"asmId\":134,\"basmId\":null,\"segmentId\":8},{\"segmentName\":\"national_roaming\",\"title\":\"National Roaming\",\"desc\":null,\"icon\":\"fa fa-broadcast-tower\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Yes\"},{\"id\":2,\"value\":\"No\"}]},\"segmentType\":\"RDO\",\"asmId\":135,\"basmId\":null,\"segmentId\":7},{\"segmentName\":\"payment_model\",\"title\":\"Payment Model\",\"desc\":null,\"icon\":\"fa fa-money-bill-alt\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Prepaid\"},{\"id\":3,\"value\":\"Postpaid\"}]},\"segmentType\":\"RDO\",\"asmId\":136,\"basmId\":null,\"segmentId\":10},{\"segmentName\":\"handsetOS_category\",\"title\":\"Handset OS Category\",\"desc\":null,\"icon\":\"fab fa-opera\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Android\"},{\"id\":2,\"value\":\"iOS\"},{\"id\":3,\"value\":\"Windows\"}]},\"segmentType\":\"MUL\",\"asmId\":137,\"basmId\":null,\"segmentId\":17},{\"segmentName\":\"handset_type\",\"title\":\"Handset Type\",\"desc\":null,\"icon\":\"fa fa-mobile-alt\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Feature Phone\"},{\"id\":3,\"value\":\"Smart Phone\"}]},\"segmentType\":\"RDO\",\"asmId\":138,\"basmId\":null,\"segmentId\":12},{\"segmentName\":\"ageof_device\",\"title\":\"Age of Device\",\"desc\":null,\"icon\":\"fas fa-clock\",\"price\":0.02,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"1-3 Months\"},{\"id\":2,\"value\":\"3-6 Months\"},{\"id\":3,\"value\":\"6-12 Months\"},{\"id\":4,\"value\":\"1 Year +\"}]},\"segmentType\":\"MUL\",\"asmId\":139,\"basmId\":null,\"segmentId\":18},{\"segmentName\":\"customer_BusinessCat\",\"title\":\"Customer Business Category\",\"desc\":null,\"icon\":\"fas fa-user-tie\",\"price\":0.02,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"SME\"},{\"id\":2,\"value\":\"Enterprise\"}]},\"segmentType\":\"MUL\",\"asmId\":140,\"basmId\":null,\"segmentId\":22},{\"segmentName\":\"gender\",\"title\":\"Gender\",\"desc\":\"gender\",\"icon\":\"fa fa-user\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Male\"},{\"id\":3,\"value\":\"Female\"}]},\"segmentType\":\"RDO\",\"asmId\":141,\"basmId\":null,\"segmentId\":4},{\"segmentName\":\"amountRange\",\"title\":\"Amount\",\"desc\":\"Amount\",\"icon\":\"fa fa-users\",\"price\":0.99,\"subscriptionType\":\"Premium\",\"values\":{\"minValue\":100,\"maxValue\":900,\"segmentValuesList\":null},\"segmentType\":\"RNG\",\"asmId\":235,\"basmId\":null,\"segmentId\":2},{\"segmentName\":\"amountRange\",\"title\":\"Amount\",\"desc\":\"Amount\",\"icon\":\"fa fa-users\",\"price\":0.99,\"subscriptionType\":\"Premium\",\"values\":{\"minValue\":100,\"maxValue\":900,\"segmentValuesList\":null},\"segmentType\":\"RNG\",\"asmId\":236,\"basmId\":null,\"segmentId\":2}]} \n            if(data.success){\n                this.setState({\n                    segments: data.segmentDetails    \n                });\n            }else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch( error =>{\n                console.log(error);\n                ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        }) \n    }\n    \n    closeAction(){\n        this.setState({\n            showSegments: false\n        })\n    }\n\n    dobChange = val => {\n        let temp1 = this.state.formControls;\n        temp1.date.value = val;\n        this.setState({\n            formControls: temp1\n        })\n    }\n\n    fetchClients(){\n        let body={}\n        getAllClients(body)\n        .then(response => response.json())\n        .then(data =>{\n            if(data.success){\n                this.setState({\n                    clients: data.clients\n                })\n                ToastsStore.success(data.message);\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error => {\n            ToastsStore.error(\"Something went wrong. Please try again later !!!\");\n        })\n    }\n\n    submitManualTxn(){\n        let t = this.state.formControls;\n        // if(!t.tId.value || !t.pmtMode.value || !t.amt.value || !t.url.value || !t.date.value || !t.remarks.value || !this.state.formControls.client.value){\n            if(!t.tId.value || !t.pmtMode.value || !t.amt.value || !t.date.value || !t.remarks.value || !this.state.formControls.client.value || !t.invoice.value){   \n        t.remarks.error = \"Please fill all details correctly\";\n            this.setState({\n                formControls: t\n            })\n            return;\n        }else{\n            t.remarks.error = \"\";\n            this.setState({\n                formControls: t,\n                loader: true\n            })\n        }\n        let bId;\n        try{\n            bId = JSON.parse(localStorage.getItem('bInfo'));\n        }catch(e){\n            ToastsStore.error(e);\n        }\n        let body = {\n            businessUid: this.state.formControls.client.value,\n            txnId: t.tId.value,\n            paymentMode: t.pmtMode.value,\n            amount: parseFloat(t.amt.value),\n            invoice:t.invoice.value,\n            // url: t.url.value,\n            paymentDate: new Date(t.date.value),\n            remarks: t.remarks.value,\n        }\n        //body = \"?\" + utils.jsonToQueryString(body);\n        updateManualTxn(body)\n        .then((response)=> response.json())\n        .then((data)=> {\n            if(data.success){\n                ToastsStore.success(data.message);\n                this.clearManualDetails();\n            }else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                loader: false\n            })\n        })\n        .catch( error =>{\n                console.log(error);\n                this.setState({\n                    loader: false\n                })\n                ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n\n    clearManualDetails(){\n        let temp = this.state.formControls;\n        temp.tId.value = 0;\n        temp.pmtMode.value=\"\";\n        temp.client.value=\"\";\n        temp.amt.value=0;\n        temp.date.value=null;\n        temp.remarks.value=\"\";\n        this.setState({\n            formControls: temp\n        })\n    }\n\n    showVideo(){\n        this.setState({\n            howTo: !this.state.howTo\n        })\n    }\n\n    render(){\n        const style = {\n            borderRadius: 0,\n            opacity: 0.85,\n            padding: '1em',\n            maxWidth:'26%',\n        }\n\n        return(\n            <React.Fragment>\n                <PageTitle title=\"Buy Credits\" description=\"Welcome to Buy Credits\"/>\n                {\n                    this.state.rolesFetched && utils.hasRole('wallet_mgmt') &&\n                    <div className=\"wrapper-container\">  \n                        <div className=  { utils.isMobile ? \"ui pointing secondary menu overflowX-auto\" : \"ui pointing secondary menu\"}>    \n                            <div className={`${this.state.active === 0 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(0)}>Package Details</div>                  \n                            <div className={`${this.state.active === 6 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(6)}>Campaign Price Estimate</div>\n                            {\n                                utils.isSuAdmin &&       \n                                <div className={`${this.state.active === 1 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(1)}>Subscriptions <span className=\"text-intent\">(Payment Pending)</span></div>\n                            }\n                            <div className={`${this.state.active === 2 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(2)}>Wallet&nbsp;<span className=\"text-intent\">(Balance &#8377; {this.state.userInfo.walletInfo.amount})</span></div>\n                            <div className={`${this.state.active === 3 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(3)}>Transaction History</div>\n                            {\n                                (utils.isSuAdmin || (this.props.userType && this.props.userType ===\"AGENCY\")) &&\n                                <div className={`${this.state.active === 5 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(5)}>Revenues</div>\n                            }\n                            {\n                                // (utils.isSuAdmin || utils.hasRole('wallet_mnl_txn')) &&\n                                utils.isSuAdmin &&\n                                <div className={`${this.state.active === 4 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(4)}>Manual Transaction</div>\n                            }\n                        </div>\n                        <div className=\"ui segment\">\n                            {\n                                this.state.active === 6 &&\n                                <React.Fragment>\n                                    <div className=\"margin-btm--half\">\n                                       <i className=\"youtube large icon\" style={{ color: '#ff0201' }}></i>\n                                        <span className=\"pointer text--bold text--underline\" style={{color:'#4183c4',textAlign:'end'}} onClick={()=>{this.showVideo()}}>How to Buy Credits and Recharge Wallet ?</span>\n                                    </div>\n                                    {\n                                        this.state.howTo && \n                                        <PopUp title={'How to Buy Credits and Recharge Wallet'} togglePopup={this.showVideo.bind(this)}>\n                                            <Youtube url={'OydbieOThvE'}/>\n                                        </PopUp>\n                                    }\n                                    <section className=\"ui cards\">\n                                        {\n                                            this.state.mediums.map((item,index) =>{\n                                                return(\n                                                    <div key={index} class=\"card text--center\" style={{margin:'1.5em'}}>\n                                                        <Popup\n                                                            trigger={<Icon name='question circle' color=\"blue\" style={{fontSize:'1.5em', margin:'0.25rem 0 0 18.5rem'}}/>}\n                                                            position='Top Left'\n                                                            style={style}\n                                                            inverted\n                                                            flowing\n                                                            hoverable>\n                                                                <Popup.Content>\n                                                                    <p style={{textAlign:'justify'}}>Datasource are the various sources of the data which is used to run the campaign. Each Datasource has relevant filters/segments that enable you to reach out to the pinpoint targeted audience via {item.name}</p> \n                                                                    {/* <p style={{textAlign:'justify'}}>Datasource are the various sources of the <br/> data which is used to run the campaign.<br/>Each Datasource has relevant filters/segments <br/>that enable you to reach out to the pinpoint<br/> targeted audience via {item.name}</p>  */}\n                                                                </Popup.Content>\n                                                        </Popup>\n                                                        <div className=\"content\" style={{padding:'2.5em',borderTop:'0px'}}>\n                                                            <div className=\"header padding-btm--half\" style={{color:'#4183c4',fontSize:'2em'}}>\n                                                                {item.name}\n                                                            </div>    \n                                                        \n                                                        <div className=\"col-20 margin-top--half\">\n                                                            <div className=\"label\">Choose Datasource&nbsp;&nbsp;\n                                                                {\n                                                                    !!item.ammId &&\n                                                                    <i aria-hidden=\"true\" onClick={()=>{this.showSegments(index)}} className=\"blue info circle icon\"></i>\n                                                                }\n                                                            </div>\n                                                            <select className=\"form-control\"\n                                                            name=\"ammId\"\n                                                            value={item.ammId} \n                                                            onChange={event => {this.handleDsChange(event,index)}}>                                  \n                                                                    <option defaultValue>-Select Datasource-</option>\n                                                                    {\n                                                                        item.audienceGroups.map((item,index)=>{    \n                                                                        return(\n                                                                                <option key={index} value={index}>{item.name}</option>                                       \n                                                                        );                               \n                                                                        })                      \n                                                                    }  \n                                                            </select>\n                                                        </div>\n                                                        <div className=\"col-20 margin-top\">\n                                                            <div className=\"label\">Requested Credits</div>\n                                                            <input  type=\"text\"\n                                                                    className=\"form-control\"\n                                                                    name=\"rc\"\n                                                                    value={item.rc} \n                                                                    disabled={!item.ammId}\n                                                                    style={{width:'95%'}}\n                                                                    onChange={event => {this.handleChange(event,index)}}>\n                                                            </input>\n                                                        </div>\n                                                        {\n                                                            !!item.ammId &&\n                                                            <div className=\"text--center margin-btm--half margin-top--half\" style={{fontSize:'12px'}}>Minimum {item.minRc} credits has to be bought</div>\n                                                        }\n                                                        <div className=\"col-20 flex pad bdr-btm flex-space--btw\">\n                                                            <div className=\"text--bold text--darker\">Rate Per Credit</div>\n                                                            <div className=\"text--bold text--darker\">&#8377; {item.rpc}</div>\n                                                        </div>\n                                                        <div className=\"col-20 flex pad bdr-btm flex-space--btw\">\n                                                            <div className=\"text--bold text--darker\">GST Amount(18%)</div>\n                                                            <div className=\"text--bold text--darker\">&#8377; {(item.tax).toFixed(2)}</div>\n                                                        </div>\n                                                        <div className=\"col-20 flex pad bdr-btm flex-space--btw\">\n                                                            <div className=\"text--bold text--darker\">Total Amount</div>\n                                                            <div className=\"text--bold text--darker\">&#8377; {(item.ta).toFixed(2)}</div>\n                                                        </div>\n                                                        {\n                                                            item.error &&\n                                                            <span className=\"form-error\">{item.error}</span>\n                                                        }\n                                                        <div className=\"col-20 flex flex-directrion--row flex-wrap margin-top\">\n                                                            <div className=\"col-20\">\n                                                                <button className=\"ui green button\" onClick={()=>this.payNow(index)} style={{width:'100%',borderRadius:'0'}}>Recharge Wallet</button>\n                                                            </div>\n                                                        </div>                         \n                                                    </div>\n                                                </div>\n                                            ); \n                                        })\n                                    }       \n                                    </section>\n                                    {\n                                        this.state.showSegments && \n                                        <PopUp title={'Segments Available'} togglePopup={this.closeAction.bind(this)}>\n                                            <div className=\"col-20 flex flex-direction--col flex-horz-center flex-align--center\">\n                                                {\n                                                    this.state.segments.map((item,index)=>{\n                                                        return(\n                                                            <div id={index} className=\"bdr-btm col-12 margin-btm--half margin-top--half text--center\">\n                                                                {\n                                                                    item.icon &&\n                                                                    <span className=\"margin-right--quar\">\n                                                                        <i aria-hidden=\"true\" className={`${item.icon} icon`}></i>\n                                                                    </span>\n                                                                } \n                                                                {item.title}\n                                                            </div>  \n                                                        )\n                                                    })\n                                                }\n                                                {\n                                                    this.state.segments.length === 0 &&\n                                                    <div className=\"global-loader col-1\">\n                                                        <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                                    </div>\n                                                }\n                                            </div>\n                                        </PopUp>\n                                    }\n                                </React.Fragment>\n                            }\n                            {\n                                this.state.active === 1 &&\n                                utils.isSuAdmin &&\n                                <React.Fragment>\n                                    {\n                                        this.state.list && this.state.list.length>0 &&\n                                        <section className=\"ui cards\">\n                                            {\n                                                this.state.list.map((item,index) =>{\n                                                    return(\n                                                        <div key={index} class=\"card text--center\" style={{margin:'1.5em'}}>\n                                                            <div className=\"content\" style={{padding:'2.5em'}}>\n                                                                <div className=\"header padding-btm--half\" style={{color:'#4183c4',fontSize:'2em'}}>\n                                                                    {item.servicePackageName}\n                                                                </div>    \n                                                            </div>\n                                                            <div className=\"description pad\">\n                                                                <div className=\"\">\n                                                                    &#8377;{item.totalPrice}\n                                                                </div>\n                                                                <div>{item.servicePackageDesc}</div>\n                                                            </div>\n                                                            <div className=\"flex col-20 flex-directrion--row flex-wrap\">\n                                                                <div className=\"col-10\">\n                                                                    <Link to=\"/manage/subscriptions\">\n                                                                        <button className=\"ui grey button\" style={{width:'100%',borderRadius:'0'}}>View Details</button>\n                                                                    </Link>\n                                                                </div>\n                                                                <div className=\"col-10\">\n                                                                    <button className=\"ui green button\" onClick={()=>this.payNow(index)} style={{width:'100%',borderRadius:'0'}}>Pay Now</button>\n                                                                </div>\n                                                            </div>                              \n                                                        </div>\n                                                    );\n                                                }) \n                                            }       \n                                        </section>\n                                    }\n                                    {/*\n                                        this.state.list && this.state.list.length === 0 &&\n                                        <section className=\"text--center pad\">\n                                            <span>You Don't have any Subscriptions</span>\n                                        </section>\n                                    */}\n                                </React.Fragment>\n                            }\n                            {\n                                this.state.active === 2 &&\n                                <React.Fragment>    \n                                    <div className=\"flex flex-direction--col flex-wrap card-custom wallet-card-wrapper\">\n                                        <div className=\"wallet-bg\">&nbsp;</div>\n                                        <div className=\"margin-left margin-right padding-btm--quar padding-top wallet-balance\">\n                                            <span style={{color:'#666'}}>Wallet Balance : </span> <span style={{fontWeight: 'bold'}}> &#8377; {this.state.userInfo.walletInfo.amount}</span> \n                                        </div>\n                                        {   !!this.state.userInfo.walletInfo.maxAllowedDebit && this.state.userInfo.walletInfo.maxAllowedDebit > 0 &&\n                                            <div className=\"margin-left margin-right padding-btm\">\n                                                <span style={{color:'#666'}}>Max Allowed Debit Limit: </span> <span style={{fontWeight: 'bold'}}> &#8377; {this.state.userInfo.walletInfo.maxAllowedDebit}</span> \n                                            </div>\n                                        }\n                                        <div className=\"add-money-nav flex flex-wrap margin-left margin-right\">\n                                            <div className=\"pad add-money-nav-item\">Add Money</div>\n                                        </div>\n                                        <div className=\"mar\">\n                                            <input type=\"number\" className=\"form-control\" id=\"input-amount\" placeholder=\"Amount\" style={{width:'100%'}}/>\n                                            {\n                                                !!this.state.error &&\n                                                <span className=\"form-error\">{this.state.error}</span>\n                                            }\n                                        </div>\n                                        <button onClick={()=>this.submitPaymentForm()} className=\"btn btn-fill btn-success margin-left margin-right\">Proceed To Pay</button>\n                                    </div>\n                                </React.Fragment>\n                            }\n                            {\n                                this.state.active === 3 &&\n                                <React.Fragment>\n                                    <div className=\"margin-btm--half\">\n                                       <i className=\"youtube large icon\" style={{ color: '#ff0201' }}></i>\n                                        <span className=\"pointer text--bold text--underline\" style={{color:'#4183c4',textAlign:'end'}} onClick={()=>{this.showVideo()}}>Understanding Transaction History.</span>\n                                    </div>\n                                    {\n                                        this.state.howTo && \n                                        <PopUp title={'Understanding Transaction History'} togglePopup={this.showVideo.bind(this)}>\n                                            <Youtube url={'FYp97GIkYvs'}/>\n                                        </PopUp>\n                                    }\n                                    <TransactionHistory userType={this.props.userType}/>\n                                </React.Fragment>\n                            }\n                            {\n                                this.state.active === 4 &&\n                                   utils.isSuAdmin &&\n                                \n                                <section className=\"ui centered cards\">\n                                    <div class=\"card\" style={{margin:'1.5em'}}>\n                                        <div className=\"content\">\n                                            <div className=\"col-20\">\n                                                <div className=\"label\">Transaction Id</div>\n                                                <input  type=\"text\"\n                                                        className=\"form-control\"\n                                                        name=\"tId\"\n                                                        value={this.state.formControls.tId.value}\n                                                        style={{width:'100%'}}\n                                                        onChange={this.changeHandler}\n                                                        >\n                                                </input>\n                                            </div>\n                                            <div className=\"col-20\">\n                                                <div className=\"label\">Invoice</div>\n                                                <input  type=\"text\"\n                                                        className=\"form-control\"\n                                                        name=\"invoice\"\n                                                        value={this.state.formControls.invoice.value}\n                                                        style={{width:'100%'}}\n                                                        onChange={this.changeHandler}\n                                                        >\n                                                </input>\n                                            </div>\n                                            <div className=\"col-20 margin-top\">\n                                                <div className=\"label\">Payment Mode</div>\n                                                <select className=\"form-control\"\n                                                    name=\"pmtMode\"\n                                                    style={{width:'100%'}}\n                                                    value={this.state.formControls.pmtMode.value}\n                                                    onChange={this.changeHandler}\n                                                    >\n                                                        <option value=\"\" defaultValue hidden>-Choose Payment Mode-</option>\n                                                        <option value=\"NEFT\" >NEFT</option> \n                                                        <option value=\"IMPS\" >IMPS</option>\n                                                        <option value=\"CASH\" >Cash</option>\n                                                        <option value=\"OTHERS\" >Others</option>\n                                                </select>\n                                            </div>\n                                            <div className=\"col-20 margin-top\">\n                                                <div className=\"label\">Clients</div> \n                                                <select className=\"form-control\"\n                                                   name=\"client\" \n                                                   style={{width:'100%'}}\n                                                   value={this.state.formControls.client.value}\n                                                   onChange={this.changeHandler}>\n                                                       <option value=\"\" defaultValue hidden>-Choose Client-</option>\n                                                       {\n                                                           this.state.clients && this.state.clients.map(item =>{\n                                                                return(\n                                                                    \n                                                                    <option value={item.uid}>{item.name}</option>\n                                                                )\n                                                           })\n                                                       }\n                                                   </select>\n                                            </div>\n                                            <div className=\"col-20 margin-top\">\n                                                <div className=\"label\">Amount</div>\n                                                <input  type=\"number\"\n                                                        className=\"form-control\"\n                                                        style={{width:'100%'}}\n                                                        name=\"amt\"\n                                                        value={this.state.formControls.amt.value}\n                                                        onChange={this.changeHandler}\n                                                        >\n                                                </input>\n                                            </div>\n                                            {/* <div className=\"col-20 margin-top\">\n                                                <div className=\"label\">Url</div>\n                                                <input  type=\"text\"\n                                                        className=\"form-control\"\n                                                        style={{width:'100%'}}\n                                                        name=\"url\"\n                                                        value={this.state.formControls.url.value}\n                                                        onChange={this.changeHandler}\n                                                        >\n                                                </input>\n                                            </div> */}\n                                            <div className=\"margin-top\" style={{width:'117%'}}>\n                                                <label className=\"label col-5\" style={{marginBottom:'0px'}}>Payment Date</label>\n                                                <DatePicker\n                                                selected={this.state.formControls.date.value}\n                                                onChange={this.dobChange}\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                showYearDropdown\n                                                placeholderText=\"Click to select Date\"\n                                                dropdownMode=\"select\"\n                                                />\n                                            </div>\n                                            <div className=\"col-20 margin-top\">\n                                                <label className=\"label\">Remarks</label>\n                                                <textarea className=\"form-control\" \n                                                    name=\"remarks\" \n                                                    maxLength=\"300\"\n                                                    value={this.state.formControls.remarks.value}\n                                                    onChange={this.changeHandler} style={{height:'85px',resize:'none',width:'100%'}}/>\n                                            </div>\n                                            {\n                                                this.state.formControls.remarks.error &&\n                                                <div className=\"form-error margin-top text--center\">{this.state.formControls.remarks.error}</div>\n                                            }\n                                            <div className=\"col-20 margin-top\">\n                                                {\n                                                    !this.state.loader &&\n                                                    <div className=\"col-20 margin-top\">\n                                                        <button className=\"ui green button\" onClick={()=>this.submitManualTxn()} style={{width:'100%',borderRadius:'0'}}>Submit Details</button>\n                                                    </div>\n                                                }\n                                                {\n                                                    this.state.loader &&\n                                                    <div className=\"col-20 margin-top\">\n                                                        <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                                    </div>\n                                                }\n                                            </div>                         \n                                        </div>\n                                    </div>\n                                </section>\n                            }\n                            {   (utils.isSuAdmin || (this.props.userType && this.props.userType ===\"AGENCY\")) &&\n                                this.state.active === 5 &&\n                                <Revenue userType={this.props.userType}/>\n                            }\n                            {\n                               this.state.active === 0 &&\n                               <Packages showHeading=\"false\"/>\n                            }\n                        </div>\n                    </div>\n                }\n                {\n                    !this.state.rolesFetched && !this.state.accessDenied &&\n                    <div className=\"global-loader col-1\">\n                        <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                    </div>\n                }\n                {\n                    this.state.accessDenied &&\n                    <div className=\"global-loader col-2\">\n                        <div>Access Denied.</div>\n                    </div>\n                }\n                <ToastsContainer position={ToastsContainerPosition.TOP_RIGHT} lightBackground store={ToastsStore} /> \n                <form action=\"/payment/make\" method=\"post\" id=\"paymentForm\">\n                    <input type=\"hidden\" name=\"source\" value=\"PAYTM\"/>\n                    <input type=\"hidden\" id=\"form-amount\" name=\"amount\" value=\"\"/>\n                    <input type=\"hidden\" name=\"walletId\" value={this.state.userInfo.walletInfo.walletId}/>\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default BuyCredits;","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Campaign\\Campaign.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Campaign\\CreateCampaign.js",["728","729","730","731","732","733"],"import React, { useState, useEffect } from \"react\";\r\nimport CampaignAudienceForm from \"../../Components/Campaign/automationcampaign/CampaignAudienceForm\";\r\nimport {\r\n  ToastsContainer,\r\n  ToastsStore,\r\n  ToastsContainerPosition,\r\n} from \"react-toasts\";\r\nimport { useStep } from \"react-hooks-helper\";\r\nimport { getTags,postTags } from \"../../Services/tag-service\";\r\n// import SegmentForm from \"./Segment-Container\";\r\nimport SelectAutomationType from \"../../Components/Campaign/automationcampaign/SelectAutomationType\";\r\nimport CampaignPreview from \"../../Components/Campaign/automationcampaign/CampaignPreview\";\r\nimport CampaignWhenTemplate from \"../../Components/Campaign/automationcampaign/CampaignWhenTemplate\";\r\nimport CampaignMessage from \"../../Components/Campaign/automationcampaign/CampaignMessage\";\r\n\r\nconst CampaignForm = (prop) => {\r\n  // console.log(\"hrllo\" + prop);\r\n  const [FormData, setFormData] = useState({\r\n    campaignName: \"\",\r\n    tagIds: [],\r\n    campaignScheduleType: \"ONETIME\",\r\n    campaignDesc: \"\",\r\n    audienceType: \"\",\r\n    journeySegmentIds: [],\r\n    deliveryTime: \"0\",\r\n    startType: \"0\",\r\n    endType: \"0\",\r\n    startDate: \"\",\r\n    startTimeInterval: \"\",\r\n    endDate: \"\",\r\n    endTimeInterval: \"\",\r\n    content: \"\",\r\n    tagName:\"\",\r\n    lang: \"\",\r\n    longUrl: \"\",\r\n    notificationType: \"\",\r\n    subject: \"uiu\",\r\n    templateId: \"1\",\r\n    recurringInfo: {\r\n      frequency: \"\",\r\n      frequencyUnit: \"\",\r\n      time: \"\",\r\n      weekday: \"\",\r\n    },\r\n  });\r\nconst steps = [\r\n  { id: \"campaignType\" },\r\n    { id: \"audience\" },\r\n    { id: \"when\" },\r\n    { id: \"message\" },\r\n    { id: \"preview\" },\r\n    // { id: \"submit\" },\r\n  ];\r\n\r\n  const { step, navigation } = useStep({\r\n    steps,\r\n    initialStep: 0,\r\n  });\r\n\r\n  const [currentData, setCurrentData] = useState({\r\n    tags: [],\r\n  });\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  var [select, setSelect] = useState([]);\r\n\r\n  const [FormDataError, setFormDataError] = useState({\r\n    campaignName: \"\",\r\n    tagIds: \"\",\r\n    campaignScheduleType: \"\",\r\n    campaignDesc: \"\",\r\n    audienceType: \"\",\r\n    journeySegmentIds: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchTags();\r\n\r\n  }, []);\r\n\r\n  const validate = () => {\r\n    var campaignName = \"\";\r\n    var tagIds = \"\";\r\n    var campaignScheduleType = \"\";\r\n    var campaignDesc = \"\";\r\n    var audienceType = \"\";\r\n    var journeySegmentIds = \"\";\r\n\r\n    let val = 1;\r\n    if (!FormData.campaignName) {\r\n      campaignName = \"Campaign Name should not be empty\";\r\n      val = 0;\r\n    }\r\n    if (FormData.tagIds.length === 0) {\r\n      tagIds = \"Campaign Tags should not be empty\";\r\n      val = 0;\r\n    }\r\n    if (!FormData.campaignScheduleType) {\r\n      campaignScheduleType = \"Campaign Type should not be empty\";\r\n      val = 0;\r\n    }\r\n    if (!FormData.campaignDesc) {\r\n      campaignDesc = \"Description should not be empty\";\r\n      val = 0;\r\n    }\r\n\r\n    if (!FormData.audienceType) {\r\n      audienceType = \"Audience Type should not be empty\";\r\n      val = 0;\r\n    }\r\n\r\n    if (FormData.journeySegmentIds.length < 0) {\r\n      journeySegmentIds = \"Select minimum 1 segement\";\r\n      val = 0;\r\n    }\r\n\r\n    setFormDataError({\r\n      campaignName: campaignName,\r\n      tagIds: tagIds,\r\n      campaignScheduleType: campaignScheduleType,\r\n      campaignDesc: campaignDesc,\r\n      audienceType: audienceType,\r\n      journeySegmentIds: journeySegmentIds,\r\n    });\r\n\r\n\r\n\r\n    return val;\r\n  };\r\n\r\n  function fetchTags() {\r\n    let body = {\r\n      name: \"\",\r\n    };\r\n\r\n\r\n    // this.setState({\r\n    //   rolesFetched: true,\r\n    //   loader: true\r\n    // });\r\n    getTags(body)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.tags.length > 0) {\r\n          // console.log(data.tags);\r\n          setCurrentData({\r\n            tags: data.tags.map((tag) => {\r\n              return { value: tag.id, label: tag.name };\r\n            }),\r\n          });\r\n          // console.log(temp)\r\n        } else {\r\n          setCurrentData({ tags: \"no tags found\" });\r\n        }\r\n       \r\n      })\r\n      .catch((error) => {\r\n        // console.log(error);\r\n        ToastsStore.error(\"Something went wrong, Please Try Again Later \");\r\n      });\r\n  }\r\n\r\n  function createTags() {\r\n    let body = {\r\n     name: ''\r\n    };\r\n    createTags(body)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n      \r\n      })\r\n      .catch((error) => {\r\n     \r\n        // ToastsStore.error(\"Something went wrong, Please Try Again Later \");\r\n      });\r\n  }\r\n  const submitTags=()=>{\r\n    addTag();\r\n  }\r\n  function addTag(){\r\n    let body = {\r\n      \"name\" :FormData.tagName\r\n    }\r\n    postTags(body)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if(data.success){\r\n        fetchTags()\r\n        ToastsStore.success(\"Tag created successfully\");\r\n          // console.log(temp)  \r\n      }else{\r\n      // console.log('unable to add')\r\n      }\r\n      // console.log(data)\r\n    })\r\n    .catch(error => {\r\n      // console.log(error);\r\n      ToastsStore.error(\"Something went wrong, Please Try Again Later \");\r\n    })\r\n  }\r\n\r\n  const tagsOption = currentData.tags;\r\n\r\n  const timeOption = [\r\n    { label: \"9:00  - 11:00\", value: \"9:00  - 11:00\" },\r\n    { label: \"11:00 - 13:00\", value: \"11:00 - 13:00\" },\r\n    { label: \"13:00 - 15:00\", value: \"13:00 - 15:00\" },\r\n    { label: \"15:00 - 17:00\", value: \"15:00 - 17:00\" },\r\n    { label: \"17:00 - 19:00\", value: \"17:00 - 19:00\" },\r\n    { label: \"19:00 - 21:00\", value: \"19:00 - 21:00\" },\r\n  ];\r\n\r\n  const changeHandler = (e) => {\r\n    console.log(e.target.value);\r\n    setFormData({ ...FormData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleTags = (selectedTags) => {\r\n    select = selectedTags.map((selected) => {\r\n      return selected.value;\r\n    });\r\n    // console.log(select);\r\n    FormData.tagIds = select;\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    const isValid = validate();\r\n    // console.log(currentData);\r\n    ToastsStore.success(\"Datasource created Successfully !\");\r\n    // console.log(isValid)\r\n    // console.log(FormDataError)\r\n    if (isValid) {\r\n      e.preventDefault();\r\n      // console.log(FormData);\r\n    }\r\n  };\r\n  const handleSegment = (selectedSegements) => {\r\n    //  console.log(typeof(selectedSegements))\r\n    //  typeof(selectedSegements)\r\n    //  let value = Array.from(selectedSegements, option => option.value);\r\n    //  console.log(value)\r\n    var select = selectedSegements.map((selected) => {\r\n      return selected.value;\r\n    });\r\n    FormData.journeySegmentIds = select;\r\n    // console.log(select)\r\n  };\r\n\r\n  const props = {\r\n    setFormData,\r\n    tagsOption,\r\n    submitTags,\r\n    timeOption,\r\n    submitHandler,\r\n    FormDataError,\r\n    handleTags,\r\n    handleSegment,\r\n    FormData,\r\n    changeHandler,\r\n    selectedTags,\r\n    navigation,\r\n  };\r\n\r\n  // const props = { navigation };\r\n\r\n  // const steps = [\r\n  //   { id: \"audience\" },\r\n  //   { id: \"when\" },\r\n  //   { id: \"message\" },\r\n  //   { id: \"preview\" },\r\n  //   // { id: \"submit\" },\r\n  // ];\r\n\r\n  switch (step.id) {\r\n    case \"campaignType\":\r\n     return <SelectAutomationType {...props} />;\r\n    case \"audience\":\r\n      return <CampaignAudienceForm {...props} />;\r\n    case \"when\":\r\n      return <CampaignWhenTemplate {...props} />;\r\n    case \"message\":\r\n      return <CampaignMessage {...props} />;\r\n    case \"preview\":\r\n      return <CampaignPreview {...props} />;\r\n    case \"submit\":\r\n    //   return <Submit {...props} />;\r\n  }\r\n  return <div>{/* <CampaignAudienceForm {...props} /> */}</div>;\r\n};\r\nexport default CampaignForm;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadManagement\\LeadManagement.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadManagement\\LeadPush.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadFunnel.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadTypeAssign.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadStatus\\LeadStatus.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadBucket\\LeadBucket.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\StatusGroup\\StatusGroup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadsMapping\\LeadStatusMapping.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\PublisherMapping\\PublisherMapping.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Roles\\RolesV1.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SenderIds\\SenderIds.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\StatusGroup\\StatusMapping.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Datasource\\Datasource.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadReportUpload\\LeadReportUpload.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Leads\\Leads.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Mediums\\Mediums.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Transactions\\Transaction.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Segments\\Segments.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Task\\Task.js",["734"],"import React from 'react';\nimport PageTitle from '../../Components/Helmet';\nimport {leadScheduleTask} from '../../Services/lead-service';\nimport Table from \"../../Components/Task/TaskTable\";\nimport TaskFilter from '../../Components/Task/TaskFilter';\nimport utils from '../../Services/utility-service';\nimport Popup from '../../Components/Popup/Popup';\nimport RemarksModal from '../../Components/RemarksModal/RemarksModal';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\nimport {leadUpdateTask} from '../../Services/lead-service';\nimport LeadDetail from '../../Containers/LeadDetail/LeadDetail';\nimport {getLead} from '../../Services/lead-service';\nimport DatePicker from \"react-datepicker\";\nimport Pagination from '../../Components/Pagination/Pagination';\n\n\nexport default class Task extends React.Component{\n    \n    constructor(props){\n        super(props);\n            this.state={\n                work:[],\n                taskAction:\"page\",\n                leads:[],\n                start: 0,\n                hasNext: true,\n                opnfilter:false,\n                isTaskFilterApplied: false,\n                taskStatus: null,\n                remarks:null,\n                opnRemarks: false,\n                opnReschedule: false,\n                confirmationLoader: false,\n                filter:{\n                    status:{\n                        value:\"\"\n                    },\n                    from:{\n                        value:\"\"\n                    },\n                    to:{\n                        value:\"\"\n                    },\n                    reschedule:{\n                        value:\"\"\n                    }\n                   \n                }\n            }\n            this.handleChange = this.handleChange.bind(this);\n            this.toggleReSchedule = this.toggleReSchedule.bind(this);\n            this.clearFilters = this.clearFilters.bind(this);\n            this.fetchTask = this.fetchTask.bind(this);\n            this.action = this.action.bind(this);\n            this.filterPopup = this.filterPopup.bind(this);\n            this.switchPage = this.switchPage.bind(this);\n            this.getActions = this.getActions.bind(this);\n            this.remarksChangeHandler = this.remarksChangeHandler.bind(this);\n            // this.formatMulSelectData = this.formatMulSelectData.bind(this);\n    }\n\n    componentDidMount(){\n        this.fetchTask();\n    }\n\n    verifyFilter(){\n        let f= this.state.filter;\n        if(f.status.value || f.from.value || f.to.value){\n            this.setState({\n                isTaskFilterApplied: true\n            })\n        }\n        this.filterPopup();\n        this.fetchTask();\n    }\n\n    clearFilters(){\n        let f= this.state.filter;\n        f.status.value = \"\";\n        f.from.value = null;\n        f.to.value = null;\n        this.setState({\n            filter: f,\n            isTaskFilterApplied: false,\n        })\n        \n        this.fetchTask();\n    }\n\n    fetchTask(){\n        let body={\n            \"endDate\": this.state.filter.to.value ? this.state.filter.to.value : null,\n            \"maxResults\": 200,\n            \"start\": this.state.start,\n            \"startDate\": this.state.filter.from.value ? this.state.filter.from.value : null, \n            \"status\": this.state.filter.status.value ? this.state.filter.status.value : null\n        }\n        this.setState({\n            confirmationLoader: true\n        })\n        leadScheduleTask(body)\n        .then(r => r.json())\n        .then(data =>{\n            this.setState({\n                confirmationLoader: false\n            })\n            if(data.success){\n                ToastsStore.success(data.message);\n                this.setState({\n                    work: data.userTaskMappings\n                })\n                if(data.userTaskMappings && data.userTaskMappings.length > 0){\n                    this.setState({\n                        // work: data.userTaskMappings,\n                        hasNext: (data.userTaskMappings.length === 200)\n                    })\n                }\n                else{\n                    ToastsStore.error(\"No Datasource Found\");\n                    this.setState({\n                        hasNext: false\n                    })\n                }   \n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(e =>{\n            ToastsStore.error(\"Something Went Wrong!!! Please Try Again Later\");\n            this.setState({\n                confirmationLoader: false\n            })\n        })\n    }\n\n    updateCurrentStatus(status){\n        let temp = this.state.leads;\n        temp.status = status;\n        this.setState({\n            leads:temp\n        })  \n    }\n\n    remarksChangeHandler(event){\n        this.setState({\n            remarks: event.target.value\n        })\n    }\n\n    updateTaskStatus(){\n\n        let body={\n            \"bUid\": null,\n            \"mappingId\": this.state.mappingId,\n            \"remarks\": this.state.remarks ? this.state.remarks: null,\n            \"status\": !!this.state.taskStatus ? this.state.taskStatus: null,\n            \"rescheduleTime\":  this.state.taskStatus === \"Re-Schedule\" ?  this.state.filter.reschedule.value : null,\n        }\n        this.setState({\n            confirmationLoader: true\n        })\n        leadUpdateTask(body)\n        .then(res => res.json())\n        .then(data =>{\n            this.setState({\n                confirmationLoader: false\n            })\n            if(!!data.success){\n                ToastsStore.success(data.message);\n                if(this.state.taskStatus === \"Re-Schedule\"){\n                    this.toggleReSchedule();\n                }\n                else{\n                    this.togglePopup();\n                }   \n                // this.props.scheduleTask();\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error =>{\n            ToastsStore.error(\"Something Went Wrong. Please Try Again Later!!!\");\n            this.setState({\n                confirmationLoader: false\n            })\n        })\n    }\n\n    switchPage(page){   \n        this.setState({\n            taskAction: page\n        })\n    }\n\n    getActions(data){\n        let actions = [];\n        if(data && data.length > 0){\n            data.forEach(e => {\n                switch(e){\n                    case 'view':\n                        actions.push({\n                            icon:\"eye\",\n                            key:\"view\",\n                            text:\"View Details\"\n                        });\n                        break;\n                    case 'complete':\n                        actions.push({\n                            icon:\"checkmark\",\n                            key:\"Complete\",\n                            text:\"Complete\"\n                        })\n                        break;\n                    case 'edit':\n                        actions.push({\n                            icon:\"edit\",\n                            key:\"edit\",\n                            text:\"Edit\"\n                        })\n                        break;\n                    case 'cancel':\n                        actions.push({\n                            icon:\"cancel\",\n                            key:\"Cancelled\",\n                            text:\"Cancel\"\n                        })\n                        break; \n                    case 'init':\n                        actions.push({\n                            icon:\"hourglass start\",\n                            key:\"Initiated\",\n                            text:\"Start\"\n                        })\n                        break;\n                    case 're-assign':\n                        actions.push({\n                            icon:\"redo alternate icon\",\n                            key:\"Re-Assign\",\n                            text:\"Re-Assign\"\n                        })\n                        break; \n                    case 're-schedule':\n                        actions.push({\n                            icon:\"clock outline icon\",\n                            key:\"Re-Schedule\",\n                            text:\"Re-Schedule\"\n                        })\n                        break; \n                             \n                    default:    \n                        console.log(\"unhandled type\");\n                        break;    \n                }\n            });\n        }\n        return actions;\n    }\n\n    specificLeads(leads,id){\n        leads.map(item =>{\n            if(item.id === id){\n                return(\n                    this.setState({\n                        leads: item,\n                        taskAction: \"view\",\n                    })\n                )  \n            }\n        })\n    }\n\n    fetchLeads(id){\n        let body={\n            start:parseInt(this.state.start),\n            maxResult:parseInt(30),\n            leadId: id\n          }\n        getLead(body)\n        .then(response=>response.json())\n        .then(data=>{\n            if(data.success){\n                this.specificLeads(data.leads,id);\n                this.setState({\n                    hasNext: data.hasNext,\n                     \n                 });\n            }else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                loader: false\n            })\n        })\n        .catch(error =>{\n            // console.log(error);\n            this.setState({\n                loader: false, \n            })\n        })\n    }\n\n    toggleReSchedule(){\n        this.setState((state)=>{\n            return{\n                opnReschedule : !state.opnReschedule\n            }\n        })\n    }\n\n    action(task,mid,rid){  \n        if(task.key === \"view\"){\n            this.fetchLeads(rid);\n        }\n        else if(task.key === \"Re-Schedule\"){\n            this.setState({\n                taskStatus: task.key,\n                mappingId: mid\n            })\n            this.toggleReSchedule();\n        }\n        else{\n            this.setState({\n                taskStatus: task.key,\n                mappingId: mid\n            })\n            this.togglePopup();    \n        }              \n    }\n\n    togglePopup(){\n        this.setState(state=>{\n            return{\n                opnRemarks : !state.opnRemarks\n            }\n        })\n        console.log(this.state.opnRemarks);\n    }\n\n    filterPopup(){\n        this.setState(state=>{\n            return{\n                opnfilter : !state.opnfilter\n            }\n        })\n    }\n\n    dateChange(event,name){\n        let temp = this.state.filter;\n        temp[name].value=event;\n        // if(name === \"reschedule\"){\n        //     if(temp.time.value){\n        //         temp.time.value = null;\n        //     }\n        // }  \n        this.setState({\n            filter:temp\n        })\n    }\n\n    handleChange(event) {\n        let temp = this.state.filter;\n        let name= event.target.name;\n        temp[name].value = event.target.value;\n        this.setState({\n            filter: temp\n        }); \n             \n    }\n\n    newTask(type){\n        if(type === 'previous'){\n            if(this.state.start > 0){\n              this.setState({\n                  start: this.state.start - 200,\n              },()=>{\n                  this.fetchTask();\n              })\n            }\n        }else if(type === 'next'){\n            if(this.state.hasNext){\n                this.setState({\n                    start: this.state.start + 200,\n                },()=>{\n                    this.fetchTask();\n                })\n            }\n        }\n      }\n\n    render(){\n        return(\n            <React.Fragment>\n            <PageTitle title=\"Task\" description=\"Welcome to Task\"/>\n        {\n            this.state.taskAction && this.state.taskAction === \"page\" &&\n            <React.Fragment>\n            <article className=\"card-custom  pad\">\n                <div className=\"flex align-space-between\">\n                    <div style={{color:'rgba(0,0,0,.87)',fontSize:'1.28em',lineHeight:'27px',fontWeight:'bold'}}>Task</div>\n                    {/* <div className={`${utils.isMobile ? \"margin-left-one\":\"margin-left-seventyFive\"} col-15 flex margin-left-fourfour margin-right`} style={{overflowX:\"auto\"}}> */}\n                    <div>   \n                        {\n                            this.state.isTaskFilterApplied &&\n                                <button\n                                    onClick={() => this.clearFilters()} \n                                    className=\"ui tiny grey button margin-right--half\">Clear Filters</button>                            \n                        }\n                           <button \n                               onClick={this.filterPopup}\n                               className=\"ui tiny teal button margin-left--half\">Filter</button>\n                    </div>\n                </div>\n                </article>\n\n                    <Table\n                        work = {this.state.work}\n                        getActions={this.getActions}\n                        action={this.action}\n                    />\n                    <Pagination\n                        getData={this.newTask.bind(this)}\n                        start={this.state.start}\n                        hasNext={this.state.hasNext}\n                        data={this.state.work}\n                        loader={this.state.confirmationLoader} \n                    />\n                    </React.Fragment>\n                }\n                {    !!this.state.opnRemarks &&\n                <Popup title=\"Remarks\" togglePopup={this.togglePopup} >\n                    <RemarksModal\n                        submitCta=\"Submit\"\n                        remarks={this.state.remarks}\n                        changeHandler={this.remarksChangeHandler.bind(this)}\n                        confirmationLoader={this.state.confirmationLoader}\n                        submitData={this.updateTaskStatus.bind(this)}\n                        togglePopup={this.togglePopup.bind(this)}\n                    >\n                    </RemarksModal>    \n                </Popup>\n            }\n            {\n                !!this.state.opnReschedule && \n                <Popup title=\"Re-Schedule\" togglePopup={this.toggleReSchedule}>\n                    <div className=\"popUp-modal--wrapper margin-left--auto margin-right--auto\">\n                        \n                        {\n                            !utils.isMobile && \n                            <React.Fragment>\n                                <div className=\"label\">Select Re-Schedule Date</div>  \n                                <DatePicker\n                                    selected={this.state.filter.reschedule.value}\n                                    placeholderText=\"Click to select Date\"\n                                    onChange={event => {this.dateChange(event,'reschedule')}}\n                                    peekNextMonth\n                                    showTimeSelect\n                                    showMonthDropdown\n                                    showYearDropdown\n                                    dropdownMode=\"select\"\n                                    className=\"col-20\"\n                                    dateFormat=\"dd/MM/yyyy h:mm aa\"\n                                    inline\n                                />\n         \n                        </React.Fragment>\n                        }  \n                       {\n                           utils.isMobile &&\n                           <React.Fragment>\n                               <div className=\"label\">Select Re-Schedule Date</div>  \n                                <DatePicker\n                                    selected={this.state.filter.reschedule.value}\n                                    placeholderText=\"Click to select Date\"\n                                    onChange={event => {this.dateChange(event,'reschedule')}}\n                                    peekNextMonth\n                                    showMonthDropdown\n                                    showYearDropdown\n                                    dropdownMode=\"select\"\n                                    className=\"col-20\"\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    inline\n                                />\n                               \n                                <div >\n                                    <div className=\"label\">Enter Re-Schedule Time</div>\n                                    <DatePicker\n                                        selected={this.state.filter.reschedule.value}\n                                        onChange={event => {this.dateChange(event,'reschedule')}}\n                                        showTimeSelect\n                                        showTimeSelectOnly\n                                        timeIntervals={15}\n                                        timeCaption=\"Time\"\n                                        dateFormat=\"h:mm aa\"\n                                    />\n                                </div>\n                            </React.Fragment>\n                       }\n                        \n                        <div className=\"label margin-top-five\">Remarks</div>\n                        <textarea type=\"text\"\n                            name=\"remarks\" \n                            value={this.state.remarks} \n                            onChange={this.remarksChangeHandler.bind(this)}\n                            maxLength=\"320\"\n                            placeholder=\"Type here...\" \n                            className=\"form-control form-control-fullwdth\" \n                            style={{height: '60px',resize: 'none'}}>\n                        </textarea>\n                        <div style={{borderTop:\"null\"}} className={`${utils.isMobile ? \"padding-top-tewleve\" : \"padding-top-six margin-btm-Three\" } col-20 dialog-footer margin-top-seven`}>\n                            <div>\n                                <button onClick={this.toggleReSchedule}  className=\"btn btn-fill margin-left--half dialog--cta pointer\">Back</button>                    \n                                <button onClick={this.updateTaskStatus.bind(this)}  className=\"btn btn-fill btn-success margin-left--half dialog--cta pointer\">Re-Schedule</button>\n                            </div>\n                        </div>\n                    </div>\n                </Popup>\n            }\n                 { \n                    this.state.opnfilter &&\n                    <Popup title={'Filter'} togglePopup={this.filterPopup} >\n                        <TaskFilter\n                            // changeHandler={this.changeHandler.bind(this)}\n                            formControls={this.state.filter}\n                            selectChange={this.handleChange.bind(this)}\n                            submitData={this.verifyFilter.bind(this)}\n                            dateChange={this.dateChange.bind(this)}\n                            clear={this.clearFilters.bind(this)}\n                            togglePopup={this.filterPopup}\n                            statusObjArray={this.formatMulSelectData}>\n                        </TaskFilter>\n                    </Popup>\n                } \n                {\n                    this.state.taskAction && this.state.taskAction === \"view\" &&\n                        <LeadDetail  updateCurrentStatus={this.updateCurrentStatus.bind(this)} leadData={this.state.leads} switchPage={this.switchPage} back=\"task\"/>\n                }\n                <ToastsContainer position={ToastsContainerPosition.TOP_RIGHT} lightBackground store={ToastsStore} />\n            \n            </React.Fragment>\n        )\n    }\n}","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Segments\\MappedSegmentGroup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\DatasourceMappedSegments.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\ViewCampaignPopup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\MappedDatasource\\MappedDatasource.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Lead\\LeadTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Subscriptions\\ServicePackages.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\ViewCampaign.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Templates\\Templates.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPages\\LandingPages.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\JourneyDesigner\\JourneyDesigner.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SegmentGroup\\SegmentGroup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaign.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\IVR\\IVR.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\Clients.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\AddClients.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\LeadDetail.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadReports\\LeadReports.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\ProfileV1.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Youtube\\YouTubeVideo.js",["735"],"import React from 'react';\nimport './Youtube.css';\n\n\nfunction YoutubeVideo (props){\n    return(\n        <div className=\"container\" style={{width:`${props.width}`,paddingTop:`${props.paddingTop}`,left:`${props.left}`,right:`${props.right}`}}>\n            <iframe style={{width:`${props.iframeWidth}`, height:`${props.iframeHeight}`}} className=\"responsive-iframe\" src={'https://www.youtube.com/embed/' + props.url + '?autoplay=1'} controls></iframe>\n        </div>       \n    )\n}\n\nexport {YoutubeVideo}; ","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Subscriptions\\ManageSubscription.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Svg-icon\\Svg-icon.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\SMSReports.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Popup\\Popup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Constants\\icons.constants.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\common-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Helmet.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\shortUrl-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\clients-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Youtube\\Youtube.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\subscriptions-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\medium-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\roles-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\datasource-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\campaign-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\ProfileDetails.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\TaxDetails.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\EmailPopup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\SMSPopup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Profile\\BusinessDetails.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\lead-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\CallPopup.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\ivr-services.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\LeadTaskStatus.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\AssignOwnerLead.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\ClientDetails.js",["736"],"import React, {Component} from 'react';\nimport ClientServiceTable from '../../Components/Client/ClientServiceTable';\nimport SegmentGroupTable from '../../Components/SegmentGroup/SegmentGroupTable';\nimport {getAgency,updateAgency} from '../../Services/clients-service';\nimport {getAllServices,assignService} from '../../Services/subscriptions-service';\nimport {\n    updatePaymentDetails,\n    userUpdate,getBusinessUserDetails,\n    getClientBusinessDetails,editBusinessDetail,updateBPaidType,\n    getPaymentDetails} from '../../Services/user-service';\nimport {getAllServicePackages,pkgAssign} from '../../Services/subscriptions-service';\nimport {getNewRoleGroupTable} from '../../Services/roles-service';\nimport {getAllSegmentGroups,assignSegmentGroups} from '../../Services/segment-service';\nimport {addUpdateClient,getDatasource,getAudienceMediumMapping,getParentDetails} from '../../Services/datasource-service';\nimport { getMediums } from '../../Services/medium-service';\nimport CircularLoader from '../../Components/circular-loader/circular-loader';\nimport PopUp from '../../Components/Popup/Popup';\nimport { Icon, Popup } from 'semantic-ui-react';\nimport Moment from 'react-moment';\nimport utils from '../../Services/utility-service';\nimport BusinessDetails from '../Profile/BusinessDetails';\nimport TaxDetails from '../Profile/TaxDetails';\nimport ProfileDetails from '../Profile/ProfileDetails';\nimport DatasourceTable from '../../Components/Datasource/DatasourceTable';\nimport { ToastsStore} from 'react-toasts';\nimport ClientEditDatasource from './ClientEditDatasource';\nimport ConfirmationModal from '../../Components/ConfirmationModal/ConfirmationModal';\nimport {getPackage} from '../../Services/subscriptions-service';\nimport EditPackage from '../../Components/ServicePackage/EditPackage';\nimport ViewPkgDetail from '../../Components/ServicePackage/ViewPkgDetail';\n//import AssignedPkg from '../../Components/Client/AssignedPkgTable';\n\nconst initialState = {\n    active:5,\n    start:0,\n    minPrice:0,\n    userInfo:null,\n    businessInfo:null,\n    buid:null,\n    taxInfo:null,\n    userDTO:null,\n    permissionGroups:[],\n    rolesFetched:false,\n    viewBusinessDetails:false,\n    viewTaxDetails:false,\n    viewProfileDetails:false,\n    confirmationLoader:false,\n    isBusinessEdit:false,\n    saveSegmentGLoader:false,\n    isBctDisabled:false,\n    openEditDatasource:false,\n    confirmationPopup:false,\n    popType:\"self\",\n    agencies:[],\n    services:[],\n    selectedSrvc:[],\n    mediums:[],\n    datasources:[],\n    servicePackages:[],\n    package:[],\n    serv:[],\n    segmentGroups:[],\n    assignedPkg:[],\n    allSegmentGroups:[],\n    datasourcesAssigned:[],\n    displayAgency:\"\",\n    // id: null,\n    dsToEdit:null,\n    paidType:null,\n    isPTypeEdit:false,\n    //isDebitEdit:false,\n    confSgPopup:false,\n    bptError:'',\n    temp:'',\n    srvice:{\n        pricePrUnt:{\n            value:\"\",\n            error:''\n        },\n        perUnitMinPrice:{\n            value:\"\"\n        },\n        costOrShare:{\n            value:\"\"\n        },\n        sharingType:{\n            value:\"\"\n        },\n        serviceCode:{\n            value:\"\"\n        },\n        error:{\n            value: null\n        }\n    },\n    formControls:{\n        mediumId:{\n            value:\"\",\n            error:\"\"\n        },\n        ammId:{\n            value:\"\",\n            error:\"\"\n        },\n        sgData:{\n            value:\"\",\n            error:\"\"\n        },\n        billingOn:{\n            value:\"\",\n            error:\"\"\n        },\n        bct:{\n            value:\"\",\n            error:\"\"\n        },\n        pricePrCrdt:{\n            value:\"\",\n            error:\"\"\n        },\n        mName:{\n            value:\"\",\n        },\n        dName:{\n            value:\"\",\n        },\n        cos:{\n            value:\"\",\n            error:\"\"\n        },\n        sType:{\n            value:\"\",\n            error:\"\"\n        },\n        debit:{\n            value:'',\n            error:''\n        },\n        mp:{\n            value:'',\n            error:''\n        }\n    }\n}\n\n\nexport default class ClientDetails extends Component{\n    \n    constructor(props){\n        super(props);\n        this.state = initialState;\n        this.asnSer = this.asnSer.bind(this);\n        this.formatPkg = this.formatPkg.bind(this);\n        this.serviceHandler = this.serviceHandler.bind(this);\n        this.fetchAllServices = this.fetchAllServices.bind(this);\n        this.serviceChangeHandler = this.serviceChangeHandler.bind(this);\n    }\n\n    componentDidMount(){\n        this.changeTab(0);\n    }\n  \n    changeTab(num){\n\n        this.setState({\n            active: num\n        },()=>{\n            switch(num){\n                case 0:\n                    this.fetchProfileData();\n                    break;\n                case 1:\n                    this.fetchAllAgency();\n                    break;\n                case 2:\n                    this.fetchSegmentSectionData();\n                    break;\n                case 3:\n                    this.fetchDatasourceData();\n                    break;\n                case 4:\n                    this.fetchAllServices();\n                    break;\n                case 6:\n                    this.getAllServicePackages(this.props.info.uid);\n                    this.getAllServicePackages();\n                    break;\n                default:\n                    console.log(\"unhandled tab click\");            \n            }\n        })\n        this.clearFormControls();\n    }\n\n    verifyServicesClient(){\n        let isError = false;\n        let value= null;\n        if(this.state.srvice && this.state.selectedSrvc && (this.state.selectedSrvc.perUnitMinPrice >  this.state.srvice.pricePrUnt.value)){\n            value=`Price per unit must be greater than or equal to ${this.state.selectedSrvc.perUnitMinPrice}`;\n            ToastsStore.error(value);\n            isError = true;\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n            return;\n        }\n        else{\n            isError = false;\n            value= null;\n            ToastsStore.success(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n\n        }\n        if(!isError || isError === false){\n            this.servicesAssign();\n        }\n    }\n\n    verifyServices(){\n        let isError = false;\n        let value= null;\n         \n        if(!this.state.srvice.serviceCode){\n            isError = true;\n            value=\"Please Select Services.!!!\";\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n            return;\n        }\n        else{\n            isError = false;\n            value= null;\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n        }\n        if(!this.state.srvice.perUnitMinPrice.value || !this.state.srvice.costOrShare.value){\n            isError = true;\n            value=`All Fields are mandatory.!!!`;\n            ToastsStore.error(`All Fields are mandatory.!!!`);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n            return;\n        }\n        else{\n            isError = false;\n            value= null;\n            ToastsStore.success(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n        }\n        if(this.state.srvice.perUnitMinPrice && this.state.srvice.pricePrUnt && (this.state.srvice.perUnitMinPrice.value >  this.state.srvice.pricePrUnt.value)){\n            value=\"Price per unit must be greater than Client Per unit min price\";\n            ToastsStore.error(value);\n            isError = true;\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n\n            return;\n        }      \n        else{\n\n            isError = false;\n            value= null;\n            ToastsStore.success(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n\n        }\n\n    if(this.state.srvice.sharingType.value === \"C2B\"){\n\n        if(this.state.srvice.costOrShare && this.state.selectedSrvc && (this.state.srvice.costOrShare.value <  this.state.selectedSrvc.perUnitMinPrice)){\n\n            isError = true;\n            value=`Agency cost or share must be greater than ${this.state.selectedSrvc && this.state.selectedSrvc.perUnitMinPrice}`;\n            ToastsStore.error(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n\n            return;\n        }\n        else{\n\n            isError = false;\n            value=null;\n            ToastsStore.success(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n\n        }\n    }\n    else if(this.state.srvice.sharingType.value ===\"PER\"){\n        let minPrice = this.state.selectedSrvc.perUnitMinPrice*(1+(this.state.srvice.costOrShare.value/100));\n        if(this.state.srvice.costOrShare && (this.state.srvice.costOrShare.value < minPrice)){\n            isError = true;\n            value=`Agency cost or share must be greater than ${minPrice}`;\n            ToastsStore.error(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n            return;\n        }\n        else{\n            isError = false;\n            value=null;\n            ToastsStore.success(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n        }\n    }\n\n        if(this.state.srvice.perUnitMinPrice && this.state.srvice.costOrShare && (this.state.srvice.perUnitMinPrice.value <  this.state.srvice.costOrShare.value)){\n            isError = true;\n            value=`Clients per unit minimum Price must be greater than Agency cost or share i.e. ${this.state.srvice.costOrShare && this.state.srvice.costOrShare.value}`;\n            ToastsStore.error(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n            return;\n        }\n        else{\n            isError = false;\n            value=null;\n            ToastsStore.success(value);\n            this.setState({\n                srvice:{\n                    ...this.state.srvice,\n                    error:{\n                        ...this.state.srvice.error,\n                        value\n                    }\n                }\n            })\n        }\n\n        if(!isError || isError === false){\n            this.servicesAssign();\n        }\n    }\n\n    servicesAssign(){\n      \n        let body={\n            \"bUid\": null,\n            \"costOrShare\": this.state.srvice.costOrShare.value ? this.state.srvice.costOrShare.value : null,\n            \"perUnitMinPrice\": this.state.srvice.perUnitMinPrice.value ? this.state.srvice.perUnitMinPrice.value: null,\n            \"perUnitPrice\": this.state.srvice.pricePrUnt.value ? this.state.srvice.pricePrUnt.value : null,\n            \"serviceCode\": this.state.srvice.serviceCode.value ? this.state.srvice.serviceCode.value: null,\n            \"sharingType\": this.state.srvice.sharingType.value ? this.state.srvice.sharingType.value : null,\n            \"toBusinessUid\": this.props.info.uid\n        }\n        assignService(body)\n        .then( r => r.json())\n        .then( data =>{\n            if(data.success){\n                this.changeTab(0);\n                ToastsStore.success(data.message);\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(e =>{\n            console.log(\"Something Went Wrong. Please Assign later.!!!\");\n        })\n    }\n    \n    fetchAllServices(bsnessUid){\n        let body={}; \n        if(bsnessUid){\n            body.businessUid = bsnessUid;\n        } \n        else{\n            body={};\n        }  \n        getAllServices(body)\n        .then(r => r.json())\n        .then(data => {\n            if(data.success){\n                if(bsnessUid){\n                    this.setState({\n                        serv: data.services\n                    })  \n                }\n                else{\n                    this.setState({\n                        services:data.services\n                    })\n                }  \n            }\n            else{\n                ToastsStore.error(data.message);\n            } \n        })\n        .catch(e =>{\n            console.log(e);\n            ToastsStore.error(\"Something went wrong. Please try again later.!!!\");\n        })\n    }\n\n    serviceHandler(event){\n        if(!event.target.value){\n            let t = this.state.srvice;\n            t.pricePrUnt.value = null;\n            t.serviceCode.value = null;\n            // t.perUnitMinPrice.value = s.perUnitMinPrice;\n            // t.costOrShare.value = s.costOrShare;\n            t.sharingType.value = null;\n            this.setState({\n                srvice: t   \n            })\n            return;\n        }\n        else{  \n        let id = event.target.value;\n        const ser = this.state.services;\n        let s = ser.filter(service =>{\n            return service.code === id;\n        })\n        \n        this.state.srvice.serviceCode.value = id;\n        this.setState({\n            srvice:ser,\n            selectedSrvc: s[0]\n        })\n        this.asnSer(s[0]);\n       }\n    }\n\n    asnSer(s){\n        let t = this.state.srvice;\n        t.pricePrUnt.value = s.perUnitPrice;\n        // t.perUnitMinPrice.value = s.perUnitMinPrice;\n        // t.costOrShare.value = s.costOrShare;\n        t.sharingType.value = s.sharingType;\n        this.setState({\n            srvice:t\n        })\n    }\n\n    fetchProfileData(){\n        getBusinessUserDetails(this.props.info.uid)\n        .then(response => response.json())\n          .then(data => {\n            //var data = {\"success\":true,\"message\":\"Success\",\"allowedActions\":[],\"userDetails\":{\"title\":\"Mr\",\"firstName\":\"Anand\",\"middleName\":\"Kumar\",\"lastName\":\"Verma\",\"password\":null,\"mobile\":\"+918800263891\",\"email\":\"sam@l.com\",\"gender\":\"Male\",\"dob\":1582050600000,\"uid\":\"10001000396\",\"walletInfo\":{\"walletId\":3,\"amount\":-827000}},\"allowedPanels\":[\"Dashboard\",\"Mediums\",\"LandingPageManagement\",\"Datasource\",\"Campaigns\",\"Credits\",\"Leads\",\"LeadReportUpload\",\"LeadsUpload\",\"SenderIds\",\"Statements\",\"MissedCallNumbers\",\"MissedCallAssigned\",\"ShortCode\",\"ShortCodeAssigned\",\"Agency\",\"Clients\",\"Segments\",\"SegmentGroups\",\"Roles\",\"Permissions\",\"Quickbook\",\"Profile\",\"SMSTemplate\"],\"roles\":[\"su_admin\"],\"type\":\"BUSINESS\"};\n            if(data.success){\n               this.setState( state =>{\n                   return{\n                    userInfo: data.userDetails,\n                    formControls:{\n                        ...state.formControls,debit:{\n                            ...state.formControls.debit,value:data.userDetails.walletInfo.maxAllowedDebit,\n                        }\n                    }\n                   } \n               }n            }n          })\n          .catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please Try Again Latern        });\n\n        getClientBusinessDetails(this.props.info.uid)\n        .then(response => response.json())\n        .then(data => {\n            //let data = {\"success\":true,\"message\":null,\"allowedActions\":[],\"uid\":\"70005000175\",\"name\":\"Anand \",\"address\":\"112,Xyz\",\"landmark\":\"India\",\"locality\":\"Kalkaji\",\"city\":\"Delhi\",\"state\":\"Delhi\",\"pincode\":\"110084\",\"logo\":\"\",\"website\":\"anand.com\"};\n            if (data.success && !!data.uid) {  \n                data.state = {value:data.state,label:data.state};\n                data.agency = {\n                    email: (data.agency && data.agency.email) ? data.agency.email : \"\",\n                    name: (data.agency && data.agency.name) ? data.agency.name : \"\",\n                    uid: (data.agency && data.agency.uid) ? data.agency.uid : \"\"\n                };\n                this.setState({\n                    businessInfo: data,\n                    displayAgency: data.agency.name,\n                    paidType: data.paidType\n                })  \n            } else {\n                ToastsStore.error(data.message);\n            }\n        }).catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n  \n    showBusinessDetails(){\n        this.setState({\n            viewBusinessDetails:true\n        })\n    }\n\n    showTaxDetails(){\n        this.setState({\n            viewTaxDetails:true\n        })\n        getClientBusinessDetails(this.props.info.uid)\n        .then(response => response.json())\n        .then(data => {\n            //let data = {\"success\":true,\"message\":null,\"allowedActions\":[],\"uid\":\"70005000175\",\"name\":\"Anand \",\"address\":\"112,Xyz\",\"landmark\":\"India\",\"locality\":\"Kalkaji\",\"city\":\"Delhi\",\"state\":\"Delhi\",\"pincode\":\"110084\",\"logo\":\"\",\"website\":\"anand.com\"};\n            if (data.success && !!data.uid) {\n                this.setState({\n                    buid: data.uid\n                },() => this.fetchTaxDetail(data.uid));\n            } else {\n                ToastsStore.error(\"Please Save Business Details First.\");\n            }\n        }).catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n\n    fetchTaxDetail(uid){\n        const body = {\n            businessUid:uid\n        }\n        getPaymentDetails(body)\n        .then(response => response.json())\n        .then(data => {\n            //let data = {\"success\":true,\"message\":null,\"allowedActions\":[],\"businessUid\":\"70005000175\",\"taxType\":\"NONE\",\"registrationNumber\":\"None\",\"pan\":\"None\"};\n            if (data.success) {\n                this.setState({\n                    taxInfo: data\n                })\n            }else{\n                ToastsStore.error(data.message);\n            }\n        }).catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n\n    fetchAllAgency(){\n        let body = {};\n        getAgency(body)\n        .then(response => response.json())\n        .then( data => {\n            //let data = { \"success\": true, \"message\": null, \"allowedActions\": [], \"groups\": [ { \"groupId\": 1, \"name\": \"testing123\", \"roles\": [] }, { \"groupId\": 2, \"name\": \"Testing\", \"roles\": [] }, { \"groupId\": 3, \"name\": \"testing2\", \"roles\": [ { \"role\": \"admin\", \"subRoles\": null, \"name\": \"admin\", \"panel\": \"Profile\", \"parent\": true }, { \"role\": \"medium_mgmt\", \"subRoles\": [ { \"role\": \"medium_create\", \"subRoles\": null, \"name\": \"medium_create\", \"panel\": \"Mediums\", \"parent\": false }, { \"role\": \"medium_map_datasource\", \"subRoles\": null, \"name\": \"medium_map_datasourc\", \"panel\": \"Mediums\", \"parent\": false } ], \"name\": \"medium_mgmt\", \"panel\": \"Mediums\", \"parent\": true } ] } ] };\n            if(data.success){\n                this.setState({\n                    agencies: data.clients,\n                })\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error => {\n            ToastsStore.error(\"Something Went Wrong. Please Try Again Later !!!.\");\n            console.log(error);\n        })\n        getClientBusinessDetails(this.props.info.uid)\n        .then(response => response.json())\n        .then(data => {\n            //let data = {\"success\":true,\"message\":null,\"allowedActions\":[],\"uid\":\"70005000175\",\"name\":\"Anand \",\"address\":\"112,Xyz\",\"landmark\":\"India\",\"locality\":\"Kalkaji\",\"city\":\"Delhi\",\"state\":\"Delhi\",\"pincode\":\"110084\",\"logo\":\"\",\"website\":\"anand.com\"};\n            if (data.success && !!data.uid) {  \n                data.state = {value:data.state,label:data.state};\n                data.agency = {\n                    email: (data.agency && data.agency.email) ? data.agency.email : \"\",\n                    name: (data.agency && data.agency.name) ? data.agency.name : \"\",\n                    uid: (data.agency && data.agency.uid) ? data.agency.uid : \"\"\n                };\n                this.setState({\n                    businessInfo: data,\n                    displayAgency: data.agency.name\n                })  \n            } else {\n                ToastsStore.error(data.message);\n            }\n        }).catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n\n    showProfileDetails(){\n        this.setState({\n            viewProfileDetails:true,\n            popType:'edit-e',\n            headerText:'Client Details',\n            userDTO: this.formatEmployeeDto(this.state.userInfo)\n        },() => { \n            this.fetchPermissionGroups();\n        })\n   }\n\n   fetchPermissionGroups(){\n        const body={ }  \n        getNewRoleGroupTable(body)\n        .then(response => response.json())\n        .then( data => {\n            //let data = { \"success\": true, \"message\": null, \"allowedActions\": [], \"groups\": [ { \"groupId\": 1, \"name\": \"testing123\", \"roles\": [] }, { \"groupId\": 2, \"name\": \"Testing\", \"roles\": [] }, { \"groupId\": 3, \"name\": \"testing2\", \"roles\": [ { \"role\": \"admin\", \"subRoles\": null, \"name\": \"admin\", \"panel\": \"Profile\", \"parent\": true }, { \"role\": \"medium_mgmt\", \"subRoles\": [ { \"role\": \"medium_create\", \"subRoles\": null, \"name\": \"medium_create\", \"panel\": \"Mediums\", \"parent\": false }, { \"role\": \"medium_map_datasource\", \"subRoles\": null, \"name\": \"medium_map_datasourc\", \"panel\": \"Mediums\", \"parent\": false } ], \"name\": \"medium_mgmt\", \"panel\": \"Mediums\", \"parent\": true } ] } ] };\n            if(data.success){\n                this.setState({\n                    permissionGroups: this.formatMulSelectData(data.groups),\n                })\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error => {\n            ToastsStore.error(\"Something Went Wrong. Please Try Again Later !!!.\");\n            console.log(error);\n        })\n    }\n\n   formatEmployeeDto(data){\n        let temp = {\n            \"dob\": data.dob,\n            \"email\": data.email,\n            \"firstName\": data.firstName,\n            \"gender\": data.gender,\n            \"lastName\": data.lastName,\n            \"middleName\": data.middleName,\n            \"mobile\": data.mobile,\n            \"password\": data.password,\n            \"permissionGroups\": this.formatMulSelectData(data.permissionGroups),\n            \"title\": data.title,\n            \"uid\": data.uid\n        }\n        return temp;\n    }\n\n    formatMulSelectData(data){\n        let temp = [];\n        if(data && data.length>0){\n             data.forEach(e=> {\n                 let obj = {\n                     \"value\": e.groupId, \n                     \"label\": e.name \n                 }\n                 temp.push(obj);\n             });\n        }\n        return temp; \n    }\n\n    fetchSegmentSectionData(){\n        let body = {\n            start : this.state.start,\n            maxResults : 50,\n            businessUid: this.props.info.uid\n        };\n        getAllSegmentGroups(body)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                this.setState({\n                  segmentGroups : data.segmentGroups\n                });\n            } else {\n                ToastsStore.error(data.message);\n            }\n        }).catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n\n        getMediums({})\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) { \n                this.setState({\n                    mediums: data.mediumList, \n                })\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    }\n\n    onMediumChange = event => {\n        const value = event.target.value;\n        let temp1 = this.state.formControls;\n        temp1.mediumId.value = value;\n        this.setState({\n          formControls: temp1\n        },()=>this.fetchDatasourcesByMedium())\n    }\n  \n    fetchDatasourcesByMedium(){\n        let body = {\n          mediumId: this.state.formControls.mediumId.value\n        }\n        getAudienceMediumMapping(body)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) { \n              this.setState({\n                 datasources: data.audienceGroups, \n              })\n            }\n        })\n        .catch(error => {\n        console.log(error);\n        })\n    }\n      \n    assignSegmentGroup(){\n        if(!this.state.formControls.sgData.value){\n            ToastsStore.error(\"Please choose Segment Group to be assigned.\");\n            return;\n        }\n        let temp = this.state.formControls.sgData.value.split(\",\");\n        temp[0] = (temp[0] === \"null\") ? null : temp[0];\n        temp[1] = (temp[1] === \"null\") ? null : temp[1];\n        let body = {\n            \"asgmId\": temp[0],\n            \"basgmId\": temp[1],\n            \"businessUid\": this.props.info.uid\n        }\n        this.setState({\n          saveSegmentGLoader:true\n        })\n        assignSegmentGroups(body)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) { \n                let body = {\n                    start : this.state.start,\n                    maxResults : 50,\n                    businessUid: this.props.info.uid\n                };\n                ToastsStore.success(data.message);\n                getAllSegmentGroups(body)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        this.setState({\n                          segmentGroups : data.segmentGroups\n                        });\n                    } else {\n                        ToastsStore.error(data.message);\n                    }\n                }).catch(error => {\n                    console.log(error);\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                })\n            }else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                saveSegmentGLoader:false\n            })\n        })\n        .catch(error => {\n            this.setState({\n                saveSegmentGLoader:false\n            })\n            console.log(error);\n        })\n    }\n\n    changeHandler = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n        this.setState(state =>{\n            return{\n                formControls: {\n                    ...state.formControls,\n                    [name]: {\n                    ...state.formControls[name],\n                    value\n                    }\n                }\n            }        \n        });\n    }\n\n    closePopup(){\n        this.setState({\n            viewBusinessDetails: false,\n            viewTaxDetails:false,\n            isBusinessEdit: false,\n            viewProfileDetails:false\n        })\n    }\n\n    changeViewToEditBusiness(){\n        this.setState({\n             isBusinessEdit: true\n        });\n    }\n\n    saveBusinessDetails(){\n        if(!this.state.businessInfo.state){\n            ToastsStore.error(\"State cannot be empty\");\n            return;\n        }\n        const body = {\n            address: this.state.businessInfo.address,\n            city: this.state.businessInfo.city,\n            landmark: this.state.businessInfo.landmark,\n            locality: this.state.businessInfo.locality,\n            logo: this.state.businessInfo.logo,\n            name: this.state.businessInfo.name,\n            pincode: this.state.businessInfo.pincode,\n            state: this.state.businessInfo.state.value,\n            website: this.state.businessInfo.website,\n            uid: this.state.businessInfo.uid\n        }\n        if(this.checkMandatoryFields({\"Address\":body.address,\"City\":body.city,\"Company Name\":body.name,\"Pincode\":body.pincode,\"State\":body.state})){\n            this.setState({\n                confirmationLoader: true\n            })\n            editBusinessDetail(body)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    confirmationLoader: false,\n                    isBusinessEdit:false\n                })\n                if (data.success) {\n                    ToastsStore.success(\"Details Saved Successfully !\");\n                } else {\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                }\n            }).catch(error => {\n                    console.log(error);\n                    this.setState({\n                        confirmationLoader:false\n                    })\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n            })\n        }\n    }\n\n   saveTaxDetails(){\n        let uid = this.state.buid;\n        if(!uid){\n            ToastsStore.error(\"Please Save Business Details First\");\n            return;\n        }\n        if(this.state.taxInfo.taxType === \"GST registered- Regular\" || this.state.taxInfo.taxType === \"GST registered- Composition\"){\n            if(! this.state.taxInfo.registrationNumber){\n                ToastsStore.error(\"Please Save GST Number First\");\n                // console.log(this.state.taxInfo.taxType);\n                return;\n            }        \n        }\n        const body = {\n            businessUid: uid,\n            pan: this.state.taxInfo.pan,\n            registrationNumber: this.state.taxInfo.registrationNumber,\n            taxType: this.state.taxInfo.taxType,\n        }\n        if(this.checkMandatoryFields({'PAN NO':body.pan,\"GST Registration Type\":body.taxType})){\n            this.setState({\n                confirmationLoader: true\n            })\n            updatePaymentDetails(body)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    confirmationLoader: false,\n                    isBusinessEdit:false\n                })\n                if (data.success) {  \n                    ToastsStore.success(\"Details Saved Successfully !\");\n                } else {\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                }\n            }).catch(error => {\n                console.log(error);\n                this.setState({\n                    confirmationLoader:false\n                })\n                ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n            })\n        }\n   }\n\n   saveProfileDetails(){\n            const body = {\n                dob: this.state.userInfo.dob,\n                email: this.state.userInfo.email,\n                firstName: this.state.userInfo.firstName,\n                gender: this.state.userInfo.gender,\n                lastName: this.state.userInfo.lastName,\n                middleName: this.state.userInfo.middleName,\n                mobile: this.state.userInfo.mobile,\n                title: this.state.userInfo.title,\n                uid: this.state.userInfo.uid\n            }\n            if(this.checkMandatoryFields({'Name':body.firstName,\"Mobile\":body.mobile,\"email\":body.email})){\n                this.setState({\n                    confirmationLoader: true\n                })\n                userUpdate(body)\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({\n                        confirmationLoader: false,\n                    })\n                    if (data.success) {\n                        ToastsStore.success(\"Details Saved Successfully !\");\n                        this.setState({\n                            confirmationLoader: false,\n                            viewProfileDetails:false\n                        })\n                        this.fetchProfileData();\n                    } else {\n                        ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                    }\n                }).catch(error => {\n                    console.log(error);\n                    this.setState({\n                        confirmationLoader:false\n                    })\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                })\n            }\n   }\n\n    saveAgencyChange(){\n        let body = {\n            \"agencyBusinessUid\": this.state.businessInfo.agency.uid,\n            \"businessUid\": this.props.info.uid\n        }\n        this.setState({\n            confirmationLoader: true,\n        })\n        updateAgency(body)\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                confirmationLoader: false,\n            })\n            if (data.success) {\n                ToastsStore.success(\"Details Saved Successfully !\");\n                this.setState({\n                    confirmationLoader: false,\n                    displayAgency: this.state.businessInfo.agency.name\n                })\n            } else {\n                ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n            }\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                confirmationLoader:false\n            })\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n\n    fetchDatasourceData(){\n        let body1 = {\n            \"start\" : 0,\n            \"maxResults\" : 50,\n            \"businessUid\" : this.props.info.uid\n        }\n        getDatasource(body1)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                this.setState({\n                    datasourcesAssigned: data.audienceGroupDetails,\n                })\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\n        getMediums({})\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) { \n                this.setState({\n                    mediums: data.mediumList, \n                })\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        })\n    }   \n\n    assignDatasource(){\n        let t = this.state.formControls;\n        if(!this.state.formControls.ammId.value || !this.state.formControls.pricePrCrdt.value || !this.state.formControls.billingOn.value || !this.state.formControls.bct.value){\n            t.pricePrCrdt.error = \"All fields are mandatory.\";\n            this.setState({\n                formControls: t\n            });\n            return;\n        }else{\n            t.pricePrCrdt.error = \"\";\n            this.setState({\n                formControls: t\n            }); \n        }\n        if(!this.validate()){\n            return;\n        }\n        let body = {\n            \"businessUid\" : this.props.info.uid,\n            \"audienceMediumMappingId\" : this.state.formControls.ammId.value,\n            \"price\" : this.state.formControls.pricePrCrdt.value,\n            \"billingOn\": this.state.formControls.billingOn.value,\n            \"billingCreditType\": this.state.formControls.bct.value,\n            \"minCreditToBuy\" : null,\n            \"minCampaign\" : null,\n            \"costOrShare\" : this.state.formControls.cos.value,\n            \"sharingType\" : this.state.formControls.sType.value,\n            \"minPrice\": this.state.formControls.mp.value,\n            \"businessAudienceMappingId\" : this.state.temp\n        }\n        this.setState({\n            saveSegmentGLoader: true\n        })\n        addUpdateClient(body)\n        .then(response => response.json())\n        .then(data => {\n            if(data.success){\n                ToastsStore.success(data.message,4000);\n                this.clearFormControls();\n                let body1 = {\n                    \"start\" : 0,\n                    \"maxResults\" : 50,\n                    \"businessUid\" : this.props.info.uid\n                }\n                getDatasource(body1)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        this.setState({\n                            datasourcesAssigned: data.audienceGroupDetails,\n                        })\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                })\n            }else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                saveSegmentGLoader: false\n            })\n        })\n        .catch(error => {\n            this.setState({\n                saveSegmentGLoader: false\n            })\n            ToastsStore.error(\"Something went wrong, Please try again later !\");\n            console.log(error);\n        })\n    }\n\n    validate(){\n        let isValid = true;\n        let data = this.state.formControls;\n        let temp;\n\n        if(this.props.page === 'Clients'){\n            if(data.pricePrCrdt.value < this.state.minPrice){\n                data.pricePrCrdt.error = \"Price cannot be less than Minimum Price \" + this.state.minPrice +\".\";\n                this.setState({\n                  formControls: data\n                })\n                return false;\n              }\n        }else{\n            if(!data.pricePrCrdt.value || !data.mp.value || !data.cos.value){\n                data.cos.error = \"Please Provide Pricing Details.\";\n                this.setState({\n                  formControls: data\n                })\n                return false;\n              }\n              if(!data.sType.value){\n                data.cos.error = \"Please Provide Sharing Type.\";\n                this.setState({\n                  formControls: data\n                })\n                return false;\n              }\n              if(data.pricePrCrdt.value < data.mp.value){\n                data.cos.error = \"Price cannot be less than Minimum Price.\";\n                this.setState({\n                  formControls: data\n                })\n                return false;\n              }\n              if(data.sType.value === 'C2B'){\n                temp = data.cos.value;\n                if(data.mp.value < temp){\n                    data.cos.error = \"Minimum Price cannot be less than Cost Or Share.\";\n                    this.setState({\n                      formControls: data\n                    })\n                  return false;\n                }\n              }else{\n                if(data.cos.value < 0 || data.cos.value > 100){\n                    data.cos.error = \"Invalid Cost Or Share Value.\";\n                    this.setState({\n                      formControls: data\n                    })\n                    return false;\n                }\n                temp = (data.mp.value - (data.mp.value*data.cos.value*0.01));\n                if(data.mp.value < temp ){\n                    data.cos.error = \"Minimum Price cannot be less than Cost Or Share.\";\n                    this.setState({\n                      formControls: data\n                    })\n                    return false;\n                }\n              }\n              if(temp < this.state.minPrice){\n                data.cos.error = \"Cost or Share cannot be less than \" + this.state.minPrice + \".\";\n                this.setState({\n                  formControls: data\n                })\n                return false;\n              }\n        }\n        data.cos.error = \"\";\n        data.pricePrCrdt.error = \"\";\n        this.setState({\n          formControls: data\n        })\n        return isValid;\n    }\n\n    checkMandatoryFields(body){\n        for(let i in body){\n        if(!body[i]){\n            let str = \" cannot be empty !\"\n            ToastsStore.error(i+str);\n            return false;\n        }\n        if(i === 'pincode' && body[i].length < 6){\n            ToastsStore.error(\"6 digit Pincode required\");\n            return false;\n        }\n        }\n        return true;\n    }\n\n    bChangeHandler(event){\n        let name = event.target.name;\n        let val = event.target.value;\n        let temp = this.state.businessInfo;\n        temp[name] = val;\n        this.setState({\n            businessInfo: temp\n        })\n        // console.log(temp);\n    }\n\n    pChangeHandler(event){\n        let name = event.target.name;\n        let val = event.target.value;\n        let temp = this.state.userDTO;\n        temp[name] = val;\n        // console.log(name,val);\n        this.setState({\n            userDTO: temp\n        })\n        // console.log(temp);\n    }\n\n    tChangeHandler(event){\n        let name = event.target.name;\n        let val = event.target.value;\n        let temp = this.state.taxInfo;\n        temp[name] = val;\n        this.setState({\n            taxInfo: temp\n        })\n       // console.log(temp);\n    }\n\n    handleChange(event){\n            let name = 'state';\n            let val = event;\n            let temp = this.state.businessInfo;\n            temp[name] = val;\n            this.setState({\n                businessInfo: temp\n            })\n    }\n\n    dsHandler = (event) => {\n        let name = event.target.name;\n        let val = event.target.value;\n        if(name === \"ammIdd\"){\n            let agData = this.getMatchingAgData(val);\n            let temp1 = this.state.formControls;\n            temp1.ammId.value = val;\n            temp1.billingOn.value = agData.billingOn;\n            temp1.bct.value = agData.billingCreditType;\n            temp1.pricePrCrdt.value = agData.price;\n            temp1.cos.value = agData.costOrShare;\n            temp1.sType.value = agData.sharingType;\n            temp1.mp.value = agData.minPrice;\n            this.setState({\n                formControls: temp1,\n                isBctDisabled: (agData.billingCreditType === \"premium\"),\n                minPrice: agData.minPrice,\n                temp: agData.bamId\n            })\n        }else{\n            let temp2 = this.state.formControls;\n            temp2.ammId.value = val;\n            this.setState({\n                formControls: temp2\n            },()=>{\n                let body1 = {\n                    start : this.state.start,\n                    maxResults : 50,\n                    ammId: val\n                };\n                getAllSegmentGroups(body1)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        this.setState({\n                          allSegmentGroups : data.segmentGroups\n                        });\n                    } else {\n                        ToastsStore.error(data.message);\n                    }\n                }).catch(error => {\n                    console.log(error);\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                })\n            })\n        }\n    }\n\n    getMatchingAgData(val){\n        let temp = [{}];\n        val = parseInt(val);\n        temp = this.state.datasources.filter(e => {\n            return e.ammId === val;\n        });\n        return temp[0];\n    }\n\n    handleRolesChange(event){\n        let name = 'permissionGroups';\n        let val = event;\n        let temp = this.state.userDTO;\n        temp[name] = val;\n        this.setState({\n            userDTO: temp\n        })\n    }\n\n    dobChange = val => {\n        let temp1 = this.state.userDTO;\n        temp1.dob = val;\n        this.setState({\n            userDTO: temp1\n        })\n    }\n\n    uInfoChangeHandler = (event)=>{\n            let name = event.target.name;\n            let val = event.target.value;\n            let temp = this.state.businessInfo;\n            temp[name].uid = val;\n            this.setState({\n                businessInfo: temp\n            })\n    }\n\n    tableAction(index,action){\n        let data = this.state.datasourcesAssigned[index];\n        if(action === \"database-edit\"){\n            this.fetchParentData(data);\n        }else{\n            this.setState({\n                confirmationPopup:true,\n                dsToEdit:data\n            })\n        }\n    }\n\n    fetchParentData(data){\n        this.populateFormControls(data);\n        let body = {\n            \"ammId\": data.ammId,\n            \"bamId\": data.bamId,\n        }\n        getParentDetails(body)\n        .then(response => response.json())\n        .then(data => {\n            if(data.success && data.ammMinDTO){\n                this.setState({\n                    minPrice: data.ammMinDTO.minPrice,\n                    isBctDisabled: (data.ammMinDTO.billingCreditType === \"premium\")\n                })\n            }\n        })\n        .catch(error => {\n            console.log(error);\n            ToastsStore.error(\"Something went wrong, Please try again later !\");\n        })\n    }\n\n    closeEditDs(){\n        this.setState({\n            openEditDatasource:false\n        })\n        this.clearFormControls();\n    }\n\n    serviceChangeHandler(event){\n        const value= event.target.value;\n        const name = event.target.name;\n            \n        this.setState(state=>{\n            return{\n                srvice:{\n                   ...state.srvice,\n                   [name]:{\n                       ...state.srvice.name,value\n                   }\n                }\n            }\n        })\n      \n    }\n\n    editAssignedDataSc(){\n        \n        if(!this.validate()){\n            return;\n        }\n        \n        let body = {\n            \"businessUid\" : this.props.info.uid,\n            \"audienceMediumMappingId\" : this.state.formControls.ammId.value,\n            \"price\" : this.state.formControls.pricePrCrdt.value,\n            \"billingOn\": this.state.formControls.billingOn.value,\n            \"billingCreditType\": this.state.formControls.bct.value,\n            \"minCreditToBuy\" : null,\n            \"minCampaign\" : null,\n            \"businessAudienceMappingId\": this.state.dsToEdit.bamId,\n            \"costOrShare\" : this.state.formControls.cos.value,\n            \"sharingType\" : this.state.formControls.sType.value,\n            \"minPrice\": this.state.formControls.mp.value\n        }\n        addUpdateClient(body)\n        .then(response => response.json())\n        .then(data => {\n            if(data.success){\n                ToastsStore.success(data.message);\n                let body1 = {\n                    \"start\" : 0,\n                    \"maxResults\" : 50,\n                    \"businessUid\" : this.props.info.uid\n                }\n                getDatasource(body1)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        this.setState({\n                            datasourcesAssigned: data.audienceGroupDetails,\n                            openEditDatasource:false\n                        },()=>{\n                            this.clearFormControls();\n                        })\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                })\n\n            }else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                saveSegmentGLoader: false\n            })\n        })\n        .catch(error => {\n            this.setState({\n                saveSegmentGLoader: false\n            })\n            ToastsStore.error(\"Something went wrong, Please try again later !\");\n            console.log(error);\n        })\n    }\n\n    unAssignDs(){\n        let data = this.state.dsToEdit;\n        let body = {\n            \"businessUid\" : this.props.info.uid,\n            \"audienceMediumMappingId\" : data.ammId,\n            \"price\" : data.pricePerCredit,\n            \"billingOn\": data.billingOn,\n            \"billingCreditType\": data.billingCreditType,\n            \"minCreditToBuy\" : null,\n            \"minCampaign\" : null,\n            \"businessAudienceMappingId\": data.bamId,\n            \"remove\":true\n        }\n        addUpdateClient(body)\n        .then(response => response.json())\n        .then(data => {\n            if(data.success){\n                ToastsStore.success(data.message);\n                let body1 = {\n                    \"start\" : 0,\n                    \"maxResults\" : 50,\n                    \"businessUid\" : this.props.info.uid\n                }\n                getDatasource(body1)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        this.setState({\n                            datasourcesAssigned: data.audienceGroupDetails,\n                            confirmationPopup:false\n                        })\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                })\n\n            }else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                saveSegmentGLoader: false\n            })\n        })\n        .catch(error => {\n            this.setState({\n                saveSegmentGLoader: false\n            })\n            ToastsStore.error(\"Something went wrong, Please try again later !\");\n            console.log(error);\n        })\n    }\n\n    unAssignSg(){\n        let data = this.state.dsToEdit;\n        let body = {\n            \"asgmId\": data.asgmId,\n            \"basgmId\": data.basgmId,\n            \"businessUid\": this.props.info.uid,\n            \"remove\": true\n        }\n        assignSegmentGroups(body)\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) { \n                let body = {\n                    start : this.state.start,\n                    maxResults : 50,\n                    businessUid: this.props.info.uid\n                };\n                ToastsStore.success(data.message);\n                getAllSegmentGroups(body)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        this.setState({\n                          segmentGroups : data.segmentGroups,\n                          confSgPopup: false\n                        });\n                    } else {\n                        ToastsStore.error(data.message);\n                    }\n                }).catch(error => {\n                    console.log(error);\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                })\n            }else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error => {\n            this.setState({\n                saveSegmentGLoader:false\n            })\n            console.log(error);\n        })\n    }\n\n    populateFormControls(data){\n        let temp = this.state.formControls;\n        temp.mediumId.value = data.mediumId;\n        temp.ammId.value = data.ammId;\n        temp.billingOn.value = data.billingOn;\n        temp.bct.value = data.billingCreditType;\n        temp.pricePrCrdt.value = data.pricePerCredit;\n        temp.pricePrCrdt.error = \"\";\n        temp.mName.value = data.mediumName;\n        temp.dName.value = data.agName;\n        temp.cos.value = data.costOrShare;\n        temp.sType.value = data.sharingType;\n        temp.mp.value = data.minPrice;\n        this.setState({\n            openEditDatasource:true,\n            formControls:temp,\n            isBctDisabled: (data.billingCreditType === \"premium\"),\n            dsToEdit:data\n        })\n    }\n\n    closeConfirmation(){\n        this.setState({\n            confirmationPopup:false,\n            confSgPopup: false\n        })\n    }\n\n    // clearDebitType(){\n    //     this.setState( state =>{\n    //         return{\n    //             formControls:{\n    //                 ...state.formControls,debit:{\n    //                     ...state.formControls.debit,value:\"\"\n    //                 }\n    //             }\n    //         }   \n    //     })\n    //     console.log(this.state.formControls.debit);\n    // }\n\n    editPaidType(){\n        this.setState({\n            isPTypeEdit: true\n        })\n    }\n\n    getAllServicePackages(bsnessUid){\n        let body={}\n        if(bsnessUid){\n            body.businessUid = bsnessUid;\n        }\n        getAllServicePackages(body)\n        .then( response => response.json())\n        .then( data=>{\n            if(data.success){\n                if(bsnessUid){\n                    this.setState({\n                        assignedPkg:data.servicePackages\n                    })\n                }else{\n                    this.setState({\n                        servicePackages: data.servicePackages\n                    })\n                }\n                \n                // ToastsStore.success(data.message);\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error =>{\n            console.log(error);\n            ToastsStore.error(\"Something Went Wrong, Please Try Again Later.!!!\");\n        })     \n    }\n\n    editBPaidType(){\n        if(!this.state.businessInfo.paidType){\n            this.setState({\n                bptError: \"Please choose Paid Type\"\n            })\n            return;\n        }else{\n            this.setState({\n                bptError: \"\"\n            })\n        }\n        if(this.state.formControls.debit.value > 1000000){\n            this.setState({\n                formControls:{\n                    ...this.state.formControls,debit:{\n                        ...this.state.formControls.debit,error: \"Value should be less than Rs.1000000\"\n                    }\n                }\n            })\n            return;\n        }else{\n            this.setState({\n                formControls:{\n                    ...this.state.formControls,debit:{\n                        ...this.state.formControls.debit,error:\"\"\n                    }\n                }\n            })\n        }\n        let body = {\n            \"businessUid\" : this.props.info.uid,\n            \"paidType\" : this.state.businessInfo.paidType,\n            maxAllowedDebit: this.state.formControls.debit.value     \n        }\n        this.setState({\n            saveSegmentGLoader: true\n        })\n        updateBPaidType(body)\n        .then(response => response.json())\n        .then(data => {\n            if(data.success){\n                getClientBusinessDetails(this.props.info.uid)\n                .then(response => response.json())\n                .then(data => {\n                    //let data = {\"success\":true,\"message\":null,\"allowedActions\":[],\"uid\":\"70005000175\",\"name\":\"Anand \",\"address\":\"112,Xyz\",\"landmark\":\"India\",\"locality\":\"Kalkaji\",\"city\":\"Delhi\",\"state\":\"Delhi\",\"pincode\":\"110084\",\"logo\":\"\",\"website\":\"anand.com\"};\n                    if (data.success && !!data.uid) {  \n                        data.state = {value:data.state,label:data.state};\n                        data.agency = {\n                            email: (data.agency && data.agency.email) ? data.agency.email : \"\",\n                            name: (data.agency && data.agency.name) ? data.agency.name : \"\",\n                            uid: (data.agency && data.agency.uid) ? data.agency.uid : \"\"\n                        };\n                        this.setState({\n                            businessInfo: data,\n                            paidType: data.paidType,\n                            isPTypeEdit:false,\n                           // isDebitEdit:false\n                        })\n                        /********************************************** */\n                        if(this.state.businessInfo.paidType === \"postpaid\"){\n                            this.fetchProfileData();\n                        }  \n                    } else {\n                        ToastsStore.error(data.message);\n                    }\n                }).catch(error => {\n                    console.log(error);\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                })\n            }else{\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                saveSegmentGLoader: false\n            })\n        })\n        .catch(error => {\n            this.setState({\n                saveSegmentGLoader: false\n            })\n            ToastsStore.error(\"Something went wrong, Please try again later !\");\n            console.log(error);\n        })\n    }\n\n    clearFormControls(){\n        let temp = this.state.formControls;\n        temp.mediumId.value = \"\";\n        temp.ammId.value = \"\";\n        temp.sgData.value = \"\";\n        temp.billingOn.value = \"\";\n        temp.bct.value = \"\";\n        temp.pricePrCrdt.value = \"\";\n        temp.cos.value = \"\";\n        temp.sType.value = \"\";\n        temp.mp.value = \"\";\n        temp.cos.error = \"\";\n        temp.pricePrCrdt.error = \"\";\n        this.setState({\n            formControls: temp\n        })\n    }\n\n    tableActionSg(index,action){\n        let data = this.state.segmentGroups[index];\n        this.setState({\n            confSgPopup:true,\n            dsToEdit:data\n        })\n    }\n\n    /*######Edit Pckg#########*/\n\n    // assignPackage(){\n    //     this.setState({opnAssign: true});\n    //     this.fetchPackage(this.state.pkgId);\n    // }\n\n    servicePackageHandler(event){\n        this.setState({\n            opnAssign: true\n        },this.fetchPackage(event.target.value)) \n        \n    }\n\n    fetchPackage(code){\n    \n        let body={\n            servicePackageCode: code\n        }\n        getPackage(body)\n        .then( response => response.json())\n        .then( data=>{\n            if(data.success){ \n                this.setState({\n                    package:this.formatPkg(data.servicePackageDTO),\n                    //openEditDetails: true\n                })                            \n            }  \n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error =>{\n            console.log(error);\n            ToastsStore.error(\"Something Went Wrong.!!!\");\n        })\n    }\n\n    formatPkg(data){\n      \n        if(data){\n            data.services.forEach(e=>{\n                e.error= null;\n            })\n            return data;\n        }\n\n    }\n\n    packgChange(event){\n        // let temp = this.state.selectedPackage;\n        let temp = this.state.package;\n         const val = event.target.value;\n         const n = event.target.name;\n         temp[n]=val;\n         this.setState({\n             package: temp\n             //selectedPackage: temp\n         })\n        \n         //console.log(this.state.selectedPackage);\n    }\n\n    checkForMinValue(){\n        let isValid = true;\n        let temp = this.state.package;\n        temp.services.forEach(e => {\n            if(isValid === false){        \n                return;\n            }\n            else{\n                if(e.val < e.minCredit){\n                    e.isMin = true;\n                    e.error = `Entered Quantity/Price < ${e.minCredit+\" \"}(Min Credit)`;\n                    isValid = false;\n                    this.setState({\n                        package: temp,\n                    })\n                    return;\n                }          \n                else if(e.val > e.minCredit){\n                    e.isMin = false;\n                    e.error = null;\n                    isValid = true;\n                }\n                if(e.pricePerUnit < e.perUnitMinPrice){\n                    e.error = `Entered per unit price must be greate than  ${e.perUnitMinPrice+\" \"}(per unit minimum price)`;         \n                    isValid = false;\n                    this.setState({\n                        package: temp,\n                    })\n                    return;\n                }\n                else if(e.pricePerUnit > e.perUnitMinPrice){\n                    e.error = null;\n                    isValid = true;\n                }\n            }           \n        });\n        this.setState({\n            package: temp,\n        })\n        console.log(isValid);\n        if(isValid){\n            this.verifyPakg();\n        }  \n    }\n\n    verifyPakg(){\n        // let temp = this.state.selectedPackage;\n        let temp = this.state.package;\n         if(!temp.name){\n             alert(\"Package Name is Mandatory.!!!\");\n             // ToastsStore.Error(\"Package Name is Mandatory.!!!\");\n             return;\n         }\n         else{\n             this.asgnPkg();\n         }\n     }\n\n    packegService(ser){\n        let arr =[];\n        ser && ser.forEach((s) =>{\n            let obj=\n                {\n                    \"code\": s.code,\n                    \"creditUnitType\": s.creditUnitType,\n                    \"minCredit\": s.minCredit,\n                    \"pricePerUnit\": (s.pricePerUnit || s.perUnitPrice),\n                    \"totalPriceOrUnits\": s.val\n                }\n            arr.push(obj);\n        })\n        return arr;\n    }\n\n    handleChangePkg = (event,index) => {\n        \n        // let temp = this.state.selectedPackage;\n        let temp = this.state.package;\n         const val = event.target.value;\n         const n = event.target.name;\n         temp.services[index].error = null;\n         temp.services[index][n] = val;       \n         this.setState({\n             //selectedPackage: temp\n             package: temp\n         })\n\n     }\n\n    asgnPkg(){\n        let temp = this.state.package;\n          const body=\n          {\n            \"businessUid\": this.props.info.uid,\n            \"code\": temp.code,\n            \"desc\": temp.desc ? temp.desc : null,\n            \"discount\": temp.discount ? temp.discount : null,\n            \"discountType\": temp.discountType ? temp.discountType : null,\n            \"name\": temp.name,\n            \"price\": temp.price ? temp.price : null,\n            \"services\": this.packegService(this.state.package.services),\n          }\n          pkgAssign(body)\n          .then(r => r.json())\n          .then(data =>{\n              if(data.success){\n                  this.setState({\n                    opnAssign: false\n                  })\n                  ToastsStore.success(\"This packeage is assigned\"); \n              }         \n              else{\n                  ToastsStore.error(data.message);\n              }\n          })\n          .catch(e =>{\n              console.log(e);\n              ToastsStore.error(\"Something Went Wrong. Please try Again Later.!!!\")\n          })\n      }\n\n    render(){\n        const style = {\n            borderRadius: 0,\n            opacity: 0.85,\n            padding: '1em',\n     }\n        return(\n            <React.Fragment>\n                <div onClick={()=>this.props.back('table')} className=\"margin-btm--half\"><button className=\"ui icon left labeled tiny button\"><i aria-hidden=\"true\" className=\"left chevron icon\"></i>Back</button></div>\n                <div className=\"ui pointing secondary menu overflowX-auto\">\n                    <div className={`${this.state.active === 0 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(0)}>Profile</div>\n                    {\n                        utils.isSuAdmin && this.props.page === 'Clients' &&\n                        <div className={`${this.state.active === 1 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(1)}>Agency</div>\n                    }\n                    <div className={`${this.state.active === 2 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(2)}>Segment Groups</div>\n                    <div className={`${this.state.active === 3 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(3)}>Datasource</div>\n                    <div className={`${this.state.active === 4 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(4)}>Services</div>\n                    <div className={`${this.state.active === 6 ? 'active' : ''} item pointer`} onClick={()=>this.changeTab(6)}>Assign Package</div> \n                </div>\n                <div className=\"ui segment\" style={{minHeight:'200px'}}>\n                    {\n                        this.state.active === 0 && this.state.userInfo &&\n                        <React.Fragment>\n                            <div className=\"ui centered cards\">\n                                <div className=\"ui card\">\n                                    <div className=\"image\">\n                                        <div className=\"company-logo\">\n                                            <i aria-hidden=\"true\" className=\"user outline huge icon global-loader\" style={{color:'#8e8d8d'}}></i>\n                                        </div>\n                                    </div>\n                                    <div className=\"content\">\n                                        <div className=\"header\" style={{marginTop:'8px'}}>{this.state.userInfo.title}&nbsp;{this.state.userInfo.firstName}&nbsp;{this.state.userInfo.middleName}&nbsp;{this.state.userInfo.lastName}</div>\n                                        <div className=\"meta\">\n                                            {\n                                                this.state.userInfo.gender &&\n                                                <span>\n                                                    {this.state.userInfo.gender} |\n                                                </span>\n                                            } \n                                            {\n                                                this.state.userInfo.dob &&\n                                                <span>\n                                                    <Moment format=\"DD-MM-YYYY\">{this.state.userInfo.dob}</Moment>\n                                                </span>\n                                            }\n                                        </div>\n                                        <div className=\"description\">\n                                            <div>\n                                                {`Mobile: ${this.state.userInfo.mobile}`}\n                                            </div>\n                                            <div>\n                                                {`Email: ${this.state.userInfo.email}`}\n                                            </div>\n                                            <div>\n                                                <div>Paid Type: {this.state.paidType ? <span style={{textTransform:\"capitalize\"}}>{this.state.paidType}</span> : \"Not Assigned\"}\n                                                {\n                                                    !this.state.isPTypeEdit &&\n                                                    <span className=\"margin-left--half pointer text-intent\" onClick={()=>this.editPaidType()}>(Edit)</span>\n                                                }\n                                                </div>\n                                                {\n                                                    utils.isSuAdmin && this.state.businessInfo && this.state.businessInfo.paidType === \"postpaid\" &&\n                                        \n                                                    <div>Max Allowed Debit:{this.state.formControls.debit.value ? <span style={{textTransform:\"capitalize\"}}>{this.state.formControls.debit.value}</span> : \"0\"}\n                                                    {\n                                                        !this.state.isPTypeEdit &&\n                                                        <span className=\"margin-left--half pointer text-intent\" onClick={()=>this.editPaidType()}>(Edit)</span>\n                                                    }\n                                                    </div>\n                                                }\n                                               \n                                                {\n                                                    this.state.isPTypeEdit &&\n                                                    <div className=\"margin-top--half\">\n                                                        <label className=\"text--darker\">Choose Paid Type</label>\n                                                        <select className=\"form-control\" \n                                                            name=\"paidType\"\n                                                            value={this.state.businessInfo.paidType} \n                                                            onChange={this.bChangeHandler.bind(this)} >\n                                                            <option value=\"\" hidden>--Choose--</option>\n                                                            <option value=\"prepaid\">PREPAID</option>\n                                                            <option value=\"postpaid\">POSTPAID</option>\n                                                        </select>\n                                                        {\n                                                            this.state.bptError &&\n                                                            <div className=\"text--center form-error\">{this.state.bptError}</div>\n                                                        }\n                                                {\n                                                    utils.isSuAdmin && this.state.businessInfo.paidType === \"postpaid\" &&\n                                                    <React.Fragment>\n                                                        Max Allowed Debit:&nbsp;\n                                                        <Popup\n                                                        trigger={<Icon name='info circle' color=\"blue\"/>}\n                                                        position='right center'\n                                                        style={style}\n                                                        inverted\n                                                        flowing\n                                                        content=\"Max limit is &#8377;1,000,000\" \n                                                        hoverable>\n                                                        </Popup>\n                                                        <div className=\"ui labeled input\">\n                                                            <div className=\"ui label label\">&#8377;</div>\n                                                            <input type=\"number\" name=\"debit\" className=\"form-control\" value={this.state.formControls.debit.value} onChange={this.changeHandler} style={{width:'95%', display:'inline'}} />\n                                                        </div>\n                                                        {\n                                                            this.state.formControls.debit.error &&\n                                                            <div className=\"text--center form-error\">{this.state.formControls.debit.error}</div>\n                                                        }\n                                                        \n                                                                {/* {\n                                                                    !this.state.isDebitEdit &&\n                                                                    <span className=\"margin-left--half pointer text-intent\" onClick={()=>this.editDebitType()}>(Continue)</span>\n                                                                } */}\n                                                                {/* { this.state.isDebitEdit && !this.state.saveSegmentGLoader &&  */}\n                                                                    {/* <div className=\"flex flex-horz-center padding-top--half\">\n                                                                         <button className=\"ui button\" onClick={this.clearDebitType.bind(this)}>\n                                                                            CLEAR\n                                                                        </button>                    \n                                                                        <button className=\"ui green button\" onClick={()=>this.editBPaidType()}>\n                                                                            SAVE\n                                                                        </button>\n                                                                    </div>  */}\n                                                                {/* } */}\n                                                              \n                                                                { \n                                                                    this.state.saveSegmentGLoader && \n                                                                    <div className=\"flex flex-horz-center padding-top--half\">\n                                                                        <CircularLoader stroke={\"#c82506\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                                                    </div>\n                                                                }\n                                                                </React.Fragment>\n                                                            }\n                                                        {\n                                                            !this.state.saveSegmentGLoader && \n                                                            <div className=\"flex flex-horz-center padding-top--half\">\n                                                                {/* {\n                                                                    utils.isSuAdmin && this.state.businessInfo.paidType === \"postpaid\" &&\n                                                                        <button className=\"ui button\" style={{fontSize:\"0.9rem\"}} onClick={this.clearDebitType.bind(this)}>\n                                                                            CLEAR DEBIT\n                                                                        </button> \n                                                                } */}\n                                                               \n                                                                <button className=\"ui button col-10\" style={{fontSize:\"0.9rem\"}} onClick={()=>this.setState({isPTypeEdit:false})}>\n                                                                    BACK\n                                                                </button>                    \n                                                                <button className=\"ui green button col-8\" style={{fontSize:\"0.9rem\"}} onClick={()=>this.editBPaidType()}>\n                                                                    SAVE\n                                                                </button>\n                                                            </div>\n                                                        }\n                                                       \n                                                    </div>\n                                                }   \n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"extra content flex\">\n                                        <div className=\"ui vertical buttons\" style={{margin:'auto'}}>\n                                            <button onClick={() => this.showBusinessDetails()} className=\"ui icon right labeled small button\">\n                                                <i aria-hidden=\"true\" className=\"eye small icon\"></i>\n                                                View Business Details\n                                            </button>\n                                            <button onClick={() => this.showTaxDetails()} className=\"ui icon right labeled small button\">\n                                                <i aria-hidden=\"true\" className=\"eye small icon\"></i>\n                                                View Tax Details\n                                            </button>\n                                            <button onClick={() => this.showProfileDetails()} className=\"ui icon right labeled small button\">\n                                                <i aria-hidden=\"true\" className=\"edit outline small icon\"></i>\n                                                Edit Profile\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            { \n                                this.state.viewBusinessDetails &&\n                                <PopUp title={'Business Details'} togglePopup={this.closePopup.bind(this)} >\n                                    <BusinessDetails\n                                        isBusinessEdit={true}\n                                        closePopup={this.closePopup.bind(this)}\n                                        changeViewToEditBusiness={this.changeViewToEditBusiness.bind(this)}\n                                        saveBusinessDetails={this.saveBusinessDetails.bind(this)}\n                                        bChangeHandler={this.bChangeHandler.bind(this)}\n                                        handleChange={this.handleChange.bind(this)}\n                                        confirmationLoader={this.state.confirmationLoader}\n                                        businessInfo={this.state.businessInfo}>\n                                    </BusinessDetails>\n                                </PopUp>\n                            }\n                            { \n                                this.state.viewTaxDetails &&\n                                <PopUp title={'Tax/Registration Details'} togglePopup={this.closePopup.bind(this)} >\n                                    <TaxDetails\n                                        isBusinessEdit={true}\n                                        closePopup={this.closePopup.bind(this)}\n                                        changeViewToEditBusiness={this.changeViewToEditBusiness.bind(this)}\n                                        saveTaxDetails={this.saveTaxDetails.bind(this)}\n                                        tChangeHandler={this.tChangeHandler.bind(this)}\n                                        confirmationLoader={this.state.confirmationLoader}\n                                        taxInfo={this.state.taxInfo}>\n                                    </TaxDetails>\n                                </PopUp>\n                            }\n                            { \n                                this.state.viewProfileDetails &&\n                                <PopUp title={this.state.headerText} togglePopup={this.closePopup.bind(this)} >\n                                    <ProfileDetails\n                                        userInfo={this.state.userDTO}\n                                        closePopup={this.closePopup.bind(this)}\n                                        confirmationLoader={this.state.confirmationLoader}\n                                        saveEmployeeDetails={\"\"}\n                                        editEmployeeDetails={this.saveProfileDetails.bind(this)}\n                                        saveProfileDetails={\"\"}\n                                        dobChange={this.dobChange.bind(this)}\n                                        popType={this.state.popType}\n                                        permissionGroups={this.state.permissionGroups}\n                                        handleRolesChange={this.handleRolesChange.bind(this)}\n                                        pChangeHandler={this.pChangeHandler.bind(this)}>\n                                    </ProfileDetails>\n                                </PopUp>\n                            }\n                        </React.Fragment>\n                    }\n                    {\n                        this.state.active === 1 &&\n                        <React.Fragment>\n                            <div className=\"padding-btm--half padding-top--half\">\n                                <span className=\"text--bold\">Current Agency:&nbsp;</span><span>{this.state.displayAgency}</span>\n                            </div>\n                            {\n                                this.state.businessInfo &&\n                                <select className=\"col-5 form-control margin-btm\"\n                                    name=\"agency\"\n                                    value={this.state.businessInfo.agency.uid} \n                                    onChange={this.uInfoChangeHandler}>                                               \n                                            <option value=\"\" hidden>-SELECT-</option>\n                                            {\n                                                    this.state.agencies.map((item,index)=>{\n                                                            return (\n                                                            <option key={index} value={item.uid}>{item.name}</option>\n                                                            );\n                                                    })\n                                            }\n                                </select>\n                            }\n                            <button className=\"ui green button\" onClick={()=>this.saveAgencyChange()}>\n                                SAVE CHANGES\n                            </button>\n                        </React.Fragment>\n                    }\n                    {\n                        this.state.active === 2 &&\n                        <React.Fragment>\n                            <div className=\"col-20 flex flex-wrap margin-btm--double\">\n                            <div className=\"col-3\">\n                                <div className=\"label\">Medium</div>\n                                    <select className=\"form-control\"\n                                        name=\"mediumId\"\n                                        value={this.state.formControls.mediumId.value} \n                                        onChange={this.onMediumChange}>                                               \n                                            <option value=\"\" hidden>-SELECT-</option>\n                                            {\n                                                    this.state.mediums.map((item,index)=>{\n                                                            return (\n                                                            <option key={index} value={item.id}>{item.name}</option>\n                                                            );\n                                                    })\n                                            }\n                                    </select>\n                                </div>\n                                <div className=\"col-4 margin-right--half margin-left\">\n                                    <div className=\"label\">DataSource</div>\n                                    <select className=\"form-control\"\n                                        name=\"ammId\"\n                                        value={this.state.formControls.ammId.value} \n                                        onChange={this.dsHandler}>                                               \n                                            <option value=\"\" hidden>-SELECT-</option>\n                                            {\n                                                    this.state.datasources.map((item,index)=>{\n                                                            return (\n                                                            <option key={index} value={item.ammId}>{item.name}</option>\n                                                            );\n                                                    })\n                                            }\n                                    </select>\n                                </div>\n                                <div className=\"col-8\">\n                                    <div className=\"label\">Choose Segment Group</div>\n                                    <select className=\"form-control\"\n                                    name=\"sgData\"\n                                    value={this.state.formControls.sgData.value} \n                                    onChange={this.changeHandler}>                                               \n                                        <option value=\"\" hidden>-SELECT-</option>\n                                        {\n                                            this.state.allSegmentGroups.map((item,index)=>{\n                                                return (\n                                                    <option key={index} value={item.asgmId+\",\"+item.basgmId}>{item.sgName}</option>\n                                                );\n                                            })\n                                        }\n                                    </select>\n                                </div>\n                                {\n                                    !this.state.saveSegmentGLoader &&\n                                    <div className=\"margin-left\">\n                                        <div className=\"label\">&nbsp;</div>\n                                        <button className=\"ui green button margin-left\" onClick={()=>this.assignSegmentGroup()}>\n                                            Assign\n                                        </button>\n                                    </div>\n                                }\n                                {\n                                    this.state.saveSegmentGLoader &&\n                                    <div className=\"col-1 margin-left\">\n                                        <div className=\"label\">&nbsp;</div>\n                                        <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                    </div>\n                                }\n                            </div>\n                            <SegmentGroupTable \n                                segmentGroups={this.state.segmentGroups}\n                                showNoAction={false}\n                                tableAction={this.tableActionSg.bind(this)}/>\n                            {\n                                this.state.confSgPopup &&\n                                <PopUp title={''} togglePopup={this.closeConfirmation.bind(this)} >\n                                    <ConfirmationModal\n                                        confirmationString={\"Are you sure, you want to unassign this Segment Group.\"}\n                                        togglePopup={this.closeConfirmation.bind(this)}\n                                        submitData={this.unAssignSg.bind(this)}\n                                        confirmationLoader={false}\n                                        submitCta={\"Yes\"}\n                                    />\n                                </PopUp>\n                            }    \n                        </React.Fragment>\n                    }\n                    {\n                        this.state.active === 3 &&\n                        <React.Fragment>\n                            {\n                                this.props.page === 'Clients' &&\n                                <div className=\"col-20 flex flex-wrap margin-btm--double\">\n                                    <div className=\"col-3\">\n                                        <div className=\"label\">Medium</div>\n                                        <select className=\"form-control\"\n                                            name=\"mediumId\"\n                                            value={this.state.formControls.mediumId.value} \n                                            onChange={this.onMediumChange}>                                               \n                                                <option value=\"\" hidden>-SELECT-</option>\n                                                {\n                                                        this.state.mediums.map((item,index)=>{\n                                                                return (\n                                                                <option key={index} value={item.id}>{item.name}</option>\n                                                                );\n                                                        })\n                                                }\n                                        </select>\n                                    </div>\n                                    <div className=\"col-4 margin-right--half margin-left\">\n                                        <div className=\"label\">DataSource</div>\n                                        <select className=\"form-control\"\n                                            name=\"ammIdd\"\n                                            value={this.state.formControls.ammId.value} \n                                            onChange={this.dsHandler}>                                               \n                                                <option value=\"\" hidden>-SELECT-</option>\n                                                {\n                                                        this.state.datasources.map((item,index)=>{\n                                                                return (\n                                                                <option key={index} value={item.ammId}>{item.name}</option>\n                                                                );\n                                                        })\n                                                }\n                                        </select>\n                                    </div>\n                                    <div className=\"col-3\">\n                                        <div className=\"label\">Billing On</div>\n                                        <select className=\"form-control\" \n                                                name=\"billingOn\"\n                                                value={this.state.formControls.billingOn.value} \n                                                onChange={this.changeHandler}>                                  \n                                                <option defaultValue >-choose-</option>\n                                                <option key=\"1\" value=\"SENT\">Sent</option>\n                                                <option key=\"2\" value=\"DELIVERED\">Delivered</option>\n                                        </select>\n                                    </div> \n                                    <div className=\"col-3 margin-left margin-right\">\n                                        <div className=\"label\">Billing Credit Type</div>\n                                        <select className=\"form-control\" \n                                                name=\"bct\"\n                                                disabled={this.state.isBctDisabled}\n                                                value={this.state.formControls.bct.value} \n                                                onChange={this.changeHandler}>                                  \n                                                <option defaultValue >-choose-</option>\n                                                <option key=\"1\" value=\"basic\">Basic</option>\n                                                <option key=\"2\" value=\"premium\">Premium</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"col-3\">\n                                        <div className=\"label\">Price</div>\n                                        <input  type=\"number\"\n                                                className=\"form-control\"\n                                                name=\"pricePrCrdt\"\n                                                value={this.state.formControls.pricePrCrdt.value} \n                                                onChange={this.changeHandler} >\n                                        </input>\n                                        {\n                                            this.state.formControls.pricePrCrdt.error &&\n                                            <span className=\"form-error\">{this.state.formControls.pricePrCrdt.error}</span>\n                                        }\n                                    </div>\n                                    {\n                                        !this.state.saveSegmentGLoader &&\n                                        <div>\n                                            <div className=\"label\" style={{marginBottom:'3px'}}>&nbsp;</div>\n                                            <button className=\"ui green button margin-left\" onClick={()=>this.assignDatasource()}>\n                                                Assign\n                                            </button>\n                                        </div>\n                                    }\n                                    {\n                                        this.state.saveSegmentGLoader &&\n                                        <div className=\"col-1 margin-left\">\n                                            <div className=\"label\">&nbsp;</div>\n                                            <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                        </div>\n                                    }\n                                </div>   \n                            }\n                            {\n                                this.props.page === \"Agency\" &&\n                                <div className=\"col-20 flex flex-wrap margin-btm--double\">\n                                    <div className=\"col-18 flex flex-wrap\">\n                                    <div className=\"col-20 flex flex-wrap\">\n                                        <div className=\"col-4\">\n                                            <div className=\"label\">Medium</div>\n                                            <select className=\"form-control\"\n                                                name=\"mediumId\"\n                                                value={this.state.formControls.mediumId.value} \n                                                onChange={this.onMediumChange}>                                               \n                                                    <option value=\"\" hidden>-SELECT-</option>\n                                                    {\n                                                            this.state.mediums.map((item,index)=>{\n                                                                    return (\n                                                                    <option key={index} value={item.id}>{item.name}</option>\n                                                                    );\n                                                            })\n                                                    }\n                                            </select>\n                                        </div>\n                                        <div className=\"col-5 margin-right--half margin-left\">\n                                            <div className=\"label\">DataSource</div>\n                                            <select className=\"form-control\"\n                                                name=\"ammIdd\"\n                                                value={this.state.formControls.ammId.value} \n                                                onChange={this.dsHandler}>                                               \n                                                    <option value=\"\" hidden>-SELECT-</option>\n                                                    {\n                                                            this.state.datasources.map((item,index)=>{\n                                                                    return (\n                                                                    <option key={index} value={item.ammId}>{item.name}</option>\n                                                                    );\n                                                            })\n                                                    }\n                                            </select>\n                                        </div>\n                                        <div className=\"col-3\">\n                                            <div className=\"label\">Billing On</div>\n                                            <select className=\"form-control\" \n                                                    name=\"billingOn\"\n                                                    value={this.state.formControls.billingOn.value} \n                                                    onChange={this.changeHandler}>                                  \n                                                    <option defaultValue >-choose-</option>\n                                                    <option key=\"1\" value=\"SENT\">Sent</option>\n                                                    <option key=\"2\" value=\"DELIVERED\">Delivered</option>\n                                            </select>\n                                        </div> \n                                        <div className=\"col-3 margin-left margin-right\">\n                                            <div className=\"label\">Billing Credit Type</div>\n                                            <select className=\"form-control\" \n                                                    name=\"bct\"\n                                                    disabled={this.state.isBctDisabled}\n                                                    value={this.state.formControls.bct.value} \n                                                    onChange={this.changeHandler}>                                  \n                                                    <option defaultValue >-choose-</option>\n                                                    <option key=\"1\" value=\"basic\">Basic</option>\n                                                    <option key=\"2\" value=\"premium\">Premium</option>\n                                            </select>\n                                        </div>\n                                        <div className=\"col-3\">\n                                            <div className=\"label\">Price</div>\n                                            <input  type=\"number\"\n                                                    className=\"form-control\"\n                                                    name=\"pricePrCrdt\"\n                                                    value={this.state.formControls.pricePrCrdt.value} \n                                                    onChange={this.changeHandler} >\n                                            </input>\n                                            {\n                                                this.state.formControls.pricePrCrdt.error &&\n                                                <span className=\"form-error\">{this.state.formControls.pricePrCrdt.error}</span>\n                                            }\n                                        </div>\n                                    </div>\n                                    <div className=\"col-20 flex flex-wrap margin-top\">\n                                        <div className=\"col-3\">\n                                            <div className=\"label\">Cost Or Share</div>\n                                            <input  type=\"number\"\n                                                    className=\"form-control\"\n                                                    name=\"cos\"\n                                                    value={this.state.formControls.cos.value} \n                                                    onChange={this.changeHandler} >\n                                            </input>\n                                        </div>\n                                        <div className=\"col-5\">\n                                            <div className=\"label\">Sharing Type</div>\n                                            <select className=\"form-control\"\n                                                name=\"sType\"\n                                                value={this.state.formControls.sType.value} \n                                                onChange={this.changeHandler}>                                               \n                                                <option value=\"\" hidden>-SELECT-</option>\n                                                <option value=\"PER\">Percentage</option>\n                                                <option value=\"C2B\">Cost To Business</option>\n                                            </select>\n                                        </div>\n                                        <div className=\"col-3\">\n                                            <div className=\"label\">Min Price</div>\n                                            <input  type=\"number\"\n                                                    className=\"form-control\"\n                                                    name=\"mp\"\n                                                    value={this.state.formControls.mp.value} \n                                                    onChange={this.changeHandler} >\n                                            </input>\n                                        </div>\n                                    </div>\n                                    {\n                                        this.state.formControls.cos.error &&\n                                        <div className=\"form-error margin-top text--center col-20\">{this.state.formControls.cos.error}</div>\n                                    }\n                                    </div>\n                                    <div className=\"col-2 flex flex-wrap\">\n                                        {\n                                            !this.state.saveSegmentGLoader &&\n                                            <div>\n                                                <div className=\"label\" style={{marginBottom:'3px'}}>&nbsp;</div>\n                                                <button className=\"ui green button margin-left\" onClick={()=>this.assignDatasource()}>\n                                                    Assign\n                                                </button>\n                                            </div>\n                                        }\n                                        {\n                                            this.state.saveSegmentGLoader &&\n                                            <div className=\"col-1 margin-left\">\n                                                <div className=\"label\">&nbsp;</div>\n                                                <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                            </div>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            <DatasourceTable \n                                datasources={this.state.datasourcesAssigned}\n                                allowedSubActions={['edit-AG','delete']}\n                                source={this.props.page}\n                                tableAction={this.tableAction.bind(this)}/>\n\n                            { this.state.openEditDatasource &&\n                                <PopUp title={'Edit Datasource'} togglePopup={this.closeEditDs.bind(this)} >\n                                    <ClientEditDatasource\n                                        formControls={this.state.formControls}\n                                        source={this.props.page}\n                                        closeAction={this.closeEditDs.bind(this)}\n                                        changeHandler={this.changeHandler.bind(this)}\n                                        saveDataSourceLoader={false}\n                                        isBctDisabled={this.state.isBctDisabled}\n                                        submitData={this.editAssignedDataSc.bind(this)}\n                                    />\n                                </PopUp>\n                            } \n                            {\n                                this.state.confirmationPopup &&\n                                <PopUp title={''} togglePopup={this.closeConfirmation.bind(this)} >\n                                    <ConfirmationModal\n                                        confirmationString={\"Are you sure, you want to unassign this Datasource.\"}\n                                        togglePopup={this.closeConfirmation.bind(this)}\n                                        submitData={this.unAssignDs.bind(this)}\n                                        confirmationLoader={false}\n                                        submitCta={\"Yes\"}\n                                    />\n                                </PopUp>\n                            }           \n                        </React.Fragment>\n                    }\n                    {\n                        this.state.active === 4 &&\n                        <React.Fragment>\n                            {\n                                this.props.page === 'Clients' &&\n                                \n                                <div className=\"col-20 flex flex-wrap margin-btm--double\">\n                                   <div className=\"col-6\">\n                                        <div className=\"label\">Services</div>\n                                        <select className=\"form-control\" onChange={this.serviceHandler}>\n                                            <option value=\"\" defaultValue>-SELECT SERVICES-</option>\n                                            {\n                                                this.state.services && this.state.services.map((item,index) =>{\n                                                    return(\n                                                        <option key={index} value={item.code}>{item.name}</option>\n                                                    )    \n                                                })                                                \n                                            }\n                                        </select>\n                                    </div> \n                                \n                                <div className=\"col-6\">\n                                    <div className=\"label\">Price per Unit</div>\n                                    <input  type=\"number\"\n                                            className=\"form-control\"\n                                            name=\"pricePrUnt\"\n                                            value={this.state.srvice.pricePrUnt.value} \n                                            onChange={this.serviceChangeHandler} >\n                                    </input>\n                                    {\n                                        this.state.srvice.pricePrUnt.error &&\n                                        <div className=\"text--center form-error\">{this.state.srvice.pricePrUnt.value}</div>\n                                    }\n                                </div>\n\n                                <div>\n                                    { this.state.srvice.serviceCode && this.state.srvice.serviceCode.value &&\n                                        <React.Fragment>\n                                            <div className=\"label\" style={{marginBottom:'3px'}}>&nbsp;</div>\n                                            <button className=\"ui green button margin-left\" \n                                                onClick={this.verifyServicesClient.bind(this)}\n                                            >\n                                                Assign/Update\n                                            </button>\n                                        </React.Fragment>\n                                    }                                   \n                                </div>\n                                        <div className=\"form-error col-20\">{this.state.srvice.error.value}</div>\n                            </div>\n                            }                   \n                       \n                        {\n                            this.props.page === \"Agency\" &&\n                            <div className={utils.isMobile ? \"col-20 flex flex-direction--col flex-wrap margin-btm--double\" : \"col-20 flex flex-wrap margin-btm--double\"}>\n                                <div className={utils.isMobile ? \"col-19\":\"col-3\"}>\n                                <div className=\"label\">Services</div>\n                                    <select className=\"form-control\" onChange={this.serviceHandler}>\n                                        <option value=\"\" defaultValue>-SELECT SERVICES-</option>\n                                        {\n                                            this.state.services && this.state.services.map((item,index) =>{\n                                                return(\n                                                    <option key={index} value={item.code}>{item.name}</option>\n                                                )    \n                                            })                                                \n                                        }\n                                    </select>\n                                        \n                                </div>\n                                <div className={utils.isMobile ? \"col-20\":\"col-3\"}>\n                                    <div className=\"label\">Price per Unit</div>\n                                    <input  type=\"number\"\n                                            className=\"form-control\"\n                                            name=\"pricePrUnt\"\n                                            value={this.state.srvice && this.state.srvice.pricePrUnt && this.state.srvice.pricePrUnt.value ? this.state.srvice.pricePrUnt.value : null} \n                                            onChange={this.serviceChangeHandler}>\n                                    </input>\n                                </div>\n                                <div className={utils.isMobile ? \"col-20\":\"col-3\"}>\n                                    <div className=\"label\">Clients Per Unit Min Price</div>\n                                    <input  type=\"number\"\n                                            className=\"form-control\"\n                                            name=\"perUnitMinPrice\"\n                                            value={this.state.srvice && this.state.srvice.perUnitMinPrice && this.state.srvice.perUnitMinPrice.value} \n                                            onChange={this.serviceChangeHandler}>\n                                    </input>\n                                </div>\n                                <div className={utils.isMobile ? \"col-20\":\"col-3\"}>\n                                    <div className=\"label\">Agency Cost Or Share</div>\n                                    <input  type=\"number\"\n                                            className=\"form-control\"\n                                            name=\"costOrShare\"\n                                            value={this.state.srvice && this.state.srvice.costOrShare && this.state.srvice.costOrShare.value} \n                                            onChange={this.serviceChangeHandler}>\n                                    </input>\n                                </div>\n                                 \n                                <div className={utils.isMobile ? \"col-19\":\"col-3\"}>\n                                    <div className=\"label\">Sharing Type</div>\n                                    <select\n                                            className=\"form-control\"\n                                            name=\"sharingType\"\n                                            value={this.state.srvice && this.state.srvice.sharingType && this.state.srvice.sharingType.value ? this.state.srvice.sharingType.value : null} \n                                            onChange={this.serviceChangeHandler} >\n                                                <option value=\"\" hidden>-SELECT-</option>\n                                                {/* <option value=\"PER\">Percentage</option> */}\n                                                <option value=\"C2B\">Cost To Business</option>\n                                    </select>\n                                </div>\n                               {\n                                   this.state.srvice && this.state.srvice.serviceCode && this.state.srvice.serviceCode.value &&\n                              \n                                        <div>\n                                            <div className=\"label\" style={{marginBottom:'3px'}}>&nbsp;</div>\n                                            <button className=\"ui green button margin-left\" onClick={()=>this.verifyServices()}>\n                                                Assign/Update\n                                            </button>\n                                        </div>\n                                }\n                                <div className=\"form-error col-20\">{this.state.srvice && this.state.srvice.error && this.state.srvice.error.value}</div>\n                            </div>\n                                \n                        }\n\n                        <ClientServiceTable \n                            page ={this.props.page}\n                            serv={this.state.serv}\n                            id={this.props.info.uid}/>\n                     </React.Fragment>\n                                               \n                    }\n                    {\n                        this.state.active === 6 &&\n                        <React.Fragment>\n                        {/* {\n                            this.props.page === \"Agency\" && */}\n                            <div className=\"col-20 flex flex-wrap margin-btm--double flex-horz-center\">\n                                 <div className=\"label margin-right--half\">Packages</div>\n                                    <select className=\"form-control\" style={{width:\"35%\"}} onChange={(event)=>this.servicePackageHandler(event)}>\n                                        <option value=\"\" hidden>-SELECT PACKAGE-</option>\n                                        {\n                                            this.state.servicePackages && this.state.servicePackages.map((item,index) =>{\n                                                return(\n                                                    <option key={index} value={item.code}>{item.name}</option>\n                                                )    \n                                            })                                                \n                                        }\n                                    </select>                                                               \n                                </div>                              \n                                {\n                                    this.state.opnAssign &&\n                                    <EditPackage\n                                    pkg={this.state.package} \n                                    packgChange = {this.packgChange.bind(this)}\n                                    assign = {this.checkForMinValue.bind(this)}\n                                    handleChange={this.handleChangePkg.bind(this)}/>\n                                }\n                                <ViewPkgDetail id={this.props.info.uid}/>\n                                {/* <AssignedPkg pkg = {this.state.assignedPkg}/> */}\n                        </React.Fragment>\n                    }\n                    {\n                        this.state.active === 5 &&\n                        <React.Fragment>\n                            {\n                                <div className=\"global-loader col-1\">\n                                    <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                </div>\n                            }\n                        </React.Fragment>\n                    }\n                    \n                </div>\n            </React.Fragment>\n        );\n    }\n}","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\ClientsTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SmsProBilling.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignBillingDetails.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignWhatsApp.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\senderId-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignHeaderSMS.js",["737"],"import React from 'react';\nimport PopUp from '../Popup/Popup';\nimport { Icon, Popup } from 'semantic-ui-react';\nimport CircularLoader from '../circular-loader/circular-loader';\nimport {fileUpload} from '../../Services/common-service';\nimport DatePicker from \"react-datepicker\";\nimport utils from '../../Services/utility-service';\nimport SMSProMobile from '../Campaign/SMSProMobile';\nimport CustomSMSTemplate from '../Campaign/CustomSMSTemplate';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\n\nexport default class CreateNewCampaignHeaderSMS extends React.Component{\n\n      constructor(props){\n            super(props);\n            this.state={\n                  file:null,\n                  colmnElement:\"\",\n                  openPopup:false,\n                  submitIdLoader:false,\n                  audienceGrId:null,\n                  inValidNum:[],\n                  showAudience: false,\n                  errorMsg:\"\",\n                  showMPopup: false,\n                  fileFormat:\"\",\n                  gpUpdate: null, \n                  operation:\"\",\n                  formControls:{\n                    file:{\n                        value:null\n                    },\n                    gpName:{\n                        value:null\n                    }\n                    \n                },\n            }  \n            this.showBtn = this.showBtn.bind(this);\n            this.validateMobileNumber =  this.validateMobileNumber.bind(this);\n            this.handleUploadMobile = this.handleUploadMobile.bind(this);\n            this.changeHandler =this.changeHandler.bind(this);        \n            this.chooseAgain = this.chooseAgain.bind(this);\n            this.handleUpload = this.handleUpload.bind(this);\n            this.togglePopup = this.togglePopup.bind(this);\n            this.toggleMobilePopup = this.toggleMobilePopup.bind(this);\n      }\n\n    validateMobileNumber(){\n        const mobileList = this.props.formControls.mobileList.value.split(\",\");\n        let validNum=[];\n        let validCount=0;\n        const numRegex = RegExp(/\\d/g);\n        let nonValidNum = [];\n        let npnValidCount =0;\n        mobileList.forEach((mob,index)=>{                 \n            let mobile = mob.trim();   \n          if(!numRegex.test(mobile)){ \n                nonValidNum[npnValidCount] = mobile+\" ,\";\n                npnValidCount = npnValidCount+1;       \n          }    \n         else if((mobile.length !== 10) || (mobile.match(numRegex).length !== 10) || ((mobile.length !== 10) && mobile.match(numRegex).length !==10)){\n                nonValidNum[npnValidCount] = mobile+\" ,\";\n                npnValidCount = npnValidCount+1;\n              }\n              else{\n                validNum[validCount]=mobile;\n                validCount =validCount+1;\n              }\n        })\n        this.setState({\n            inValidNum: nonValidNum\n        })  \n        return validNum;\n    }\n\n    clickHandler() {\n        //let finalStr = this.state.formControls.templateCont.value.concat(\"${\"+this.state.formControls.colmnElement.value)+\"}\"\n        let finalStr = this.state.formControls.templateCont.value.concat(\" ${\" + this.state.formControls.colmnElement.value + \"}\");\n        this.setState(state => {\n              return {\n                    formControls: {\n                          ...state.formControls, templateCont: {\n                                ...state.formControls.templateCont, value: finalStr\n                          }\n                    }\n              }\n        })\n    }\n\n    handleUploadMobile(){\n        const mobileList =this.validateMobileNumber();\n        \n         // const mobileList = this.props.formControls.mobileList.value.split(\",\");\n          const audienceName = this.props.formControls.audienceGrName.value;\n          if(!audienceName){\n            ToastsStore.error(\"Group Name is required\");\n            return;\n          }\n          var formData = new FormData();\n          formData.append(\"mobileList\",mobileList);\n          formData.append(\"audienceName\",audienceName);\n            fileUpload(formData)\n            .then(response => response.json())\n            .then(data => {\n                this.toggleMobilePopup();\n                this.props.fetchGroupNames(\"upload\");\n                this.setState({\n                    submitIdLoader: false\n                })\n                if (data.success) {\n                    ToastsStore.success(data.message);\n                    this.setState({\n                        audienceGrId: data.audienceGroupId\n                    })\n                } else {\n                    ToastsStore.error(data.message);     \n                }\n            }).catch(error => {\n                console.error(error);\n                this.setState({\n                  submitIdLoader:false\n                })\n                ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n            })\n      }\n\n      changeHandler = event => {\n        this.setState({\n              formControls: {\n                    file:{\n                        value: event.target.files \n                    }\n              }\n        });\n        \n    }\n\n      chooseAgain(){\n            this.setState({\n                file:null\n            })\n      }\n\n    radioChangeHandler(event,params){\n        let v = event.target.value;\n        if(params === \"operation\"){\n            this.setState(state=>{\n                return{                   \n                    formControls:{\n                        ...state.formControls,\n                        file:{\n                            ...state.formControls.file,\n                            value:null\n                        }\n                    },\n                    operation: v,\n                    fileFormat: null,\n                }\n            })\n        }\n        else if(params === \"fileFormat\"){\n            this.setState({\n                fileFormat: event.target.value\n            })\n        } \n    }\n\n    //   handleUpload(){\n    //         var formData = new FormData();\n\n    //               const groupName = document.getElementById('groupName').value;\n    //               const checked = document.getElementById('remember').checked;\n    //               if(!groupName){\n    //                   ToastsStore.error(\"Group Name is required\");\n    //                   return;\n    //               }\n    //               this.setState({\n    //                   submitIdLoader:true\n    //               });\n                  \n    //               formData.append(\"audiences\",this.state.file[0]);\n    //               formData.append(\"encoded\",checked);\n    //               formData.append(\"audienceName\",groupName);           \n    //         fileUpload(formData)\n    //         .then(response => response.json())\n    //         .then(data => {\n    //             this.props.fetchGroupNames(\"upload\");\n    //             this.setState({\n    //                 submitIdLoader: false\n    //             })\n    //             if (data.success) {\n    //                 ToastsStore.success(data.message);\n    //                 let str = (data.rowProcessed > 1) ? data.rowProcessed+\" rows processed\" : data.rowProcessed+\" row processed\";\n    //                 ToastsStore.success(str);\n    //                 this.setState({\n    //                     audienceGrId: data.audienceGroupId\n    //                 })  \n    //                 this.togglePopup();  \n    //             } else {\n    //                 ToastsStore.error(data.message);  \n    //             }\n    //         }).catch(error => {\n    //             this.setState({\n    //               submitIdLoader:false\n    //             })\n    //             ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n    //         })\n    //   }\n\n      togglePopup(){\n          this.setState(state=>{\n                return{\n                  openPopup: !state.openPopup,\n                }     \n          })\n      }\n\n    showBtn(){\n        if(this.props.formControls.audienceGrName.value){\n            this.setState({showAudience: true})\n        }else{\n            this.setState({errorMsg: \"Please Enter Group Name\", showAudience: false})\n        }\n    }\n\n    handleUpload(task){\n        if(task === \"update\"){\n            \n            let audienceId = this.state.gpUpdate;\n            let audiences = this.state.formControls.file.value[0];\n            //const groupName = document.getElementById('gNameUpdate').value; \n            this.setState({\n                submitIdLoader:true\n            });\n            var formData = new FormData();\n            formData.append(\"audiences\",audiences); \n            formData.append(\"agId\",audienceId);\n            formData.append(\"fileFormat\",this.state.fileFormat.toUpperCase());\n        }\n        else if(task === \"fileUpload\"){\n            const groupName = document.getElementById('groupName').value;\n            //let groupId = this.state.gpUpdate;\n            const checked = document.getElementById('remember').checked;\n            if(!groupName){\n                ToastsStore.error(\"Group Name is required\");\n                return;\n            }\n            this.setState({\n                submitIdLoader:true\n            });\n            var formData = new FormData();\n            formData.append(\"audiences\",this.state.formControls.file.value[0]);\n            formData.append(\"encoded\",checked);\n            formData.append(\"fileFormat\",this.state.fileFormat.toUpperCase());\n            formData.append(\"audienceName\",groupName);  \n            // formData.append(\"audienceId\",groupId); \n        }             \n        fileUpload(formData)\n        .then(response => response.json())\n        .then(data => {\n            // console.log(data);\n            this.setState({\n                submitIdLoader: false\n            })\n            if (data.success) {\n                ToastsStore.success(data.message);\n                let str = (data.rowProcessed > 1) ? data.rowProcessed+\" rows processed\" : data.rowProcessed+\" row processed\";\n                ToastsStore.success(str);\n                this.togglePopup();\n                this.fetchGroupNames();\n            } else {\n                ToastsStore.error(data.message);\n            }\n            this.setState({\n                submitIdLoader:false\n            })\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                submitIdLoader:false\n            })\n            ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n        })\n    }\n    \n    toggleMobilePopup(){\n        this.setState( state =>\n            {\n                return{\n                    showMPopup: !state.showMPopup\n                }\n            })\n    }\n    \n    render(){\n    const style = {\n        borderRadius: 0,\n        opacity: 0.85,\n        padding: '1em',\n        \n    } \n        return(\n            <section className=\"card-custom pad--half\" >\n                <article>\n                    <div className=\"ui segment\" style={{border: '1.2px solid rgba(0,0,0,0.1)'}}>\n            <div className=\"ui stackable very relaxed three column grid\">\n                  <div className=\"middle aligned column\">\n                        <div className=\"label\">Select Audience Group</div>\n                        <select name=\"audienceGrId\" className=\"form-control\" value={ this.props.formControls.audienceGrId.value ? this.props.formControls.audienceGrId.value: this.state.audienceGrId} \n                        style={{width:'80%'}} onChange={this.props.audienceChangeHandler}> \n                              <option defaultValue>-Choose-</option>\n                              {\n                                    this.props.groupNameList && this.props.groupNameList.map((item,index)=>{\n                                        return(\n                                            <option key={index} value={item.agId}>{item.name}</option>\n                                        );\n                                    })\n                              }\n                        </select>\n                        {\n                            this.props.formControls.validMobile.value && \n                            <div className=\"margin-top\" style={{color:'#4CAF50'}}><b>No.of Valid Mobile is {this.props.formControls.validMobile.value}</b></div>\n                        } \n                        \n                  </div>\n                  \n                  <div className=\"column\">\n                        \n                        <div className=\"label\">Mobile Number</div> \n                        \n                        <textarea className=\"form-control\" \n                                          name=\"mobileList\" \n                                          placeholder=\"Please place comma after each 10 digit mobile number and please don't precede with country code..\"\n                                          type=\"number\"\n                                          onClick={this.toggleMobilePopup} \n                                        //   onChange={()=>{this.setState({showMPopup: true}); console.log(this.state.showMPopup)}} \n                                          style={{height:'85px',width:'90%',resize:'none'}}/>       \n                        {\n                            this.state.showMPopup &&\n\n                            <PopUp title=\"Enter Mobile Number\" togglePopup={this.toggleMobilePopup}>\n                                <SMSProMobile\n                                    formControls={this.props.formControls}\n                                    changeHandler={this.props.changeHandler}\n                                    showBtn={this.showBtn}\n                                    inValidNum={this.state.inValidNum}\n                                    showAudience={this.state.showAudience}\n                                    errorMsg={this.state.errorMsg}\n                                />\n                                <div className=\"dialog-footer pad\">                        \n                                    <div>\n                                        <button \n                                            className=\"ui button\" \n                                            onClick={this.toggleMobilePopup}>\n                                                    Close\n                                        </button>\n                                        {   this.state.showAudience && \n                                            <button className=\"ui green button\" \n                                                // style={{marginTop:'3%', width:'90%'}} \n                                                onClick={this.handleUploadMobile}>ADD </button>\n                                        }\n                                    </div>                                           \n                                </div>                          \n                            </PopUp>      \n                        }  \n                                                  \n                  </div>\n                        <div style={{left:'30%'}} className=\"ui vertical divider\">Or</div>\n                  <div className=\"middle aligned column\">\n                        <button onClick={this.togglePopup} style={{marginLeft:'22px'}} class=\"ui icon left labeled blue big button\">\n                            <i aria-hidden=\"true\" class=\"upload icon\"></i>Upload Audience\n                        </button>\n                 </div>\n            </div>\n            <div style={{left:'67%'}} className=\"ui vertical divider\">Or</div>\n\n            {\n            this.state.openPopup &&                    \n                  <PopUp title={'Upload Audience'} togglePopup={this.togglePopup}>\n                          <article className=\"padding-all-12 col-20\">\n                                <div className=\"label\">Please select one of the operation</div>\n                                <label for=\"fileUpload\" className=\"radioBtn\">\n                                    <input type=\"radio\" name=\"fileUpload\" checked={this.state.operation === \"fileUpload\"} \n                                    value=\"fileUpload\"\n                                    id=\"fileUpload\" \n                                    onChange={(e)=>{this.radioChangeHandler(e,\"operation\")}}/>Add New Audience\n                                    <span className=\"checkmark1\"></span>\n                                </label>\n                                <label for=\"fileUpdate\" className=\"radioBtn\">\n                                    <input type=\"radio\" name=\"fileUpdate\" checked={this.state.operation === \"fileUpdate\"} \n                                    id=\"fileUpdate\" \n                                    value=\"fileUpdate\" onChange={(e)=>{this.radioChangeHandler(e,\"operation\")}}\n                                    // onClick={props.loadData}\n                                    // disabled ={(props.formControls.audienceGrId.value || props.audienceGrId) ? false: true}\n                                    />Update Audience\n                                    \n                                    <span className=\"checkmark1\"></span>\n                                </label>\n                            </article> \n                            {\n                            this.state.operation === \"fileUpload\" &&\n                            <div className=\"file-upload--card pad--half flex flex-direction--col\">\n                                <div className=\"section-title\">File Upload</div>\n                                <div className=\"col-20 margin-top--half margin-btm--half\">\n                                    <div className=\"label\">Group Name</div>\n                                    <input type=\"text\" className=\"form-control\" id=\"groupName\" style={{width:\"100%\"}}/>\n                                    <div className=\"margin-top--half\">\n                                        <input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\" />\n                                        <span className=\"label\" style={{verticalAlign:'text-top'}}>SHA Encryption Required</span>\n                                    </div>\n                                </div>\n                               \n                                <article className=\"margin-btm--half\">            \n                                    <div><b>Please select format</b></div>\n                                    <form className=\"flex align-space-between\" style={{border:\"1px solid rgb(204, 204, 204)\",borderRadius: \"5px\",padding:\"5px\" }}>\n                                        <span>\n                                            <input type=\"radio\" id=\".xls\" value=\".xls\" name=\".xls\" checked={this.state.fileFormat === \".xls\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                            <label for=\".xls\">XLS</label>\n                                            <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xls Template</u></b></a></div>\n                                        </span>\n                                        <span>\n                                            <input type=\"radio\" id=\".xlsx\" value=\".xlsx\" name=\".xlsx\" checked={this.state.fileFormat === \".xlsx\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                            <label for=\".xlsx\">XLSX</label>\n                                            <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_XLSX.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xlsx Template</u></b></a></div>\n                                        </span>\n                                        <span>\n                                            <input type=\"radio\" id=\".csv\" value=\".csv\" name=\".csv\" checked={this.state.fileFormat === \".csv\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                            <label for=\".csv\">CSV</label>\n                                            <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download csv Template</u></b></a></div>\n                                        </span>\n                                    </form>\n                                </article> \n                                {\n                                    !this.state.formControls.file.value && this.state.fileFormat &&\n                                    \n                                        <form>\n                                            <input type=\"file\" \n                                                accept={`${this.state.fileFormat}`}\n                                                className=\"form-control\" \n                                                name=\"file\" \n                                                id=\"file\"\n                                                style={{width:\"100%\"}}\n                                                onChange={this.changeHandler.bind(this)} /> \n                                                <div className=\"col-20\">\n                                                    <p style={{color:\"green\"}}>Please upload {`${this.state.fileFormat}`} file only</p> \n                                                    {/* <a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\" className=\"\"><b><u>Download csv Template</u></b></a> */}\n                                                </div>                            \n                                        </form>\n                                }                                \n                                {\n                                    this.state.formControls.file.value && \n                                    <div className=\"label\">{this.state.formControls.file.value[0].name}</div>\n                                }\n                                {\n                                    this.state.submitIdLoader &&\n                                    <div>\n                                            <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                    </div>\n                                }\n                                {\n                                    !this.state.submitIdLoader && this.state.formControls.file.value && \n                                    <div className=\"margin-top--half\">\n                                        <button className=\"btn btn-fill btn-primary\" onClick={()=>this.chooseAgain()}>Choose Again</button>\n                                        <button className=\"btn btn-fill btn-success margin-left--half\" onClick={()=>this.handleUpload(\"fileUpload\")}>Upload</button>\n                                    </div>\n                                } \n                            </div>\n                        }\n                     {\n                            this.state.operation === \"fileUpdate\" &&\n                            <article className=\"file-upload--card pad--half flex flex-direction--col\">                    \n                            <div className=\"col-14 margin-btm--half\">\n                                <div className=\"label\">Group Name</div>\n                                <select className=\"form-control\" style={utils.isMobile ? {width: \"300%\"}: {width:\"125%\"}} name=\"gpUpdate\" onChange={(e)=>this.setState({gpUpdate: e.target.value})} id=\"gNameUpdate\">\n                                    <option>Choose...</option>\n                                    {\n                                        this.props.groupNameList.map((item,index)=>{\n                                            return(\n                                                <option key={index} value={item.agId}>{item.name}</option>\n                                            );\n                                        })\n                                    }\n                                </select>                               \n                            </div>\n                            { this.state.gpUpdate &&\n                            <article className=\"margin-btm--half\">            \n                                <div><b>Please select format</b></div>\n                                <form className=\"flex align-space-between\" style={{border:\"1px solid rgb(204, 204, 204)\",borderRadius: \"5px\",padding:\"5px\" }}>\n                                    <span>\n                                        <input type=\"radio\" id=\".xls\" value=\".xls\" name=\".xls\" checked={this.state.fileFormat === \".xls\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                        <label for=\".xls\">XLS</label>\n                                        <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xls Template</u></b></a></div>\n                                    </span>\n                                    <span>\n                                        <input type=\"radio\" id=\".xlsx\" value=\".xlsx\" name=\".xlsx\" checked={this.state.fileFormat === \".xlsx\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                        <label for=\".xlsx\">XLSX</label>\n                                        <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_XLSX.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download xlsx Template</u></b></a></div>\n                                    </span>\n                                    <span>\n                                        <input type=\"radio\" id=\".csv\" value=\".csv\" name=\".csv\" checked={this.state.fileFormat === \".csv\"} onChange={(e)=>{this.radioChangeHandler(e,\"fileFormat\")}} style={{marginRight:\"5px\"}}/>\n                                        <label for=\".csv\">CSV</label>\n                                        <div><a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\" target=\"_blank\" rel=\"noopener noreferrer\" className=\" \"><b><u>Download csv Template</u></b></a></div>\n                                    </span>\n                                </form>\n                            </article> \n                            }\n                                {\n                                    !this.state.formControls.file.value && this.state.fileFormat &&\n                                    <form>\n                                        <input type=\"file\" \n                                            accept={`${this.state.fileFormat}`} \n                                            className=\"form-control\" \n                                            name=\"file\" \n                                            id=\"file\"\n                                            onChange={this.changeHandler.bind(this)}\n                                            style={{width:\"100%\"}} />  \n                                             <div className=\"col-20\">\n                                                <p style={{color:\"green\"}}>Please upload {`${this.state.fileFormat}`} file only</p>      \n                                            </div>                           \n                                    </form>\n                                }\n                                {\n                                    this.state.formControls.file.value && \n                                    <div className=\"label\">{this.state.formControls.file.value[0].name}</div>\n                                }\n                                {\n                                    this.state.submitIdLoader &&\n                                    <div>\n                                            <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                    </div>\n                                 }\n                                {\n                                    this.state.gpUpdate && this.state.formControls.file.value && \n                                    <div className=\"margin-top--half\">\n                                        <button className=\"btn btn-fill btn-primary\" onClick={()=>this.chooseAgain()}>Choose Again</button>\n                                        <button className=\"btn btn-fill btn-green margin-left--half\" onClick={()=>this.handleUpload(\"update\")}>UPDATE</button>\n                                    </div>\n                                }\n                            \n                            </article>\n                        }\n                  </PopUp>\n            }      \n      </div>\n            </article>\n\n\n            <CustomSMSTemplate \n               formControls = {this.props.formControls}\n               changeHandler = {this.props.changeHandler}\n               loadData = {this.props.loadData}\n               audienceGrId = {this.state.audienceGrId}\n               langChangeHandle = {this.props.langChangeHandle}\n               templates = {this.props.templates}\n               smsChangeHandler={this.props.smsChangeHandler}\n               addURL={this.props.addURL}\n               contentHandler = {this.props.contentHandler}\n               messageNum={this.props.messageNum}\n               canTestSms={this.props.canTestSms}\n               checkedHandler = {this.props.checkedHandler.bind(this)}\n               audienceData={this.props.audienceData}\n               clickHandler={this.props.clickHandler}\n            />\n                \n            <div className=\"flex flex-direction--row col-20\">\n                <div className=\"col-9 padding-all-12\">\n                        <div className=\"label\">Target Audience Count</div>\n                        <input  type=\"number\"\n                                className=\"form-control\"\n                                name=\"targetAudienceCount\"\n                                value={this.props.formControls.targetAudienceCount.value}\n                                onChange={this.props.changeHandler}>\n                        </input>\n                        {\n                            this.props.formControls.targetAudienceCount.error &&\n                            <span className=\"form-error\">{this.props.formControls.targetAudienceCount.error}</span>\n                        }\n                </div>\n            </div> \n            <article className=\"flex flex-direction--row\">\n                <div className=\"col-9 padding-all-12\">\n                    <div className=\"label\">Schedule Date &nbsp;\n                        <Popup\n                            trigger={<Icon name='info circle' color=\"blue\" style={{verticalAlign: 'super'}}/>}\n                            content='The date on which the campaign needs to be executed.'\n                            position='top center'\n                            style={style}\n                            inverted\n                        /></div>\n                    <DatePicker\n                    selected={this.props.formControls.date.value}\n                    placeholderText=\"Click to select Date\"\n                    minDate={new Date()}\n                    onChange={this.props.dobChange}\n                    peekNextMonth\n                    showMonthDropdown\n                    showYearDropdown\n                    dropdownMode=\"select\"\n                    className=\"col-20\"\n                    name=\"date\"\n                    />\n                    {\n                        this.props.formControls.date.error &&\n                        <span className=\"form-error\">{this.props.formControls.date.error}</span>\n                    }\n                    </div>  \n                    <div className=\"col-9 margin-left--auto padding-all-12 \">\n                        <div className=\"label\">Schedule Time&nbsp;\n                                <Popup\n                                    trigger={<Icon name='info circle' color=\"blue\" style={{verticalAlign: 'super'}}/>}\n                                    content='The time at which the campaign needs to be executed.'\n                                    position='top center'\n                                    style={style}\n                                    inverted\n                                /></div>\n                        <select name=\"time\" className=\"form-control\" required=\"\" value={this.props.formControls.time.value} onChange={this.props.changeHandler}>\n                                <option value=\"\" defaultValue hidden>Select Time</option>\n                                <option value=\"09:00 AM - 11:00 AM\">09:00 AM - 11:00 AM</option>\n                                <option value=\"11:00 AM - 13:00 PM\">11:00 AM - 13:00 PM</option>\n                                <option value=\"13:00 PM - 15:00 PM\">13:00 PM - 15:00 PM</option>\n                                <option value=\"15:00 PM - 17:00 PM\">15:00 PM - 17:00 PM</option>\n                                <option value=\"17:00 PM - 19:00 PM\">17:00 PM - 19:00 PM</option>\n                                <option value=\"19:00 PM - 21:00 PM\">19:00 PM - 21:00 PM</option>\n                        </select>\n                        {\n                                this.props.formControls.time.error &&\n                                <span className=\"form-error\">{this.props.formControls.time.error}</span>\n                        }\n                </div>\n            </article>\n                  \n             \n             <ToastsContainer position={ToastsContainerPosition.TOP_RIGHT} lightBackground store={ToastsStore}/> \n\n              </section>\n           \n        );\n    }\n}","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Content\\Content.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Revenue\\Revenue.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\template-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\ManagePackageDetail.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\IVR\\IVRFilter.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\IVR\\IVRtable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\CampaignSummary.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignProcessSMS.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignHeader.js",["738","739"],"import React from \"react\";\n// import { Icon, Popup } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport \"../../Containers/Campaign/Campaign.css\";\nimport CreateCampaign from \"../../Containers/Campaign/CreateCampaign\";\nimport CampaignMainSource from \"./automationcampaign/CampaignMainSource\";\nfunction CreateNewCampaignHeader(props) {\n  return (\n    <article>\n      <article className=\"card-custom  pad\">\n        {props.isEdit && <h4 className=\"ui header\">EDIT CAMPAIGN</h4>}\n        {!props.isEdit && <h4 className=\"ui header\">CREATE NEW CAMPAIGN</h4>}\n      </article>\n      {/* <CreateCampaign /> */}\n      \n      <div className=\"card-custom pad--half\">\n        {props.type === \"WhatsApp\" && (\n          <div className=\"col-20 flex align-space-around algn-vert-center\">\n            <div style={{ width: \"30%\" }}>\n              <div className=\"label\">Campaign Type</div>\n              <Select\n                style={{ width: \"35%\" }}\n                isClearable={true}\n                isRtl={false}\n                isSearchable={true}\n                placeholder=\"Select or Search..\"\n                name=\"campaignType\"\n                // value={this.state.formControls.eventType}\n                onChange={(event) => {\n                  props.typeChangeHandler(event);\n                }}\n                options={props.eventType([\n                  \"GENERIC\",\n                  \"LEAD\",\n                  \"SMS Pro\",\n                  \"WhatsApp\",\n                ])}\n              />\n            </div>\n            <Link to=\"/service/package\">\n              <button className=\"btn btn-fill btn-success\">\n                Buy WhatsApp Package\n              </button>\n            </Link>\n          </div>\n        )}\n        {props.type !== \"WhatsApp\" && (\n          <div className=\"col-9 margin-left--auto margin-right--auto\">\n            <div className=\"label\">Campaign Type</div>\n            <Select\n              isClearable={true}\n              isRtl={false}\n              isSearchable={true}\n              placeholder=\"Select or Search..\"\n              name=\"campaignType\"\n              // value={this.state.formControls.eventType}\n              onChange={(event) => {\n                props.typeChangeHandler(event);\n              }}\n              options={props.eventType([\n                \"GENERIC\",\n                \"LEAD\",\n                \"SMS Pro\",\n                \"WhatsApp\",\n              ])}\n            />\n          </div>\n        )}\n        {props.type === \"GENERIC\" && (\n          <div className=\"col-20  flex flex-direction--row flex-wrap\">\n            <div className=\"col-9 padding-all-12\">\n              <div className=\"label\">Medium</div>\n              <select\n                className=\"form-control\"\n                name=\"medium\"\n                disabled={props.isEdit}\n                value={props.formControls.medium.value}\n                onChange={props.onMediumChange}\n              >\n                <option defaultValue>-Select Medium-</option>\n                {props.mediums.map((item, index) => {\n                  return (\n                    <option key={index} value={item.id}>\n                      {item.name}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"col-9 margin-left--auto padding-all-12\">\n              <div className=\"label\">Datasource</div>\n              <select\n                className=\"form-control\"\n                name=\"ammId\"\n                disabled={props.isEdit}\n                value={props.formControls.ammId.value}\n                onChange={props.onDatasourceChangeHandler}\n              >\n                <option defaultValue>-SELECT Datasource-</option>\n                {props.datasource.map((item, index) => {\n                  return (\n                    <option key={index} value={item.ammId + \",\" + item.bamId}>\n                      {item.name}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n        )}\n      </div>\n    </article>\n  );\n}\n\nexport default CreateNewCampaignHeader;\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CreateNewCampaignProcess.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\DailySummaty.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\SMSFilter.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSReports\\AllTxns.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Pagination\\Pagination.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\segment-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SegmentGroup\\EditSegment.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\SegmentGroup\\CreateSegmentGroups.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\JourneyDesigner\\RetargettingSMSPro.js",["740","741"],"import React from 'react';\nimport Select from 'react-select';\nimport DatePicker from \"react-datepicker\";\nimport utils from '../../../Services/utility-service';\nimport {getDetailCampaign} from '../../../Services/campaign-service';\nimport Popup from '../../Popup/Popup';\n//import { getTemplates } from '../../../Services/template-service';\n//import SMSPopup from '../../../Containers/LeadDetail/SMSPopup';\nimport CustomSMSTemplate from '../CustomSMSTemplate';\nimport { getAudienceData } from '../../../Services/common-service';\nimport EmailPopup from '../../../Containers/LeadDetail/EmailPopup';\nimport CircularLoader from '../../circular-loader/circular-loader';\nimport {smsDropdown,getAllEmail,smsJourney} from '../../../Services/lead-service';\nimport { ToastsContainer, ToastsStore, ToastsContainerPosition } from 'react-toasts';\n\nexport class RetargettingSMSPro extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            tempDs: '',\n        //    templates:[],\n            showDsChangeConf: false,\n            showLangChangeConf: false,\n            messageNum:0,\n            audienceData:[],\n            submissionLoader: false,\n            smsTemplateId: null,\n            emailTemplateId:null,\n            smsTemplates: null,\n            specificTemplates:null,\n            specificEmailTemplates: null,\n            emailTemplates:[],\n            date:null,\n            delay:null,\n            delayUnit: null,\n            type:\"delay\",\n            eventType: null,\n            notification:null,\n            formControls:{\n                SMStype: {\n                    value: \"simpleSMS\",\n                    error: \"\"\n                },\n                audienceGrId: {\n                    value: \"\",\n                    error: \"\"\n                },\n                language:{\n                    value:\"en\",\n                    error:\"\"\n                },\n                template:{\n                    value:\"\",\n                    error:\"\"\n                },\n                longurl: {\n                    value: \"\"\n                },\n                templateCont:{\n                    value:'',\n                    error:''\n                },\n                scheduleNow:{\n                    value: false\n                },\n              targetAudienceCount:{\n                value:\"\",\n                error:\"\"\n          },\n            }\n        }  \n        this.loadData = this.loadData.bind(this);\n        this.eventType = this.eventType.bind(this);\n        this.resetRadio =this.resetRadio.bind(this);\n        this.dateChange = this.dateChange.bind(this);\n        this.smsDropdown = this.smsDropdown.bind(this); \n        this.selectChange =this.selectChange.bind(this);\n    //    this.handleChange = this.handleChange.bind(this);\n        this.calculateDelay = this.calculateDelay.bind(this);\n        this.sendNotification=this.sendNotification.bind(this);\n        this.notificationNull = this.notificationNull.bind(this);   \n        this.handleChangeDelay = this.handleChangeDelay.bind(this);\n        this.delayChangeHandler =this.delayChangeHandler.bind(this);\n        this.radioChangeHandler = this.radioChangeHandler.bind(this);\n        this.fetchDetailCampaign = this.fetchDetailCampaign.bind(this);\n        this.compareNotification = this.compareNotification.bind(this);\n        this.emailIDChangeHandler = this.emailIDChangeHandler.bind(this);\n        this.selectChangeNotification = this.selectChangeNotification.bind(this);\n        \n    }\n\n    radioChangeHandler(event){\n        let value = event.target.value;\n        this.setState({\n            type:value\n        },this.resetRadio())\n    }\n    \n    resetRadio(d){\n        \n        let dat = this.state.date;\n        let del = this.state.delay;\n        if(this.state.type === \"delay\"){\n            dat = \"\";\n            this.setState({\n                date: dat,\n            })\n\n        }\n        else if(this.state.type === \"date\"){\n            del = 0;\n            this.setState({\n                delay: del\n            })\n        }\n        else if( this.state.type === \"immediately\"){\n            dat = \"\";\n            del=0;\n            this.setState({\n                date: dat,\n                delay: del\n            })\n        }\n        if(d===\"date\"){\n\n            return this.state.date;\n        }\n        else if(d === \"delay\"){\n\n            return this.state.delay;\n        }\n    }\n\n    calculateDelay(){\n        \n        let d = this.state.delay;\n        let delay = this.resetRadio(\"delay\");\n        if(delay !== 0){\n            if(this.state.delayUnit === \"sec\"){\n                delay = d\n            }\n            else if (this.state.delayUnit === \"min\"){\n                delay = 60*d;\n            }\n            else if(this.state.delayUnit === \"hour\"){\n                delay = 3600*d;\n            }\n            else if(this.state.delayUnit === \"day\"){\n                delay = 24*3600*d;\n            }\n            else{\n                ToastsStore.error(\"Please Select Delay Unit!!!\");\n                return;\n            }\n        }\n   \n        return delay;\n    }\n\n    delayChangeHandler(event){\n       let value=event.target.value;\n       this.setState({\n        delayUnit: value\n       })\n    }\n\n    eventType(data){\n        let arr = [];\n        if(data && data.length>0){\n            data.forEach(e=> {\n                let obj = {\n                    \"value\": e, \n                    \"label\": e \n                }\n                arr.push(obj);\n            });   \n        }\n        return arr;\n    }\n\n    selectChange(event){\n        this.setState({\n            eventType: event.value\n        })\n    }\n\n    selectChangeNotification(event){\n        let v = event.value;\n        this.setState({\n            notification:v\n    },this.compareNotification)}\n        \n    compareNotification(){\n        if(this.state.notification === \"SMS\"){\n            this.smsDropdown();\n            this.fetchDetailCampaign();\n        }\n        else if(this.state.notification === \"EMAIL\"){\n            this.fetchAllEmail();\n        } \n    }   \n\n    fetchAllEmail(){\n        let body={\n            start: 0,\n            maxResult: 100\n        }\n        this.setState({\n            submissionLoader: true\n        })\n        getAllEmail(body)\n        .then(response => response.json())\n        .then(data =>{\n            if(data.success){\n                this.setState({\n                    emailTemplates: this.formatEmailTempl(data.emailTemplates),\n                    submissionLoader: false   \n                })\n                ToastsStore.success(data.message);\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        // .catch(e=>{\n        //     //ToastsStore.error(\"Something Went Wrong.!!! Please Try Again Later.\");\n        //     ToastsStore.error(\"Ye kya h?.\");\n        //     this.setState({\n        //         submissionLoader: false\n        //     })\n        // })\n    }\n\n    formatEmailTempl(email){\n        email.forEach(e => {e.error = \"\";});        \n        return email;\n    }\n\n    emailIDChangeHandler(event){\n        this.setState({\n            emailTemplateId: event.target.value\n        },this.particularEmailTemplate.bind(this))  \n    }\n\n    emailBodyChanegHandler(event){\n        let t = this.state.specificEmailTemplates;\n        t=[{name:\"email\",subjectTemplate:\"\",bodyTemplate:\"\"}];\n        let name=event.target.name;\n         t[name] = event.target.value;\n        this.setState({\n            specificEmailTemplates: {\n                ...this.state.specificEmailTemplates,\n                [name]:event.target.value\n            }\n        })\n    }\n\n    handleChangeDelay(event){\n        const value = event.target.value;\n        this.setState({\n            delay: value\n        })\n\n    }\n\n    particularEmailTemplate(){\n        let emailTemplate = this.state.emailTemplates && this.state.emailTemplates.filter(item=>{\n            return parseInt(item.templateId) === parseInt(this.state.emailTemplateId)\n        })                \n        this.storeParticularTemplate(emailTemplate[0]);\n    }\n\n    storeParticularTemplate(email){\n        this.setState({\n            specificEmailTemplates: email\n        })\n    }\n\n    emailChangeHandler(event){\n        let eTempl = this.state.specificEmailTemplates;\n        let name = event.target.name;\n        for(let p in eTempl){\n            if(name === p){       \n                eTempl[p] = event.target.value;\n            }\n        }\n        this.setState({\n            specificEmailTemplates: eTempl\n        })\n    }\n\n    changeHandler = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n        \n              this.setState({\n                    formControls: {\n                          ...this.state.formControls,\n                          [name]: {\n                                ...this.state.formControls[name],\n                                value\n                          }\n                    }\n              });\n    }\n\n    fetchDetailCampaign(){\n        let code = JSON.parse(localStorage.getItem(\"code\"));\n        const body={\n            code: code,\n        }\n        getDetailCampaign(body)\n        .then(response=>response.json())\n        .then((data)=>{\n            if(data.success){     \n                this.setState(state=>{\n                    return{\n                       // detailCampaign: data.audienceGroupId,\n                        formControls:{\n                            ...state.formControls,\n                            audienceGrId:{\n                                ...state.formControls.audienceGrId,\n                                value:data.audienceGroupId\n                            }\n                        }\n                    }\n                   // type: (this.props.location.pathname === '/update-stats-campaign') ? 'update' : 'view'\n                });\n                //this.loadData();\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n\n//     fetchTemplates() {\n//         const body = {\n//               businessUid: this.state.businessUid\n//         }\n//         getTemplates(body)\n//               .then(response => response.json())\n//               .then(data => {\n//                     //let data = { \"success\": true, \"message\": \"Success\", \"allowedActions\": [], \"smsTemplates\": [ { \"smsTemplateId\": 2, \"templateBody\": \"new template body\", \"smsType\": \"PRML\", \"smsChannelId\": 1, \"name\": \"sms-template\", \"dndHourBlockingEnabled\": false, \"dndScrubbingOn\": true, \"senderId\": 1, \"businesUid\": \"70005000789\", \"lang\": \"EN\", \"url\": \"master\" }, { \"smsTemplateId\": 3, \"templateBody\": \"new template body\", \"smsType\": \"PRML\", \"smsChannelId\": 1, \"name\": \"sms-template\", \"dndHourBlockingEnabled\": false, \"dndScrubbingOn\": true, \"senderId\": 1, \"businesUid\": \"70005000789\", \"lang\": \"EN\", \"url\": \"master\" } ] };\n//                     if (data.success) {\n//                           this.setState({\n//                                 templates: data.smsTemplates,\n//                           })\n//                     }\n//               })\n//               .catch(error => {\n//                     console.log(error);\n//                     this.setState({\n//                           loadingData: false\n//                     })\n//               })\n//   }\n\n    langChangeHandle = (event) => {\n        let temp1 = this.state.formControls;\n        if(!!temp1.language.value){\n            this.setState({\n                    tempDs: event.target.value,\n                    showLangChangeConf: true\n            })\n            return;\n        }\n        temp1.language.value = event.target.value;\n        temp1.template.value = \"\";\n        temp1.templateCont.value = \"\";\n        this.setState({\n            formControls: temp1,\n            messageNum: 0\n        })\n    }\n\n    clearLangData = () => {\n        let temp1 = this.state.formControls;\n        temp1.language.value = this.state.tempDs;\n        temp1.template.value = \"\";\n        temp1.templateCont.value = \"\";\n        this.setState({\n            formControls: temp1,\n            messageNum: 0,\n            showLangChangeConf: false\n        })\n    }\n\n    loadData() {\n        const body = {\n              audienceGroupId: this.state.formControls.audienceGrId.value\n        };\n        if (!this.state.formControls.audienceGrId.value) {\n              // ToastsStore.error(\"Please Select Audience or Upload Audience First\");\n              return;\n        }\n        getAudienceData(body)\n              .then(response => response.json())\n              .then(data => {\n                    if (data.success) {\n                          this.setState({\n                                audienceData: data.audienceColumnNames\n                          })\n                          ToastsStore.success(data.message);\n                    } else {\n                          ToastsStore.error(data.message);\n                    }\n\n              }).catch(error => {\n                    console.log(error);\n                    ToastsStore.error(\"Something went wrong, Please Try Again Later \");\n                    \n              })\n    }\n \n    // specificTemplates(){\n    //     let id = this.state.smsTemplateId;\n    //     let specificTem = this.state.smsTemplates.filter( item => {\n    //             return item.smsTemplateId === parseInt(id);\n    //         }\n    //     )\n       \n    //     if(specificTem[0] && specificTem[0].templateBody){\n    //         this.setState({\n    //             specificTemplates:specificTem[0].templateBody\n    //         });      \n    //     }else if(specificTem[0] && !specificTem[0].templateBody){\n    //         this.setState({\n    //             specificTemplates:\".\"\n    //         })\n    //     }\n    //     else{        \n    //         this.setState({\n    //             specificTemplates: null\n    //         })    \n    //     }\n    // }\n\n    verifyEmailDetails(){\n        let t=this.state.specificEmailTemplates;\n        if(!t){\n            ToastsStore.error(\"Please Select Email Template. If Email Template is unavailable, than please specify body.\");\n            return;\n        }\n        if(!this.state.specificEmailTemplates.bodyTemplate){\n            t.error = \"Email Content is mandatory\";\n            ToastsStore.error(\"Email Content is mandatory\");\n            this.setState({\n                specificEmailTemplates: t\n            })\n            return;\n        }\n        else if(!t.subjectTemplate){\n            t.error = \"Subject is mandatory\";\n            ToastsStore.error(\"Subject is mandatory\");\n            this.setState({\n                specificEmailTemplates: t\n            })\n            return;\n        }\n        else{\n            t.error = null;\n            this.setState({\n                specificEmailTemplates: t\n            })\n        }\n        this.verifyDetails();\n    }\n\n    // handleChange(event){     \n    //     this.setState({\n    //         smsTemplateId:event.target.value,\n    //         specificTemplates:null\n    //     },()=>this.specificTemplates())          \n    // }\n\n    smsDropdown(){\n        const body={\n            start : parseInt(0),\n            maxResult : parseInt(100)\n        }\n        smsDropdown(body)\n        .then(response => response.json())\n        .then(data =>{\n            if(data.success){\n                ToastsStore.success(data.message);\n                this.setState({\n                    smsTemplates:data.smsTemplates\n                });\n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error =>{\n            this.setState({\n                submissionLoader:false \n            })\n            ToastsStore.error(\"Somethig went wrong, please try again later !!!\");\n        })\n    }\n\n    smsBodyChanegHandler(event){\n        this.setState({\n            specificTemplates: event.target.value\n        })\n    }\n\n    // smsContentChanegHandler(event){\n    //     let value = event.target.value;\n    //     let id = this.state.smsTemplateId;\n    //     let smsTem = this.state.smsTemplates\n    //     smsTem.forEach(sms=>{\n    //         if(parseInt(sms.smsTemplateId) === parseInt(id)){\n    //             sms.templateBody =value; \n    //         }\n    //     })\n\n    //     this.setState({\n    //         smsTemplates: smsTem\n    //     },()=>this.specificTemplates())   \n    // }\n\n    notificationNull() {                                                                                 \n        this.setState({\n            notification: null,\n        })\n    }\n\n    dateChange = val => {\n        this.setState({\n            date: val\n        })\n    }\n\n    clickHandler() {\n        //let finalStr = this.state.formControls.templateCont.value.concat(\"${\"+this.state.formControls.colmnElement.value)+\"}\"\n        let finalStr = this.state.formControls.templateCont.value.concat(\" ${\" + this.state.formControls.colmnElement.value + \"}\");\n        this.setState(state => {\n              return {\n                    formControls: {\n                          ...state.formControls, templateCont: {\n                                ...state.formControls.templateCont, value: finalStr\n                          }\n                    }\n              }\n        })\n    }\n\n    checkedHandler(event){\n        let value=event.target.checked;\n       \n           this.setState( state =>{\n                 return{\n                       formControls:{\n                             ...state.formControls,scheduleNow:{\n                                   ...state.formControls.scheduleNow,value\n                             }  \n                       }    \n                 }\n           })\n    }\n\n    verifyDetails(){\n    \n        let date =  this.resetRadio(\"date\");\n        let delay = this.resetRadio(\"delay\");\n        if(!this.state.eventType){\n            ToastsStore.error(\"Event Type is mandatory!!!\");\n            return;\n        }\n        else if(!date && !delay && this.state.type !== \"immediately\"){\n            ToastsStore.error(\"Either provide delay or schedule time/date for event\");\n            return;\n        }\n        else if(this.state.type === \"date\" && !date){\n            ToastsStore.error(\"Please provide schedule time/date for event\");\n            return;\n        }\n        else if(this.state.type === \"delay\" && !delay){\n            ToastsStore.error(\"Delay Field shoud not be empty!!!\");\n        }\n        else if(!this.state.formControls.templateCont.value && !this.state.specificEmailTemplates.bodyTemplate){\n            ToastsStore.error(this.state.notification+\" body/content should not be empty\");\n            return;\n        }\n        \n        this.sendNotification();\n    }\n\n    sendNotification(){\n        if(this.state.type === \"delay\"){\n            if(!this.state.delayUnit){\n                ToastsStore.error(\"Please Select Delay Unit\");\n                return;\n            }\n        }\n        this.setState({\n            submissionLoader: true\n        })\n      \n        let code = JSON.parse(localStorage.getItem(\"code\"));\n        const body ={\n                campaignCode: code,\n                eventType: this.state.eventType ? this.state.eventType: null,\n                delay: {\n                    // delayReferenceType: \"CAMPAIGN_CODE\",\n                    delayReferenceType: null,\n                    delaySeconds: this.state.delay ? this.calculateDelay() : null,\n                },\n                type: this.state.type ? this.state.type : null,\n                scheduledTime: this.state.date ? this.resetRadio(\"date\") : null,\n                notifications: [\n                    {\n                        subject: this.state.notification === \"EMAIL\" ? this.state.specificEmailTemplates && this.state.specificEmailTemplates.subjectTemplate : null,\n                        content: this.state.notification === \"SMS\" ? this.state.formControls.templateCont.value : this.state.specificEmailTemplates.bodyTemplate,  \n                        notificationType: this.state.notification ? this.state.notification: null,     \n                        templateId: this.state.notification === \"SMS\" ? this.state.smsTemplateId :  this.state.emailTemplateId,\n                        lang: this.state.formControls.language.value ? this.state.formControls.language.value : null,\n                        longUrl: this.state.formControls.longurl.value ? this.state.formControls.longurl.value : null\n                    }\n                ],\n                parentJourneyCode: null\n        }           \n        smsJourney(body)\n        .then(response => response.json())\n        .then( data =>{\n            // this.props.submit(); \n            this.setState({\n                submissionLoader: false\n            })\n            if(data.success){\n                ToastsStore.success(data.message);\n                this.props.submit();       \n            }\n            else{\n                ToastsStore.error(data.message);\n            }\n        })\n        .catch(error=>{\n            ToastsStore.error(\"Something went wrong.Please try again later.!!!\");\n            this.setState({\n                submissionLoader:false\n            })\n        }) \n    }\n\n    smsChangeHandler = (event) => {\n        const value = event.target.value;\n        let temp1 = this.state.formControls;\n        temp1.template.value = value;\n        temp1.templateCont.value = this.getTemplate(value);\n        let num = 0;\n        if (temp1.templateCont.value.length !== 0) {\n              if (temp1.language.value === \"en\") {\n                    temp1.templateCont.value = temp1.templateCont.value.substring(0, 300);\n                    num = (temp1.templateCont.value.length - 160 > 0) ? 1 + Math.ceil((temp1.templateCont.value.length - 160) / 140) : 1;\n              } else {\n                    temp1.templateCont.value = temp1.templateCont.value.substring(0, 120);\n                    num = (temp1.templateCont.value.length - 70 > 0) ? 1 + Math.ceil((temp1.templateCont.value.length - 70) / 50) : 1;\n              }\n        }\n        this.setState({\n              formControls: temp1,\n              messageNum: num,\n              smsTemplateId: value\n        });\n    }\n\n    getTemplate(value) {\n        let temp = \"\";\n        this.state.smsTemplates.forEach(e => {\n            if (String(e.smsTemplateId) === String(value)) {\n                temp = e.templateBody;\n            }\n        })\n        \n        return temp;\n    }\n\n    contentHandler = (event) => {\n        const value = event.target.value;\n        let temp1 = this.state.formControls;\n        temp1.templateCont.value = value;\n        let num = 0;\n        if (value.length !== 0) {\n            if (temp1.language.value === \"en\") {\n                    num = (value.length - 160 > 0) ? 1 + Math.ceil((value.length - 160) / 140) : 1;\n            } else {\n                    num = (value.length - 70 > 0) ? 1 + Math.ceil((value.length - 70) / 50) : 1;\n            }\n        }\n        this.setState({\n            formControls: temp1,\n            messageNum: num\n        })\n    }\n\n    canTestSms() {\n        this.setState({\n            canTestSms: true\n        })\n    }\n\n    closeConf() {\n        this.setState({\n              canTestSms: false,\n              showDsChangeConf: false,\n              showLangChangeConf: false,\n              canTestSmsCr: false    \n        })\n    }\n\n    addURL() {\n        let finalUrl = this.state.formControls.templateCont.value.concat(\" ${\" + \"clickUrlWithTracking\" + \"}\");\n        this.setState(state => {\n            return {\n                    formControls: {\n                        ...state.formControls, templateCont: {\n                                ...state.formControls.templateCont, value: finalUrl\n                        }\n                    }\n            }\n        })\n    }\n  \n    render(){\n        return(\n            <section className=\"popUp-modal--wrapper\">\n                <div className=\"col-19 margin-btm\">\n                    <div className=\"label\">Event Type</div>\n                    <Select                                    \n                        isClearable={true}\n                        isRtl={false}\n                        isSearchable={true}\n                        placeholder=\"Select or Search..\"\n                        name=\"eventType\"\n                       // value={this.state.formControls.eventType}\n                        onChange={event => {this.selectChange(event)}}\n                        options={this.eventType([\"Sms Delivered\",\"Short URL Clicked\",\"Short Url Not Clicked\",\"Sms Not Delivered\"])}\n                    />\n                </div>\n                <div className=\"flex flex-direction--row margin-btm\">\n                    <label for=\"delay\" className=\"radioBtn\">\n                        <input type=\"radio\" name=\"type\" checked={this.state.type === \"delay\"} \n                        value=\"delay\" id=\"delay\" \n                        onClick={this.radioChangeHandler}/>Delay\n                        <span className=\"checkmark1\"></span>\n                    </label>\n                    <label for=\"schedule\" className=\"radioBtn\">\n                        <input type=\"radio\" name=\"type\" checked={this.state.type === \"date\"} \n                        id=\"schedule\" value=\"date\" onClick={this.radioChangeHandler} \n                       />Schedule\n                        <span className=\"checkmark1\"></span>\n                    </label>\n                    {\n                        (this.state.eventType === \"Sms Delivered\" || this.state.eventType === \"Short URL Clicked\") &&\n                        <label for=\"immedia\" className=\"radioBtn\">\n                            <input type=\"radio\" name=\"type\" checked={this.state.type === \"immediately\"} \n                            id=\"immedia\" value=\"immediately\" onClick={this.radioChangeHandler} \n                            disabled={this.state.eventType === \"Short Url Not Clicked\" ? true : this.state.eventType ===\"Sms Not Delivered\" ? true : false}\n                            />Immediately\n                            <span className=\"checkmark1\"></span>\n                        </label>\n                    }\n                 \n                </div> \n                <div className=\"col-19 margin-btm\">\n                    <div className=\"ui segment\" style={{border: '1.2px solid rgba(0,0,0,0.1)'}}>\n                        <div className=\"ui stackable very relaxed two column grid\">\n                            <div className=\"middle aligned column\">\n                                <div className=\"label\">Delay in \n                                    <select onChange={this.delayChangeHandler} className=\"inline-select-form-control\">\n                                        <option value =\"null\">Select</option>\n                                        <option value=\"day\">day</option>\n                                        <option value=\"hour\">hour</option>\n                                        <option value=\"min\">min</option>\n                                        <option value=\"sec\">sec</option>\n                                    </select>\n                                </div>\n                                <input type=\"number\" className=\"form-control\"\n                                 onChange={this.handleChangeDelay}\n                                 value={this.state.delay}\n                                 disabled={this.state.type===\"date\" ? true: ((this.state.type===\"immediately\")? true: false)}/>\n                            </div>\n                            {\n                                utils.isMobile &&\n                                    <div className= \"ui horizontal divider\">Or</div>\n                            }\n                            <div className=\"column\">\n                                <div className=\"label\">Schedule Date</div>\n                                <DatePicker\n                                    inline = {this.state.type ===\"delay\"  ? false: (this.state.type===\"immediately\" ? false : true)}\n                                    disabled={this.state.type=== \"delay\"? true: ((this.state.type===\"immediately\")? true: false)}\n                                    selected={this.state.date}\n                                    placeholderText=\"Click to select Date\"\n                                    minDate={new Date()}\n                                    onChange={this.dateChange}\n                                    peekNextMonth\n                                    showMonthDropdown\n                                    showYearDropdown\n                                    dropdownMode=\"select\"\n                                    className=\"col-20\"\n                                    name=\"date\"                                \n                                    dateFormat=\"dd/MM/yyyy\"\n                                />                                     \n                                <div className=\"label\">Schedule Time</div>\n                                <DatePicker\n                                    selected={this.state.date}\n                                    onChange={this.dateChange}\n                                    showTimeSelect\n                                    disabled={this.state.type===\"delay\" ? true: ((this.state.type===\"immediately\")? true: false)}\n                                    showTimeSelectOnly\n                                    timeIntervals={15}\n                                    timeCaption=\"Time\"\n                                    dateFormat=\"h:mm aa\"\n                                />\n                            </div>        \n                        </div>\n                        {!utils.isMobile &&\n                            <div className=\"ui vertical divider\">Or</div>\n                        }\n                    </div>     \n                </div>\n               \n                <div className=\"col-19 margin-btm\">\n                    <div className=\"label\">Notification Type</div>\n                    <Select                                    \n                        isClearable={true}\n                        isRtl={false}\n                        isSearchable={true}\n                        placeholder=\"Select or Search..\"\n                        // value={this.state.formControls.notification}\n                        onChange={event => {this.selectChangeNotification(event)}}\n                        options={this.eventType([\"SMS\",\"EMAIL\"])}\n                    />\n                </div>\n               \n                {\n                    this.state.notification === \"SMS\" &&\n                    <React.Fragment>\n                        <CustomSMSTemplate \n                            formControls = {this.state.formControls}\n                            changeHandler = {this.changeHandler.bind(this)}\n                            loadData = {this.loadData}\n                            audienceGrId = {this.state.formControls.audienceGrId.value}\n                            langChangeHandle = {this.langChangeHandle.bind(this)}\n                            templates = {this.state.smsTemplates}\n                            smsChangeHandler={this.smsChangeHandler.bind(this)}\n                            addURL={this.addURL.bind(this)}\n                            contentHandler = {this.contentHandler.bind(this)}\n                            messageNum={this.state.messageNum}\n                            canTestSms={this.canTestSms.bind(this)}\n                            checkedHandler = {this.checkedHandler.bind(this)}\n                            audienceData={this.state.audienceData}\n                            clickHandler={this.clickHandler.bind(this)}\n                            display = \"none\"\n                            displayTestSMS = \"none\"\n                        />\n                        <div className=\"dialog-footer pad\">   \n                            {\n                                !this.state.submissionLoader && \n                                <div>\n                                    <button className=\"btn btn-fill dialog--cta pointer\" onClick={this.notificationNull}>\n                                            BACK\n                                    </button>                    \n                                    <button className=\"btn btn-fill btn-success margin-left--half dialog--cta pointer\" onClick={this.verifyDetails.bind(this) }>SUBMIT</button>\n                                </div>\n                            }\n                            { \n                            this.state.submissionLoader && \n                                <div>\n                                    <CircularLoader stroke={\"#c82506\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                </div>\n                            } \n                        </div>\n                        {\n                            this.state.showLangChangeConf &&\n                            <Popup title={''} togglePopup={this.closeConf.bind(this)}>\n                                <div className=\"pad text--bold text--center\" style={{fontSize:'14px'}}>\n                                        <div>SMS Content Section will become blank on changing Language.</div>\n                                        <div>Do you still want to change the language ?</div>\n                                </div>\n                                <div className=\"col-20 flex flex-horz-center flex-wrap pad\">\n                                        <div className=\"col-4\">\n                                            <button className=\"ui grey button\" style={{width:'100%'}} onClick={()=>this.closeConf()}> Back </button>\n                                        </div>\n                                        <div className=\"margin-left\">\n                                            <button className=\"ui green button\" style={{width:'100%'}} onClick={()=>this.clearLangData()}> Yes </button>\n                                        </div>\n                                </div>\n                            </Popup>\n                        }\n                    </React.Fragment>\n                }\n                {\n                    this.state.notification === \"EMAIL\" && this.state.emailTemplates && this.state.emailTemplates.length >0 &&\n                        <EmailPopup\n                            handleChange={this.emailIDChangeHandler}\n                            handleChangeEmail={this.emailChangeHandler.bind(this)}\n                            specificTemplates={this.state.specificEmailTemplates}\n                            emailTemplates={this.state.emailTemplates && this.state.emailTemplates}\n                            toggleEmail={this.notificationNull}\n                            sendEmail = {this.verifyEmailDetails.bind(this)}\n                            confirmationLoader={this.state.submissionLoader}\n                        />\n                }  \n                {\n                    this.state.notification === \"EMAIL\" && this.state.emailTemplates && this.state.emailTemplates.length === 0 &&\n                        <React.Fragment>\n                            <label className=\"label\">{this.state.notification}</label>\n                            {\n                                this.state.notification === \"EMAIL\" && \n                                <React.Fragment>\n                                    <div className=\"col-19 margin-btm--half\">\n                                        <div className=\"label\">Subject</div>\n                                        <input type=\"text\" className=\"form-control\"\n                                        name=\"subjectTemplate\"\n                                        onChange={this.emailBodyChanegHandler.bind(this)}\n                                        />\n                                    </div>\n                                </React.Fragment>\n                            }\n                            <div className=\"col-20 pad--half\">\n                                <div className=\"label\">Body</div>\n                                <textarea  name=\"bodyTemplate\" rows=\"5\" cols={`${utils.isMobile ? \"30\" :\"40\" }`} value={this.state.notification === \"SMS\" ? this.state.specificTemplates: this.state.specificEmailTemplates && this.state.specificEmailTemplates.bodyTemplate} onChange={this.state.notification === \"SMS\" ? this.smsBodyChanegHandler.bind(this): this.emailBodyChanegHandler.bind(this)}></textarea> \n                            </div>\n                            <div className=\"dialog-footer pad\">   \n                                {\n                                    !this.state.submissionLoader && \n                                    <div>\n                                        <button className=\"btn btn-fill dialog--cta pointer\" onClick={this.notificationNull}>\n                                                BACK\n                                        </button>                    \n                                        <button className=\"btn btn-fill btn-success margin-left--half dialog--cta pointer\" onClick={this.state.notification === \"SMS\" ? this.verifyDetails.bind(this) : this.verifyEmailDetails.bind(this) }>SUBMIT</button>\n                                    </div>\n                                }\n                                { \n                                    this.state.submissionLoader && \n                                    <div>\n                                        <CircularLoader stroke={\"#c82506\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\n                                    </div>\n                                } \n                            </div>                                             \n                        </React.Fragment>    \n                    }  \n              <ToastsContainer position={ToastsContainerPosition.TOP_RIGHT} lightBackground store={ToastsStore} /> \n            </section>\n        )\n    }\n}","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\SegmentGroup\\SegmentGroupTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\landingPage-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPages\\LandingPagesTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LandingPages\\CreateMapping.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Templates\\CreateTemplate.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Templates\\TemplatesTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\CreatePackage.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\PackageDetail.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\Packages.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Lead\\AddLead.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Segments\\CreateSegments.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\EditPackage.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Lead\\LeadFilter.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ConfirmationModal\\ConfirmationModal.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Task\\TaskFilter.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Task\\TaskTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\RemarksModal\\RemarksModal.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ServicePackage\\ViewPkgDetail.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\LeadDetail\\HistoryTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Constants\\cities.constants.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\DatasourceTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Clients\\ClientEditDatasource.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CustomSMSTemplate.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Revenue\\RevenueFilter.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Revenue\\RevenueTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Client\\ClientServiceTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\SMSProMobile.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\GenericWhatsApp\\WhatsAppDP.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\GenericWhatsApp\\GenericWhatsApp.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignMainSource.js",["742","743"],"import React from \"react\";\r\nimport { useStep } from \"react-hooks-helper\";\r\nimport CampaignWhenTemplate from \"./CampaignWhenTemplate\";\r\nimport CampaignAudienceForm from \"./CampaignAudienceForm\";\r\nimport CampaignForm from \"../../../Containers/Campaign/CreateCampaign\"\r\nimport CampaignMessage from \"./CampaignMessage\";\r\nimport CampaignPreview from \"./CampaignPreview\";\r\n\r\nconst steps = [\r\n  { id: \"audience\" },\r\n  { id: \"when\" },\r\n  { id: \"message\" },\r\n  { id: \"preview\" },\r\n  // { id: \"submit\" },\r\n];\r\n\r\nfunction CampaignMainSource() {\r\n  const { step, navigation } = useStep({\r\n    steps,\r\n    initialStep: 0,\r\n  });\r\n\r\n  const props = { navigation };\r\n\r\n  switch (step.id) {\r\n    case \"audience\":\r\n      return <CampaignForm {...props} />;\r\n    case \"when\":\r\n      return <CampaignWhenTemplate {...props} />;\r\n    case \"message\":\r\n      return <CampaignMessage {...props} />;\r\n    case \"preview\":\r\n      return <CampaignPreview {...props} />;\r\n    case \"submit\":\r\n    //   return <Submit {...props} />;\r\n  }\r\n  return <div></div>;\r\n}\r\n\r\nexport default CampaignMainSource;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\IconSearch\\IconSearch.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignPreview.js",["744","745","746","747","748"],"import React from \"react\";\r\nimport { Header, Form, Button, Segment } from \"semantic-ui-react\";\r\n// import \"./preview.css\";\r\nconst CampaignPreview = (props) => {\r\n  const { FormData, navigation } = props;\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n       \r\n      <div className=\"heading p-0\">\r\n            <Header as=\"h3\" attached=\"top\">\r\n              Create New Campaign\r\n            </Header>\r\n            <Segment attached>\r\n              <div className=\"ui big breadcrumb\">\r\n                <a className=\"section\"> Audience </a>\r\n                <i className=\"right chevron icon divider\"> </i>\r\n                <a className=\"section\"> When </a>\r\n                <i className=\"right chevron icon divider\"> </i>\r\n                <a className=\"section\"> Message </a>\r\n                <i className=\"right chevron icon divider\"> </i>\r\n                <a className=\"active-nav\"> Preview & Launch </a>\r\n              </div>\r\n            </Segment>\r\n          </div>\r\n       \r\n        <div className=\"header\">\r\n          <Header as=\"h2\" attached=\"top\" className=\"shadow-sm mt-1\">\r\n            Audience\r\n          </Header>\r\n        </div>\r\n        <div\r\n            className=\"campaign-card shadow-sm\r\n          \"\r\n          >\r\n        <Form>\r\n         <div class=\"form-row\">\r\n           \r\n              <div class=\"form-group col-md-6\">\r\n                <label className=\"preview-label\">Campaign Name :</label>\r\n                {FormData.campaignName}\r\n              </div>\r\n              <div class=\"form-group col-md-4\">\r\n                <label className=\"preview-label\">Campaign Type :</label>\r\n                {FormData.campaignScheduleType}\r\n              </div>\r\n              <div class=\"form-group col-md-2\">\r\n                <label className=\"preview-label\">Campaign Description :</label>\r\n                {FormData.campaignDesc}\r\n              </div>\r\n              \r\n         \r\n            </div>\r\n            <div class=\"form-row\">\r\n              <div class=\"form-group col-md-6\">\r\n                <label className=\"preview-label\">Audience Type :</label>\r\n                {FormData.audienceType == 0\r\n                  ? \"Single Segment\"\r\n                  : \"Multiple Segment\"}\r\n              </div>\r\n              <div class=\"form-group col-md-4\">\r\n                <label className=\"preview-label\">Send To :</label>\r\n                {FormData.campaignScheduleType}\r\n              </div>\r\n            </div>\r\n           \r\n        </Form>\r\n          </div>\r\n      </div>\r\n      <div className=\"container\">\r\n     \r\n          <Header as=\"h2\" attached=\"top\" className=\"shadow-sm mt-3\">\r\n            When\r\n          </Header>\r\n         \r\n          <div className=\"campaign-card shadow-sm\">\r\n          <div class=\"form-row\">\r\n          <div class=\"form-group col-md-6\">\r\n                <label className=\"preview-label\">Campaign Type :</label>\r\n                {FormData.campaignScheduleType}\r\n              </div>\r\n\r\n              <div class=\"form-group col-md-4\">\r\n                <label className=\"preview-label\">Delivery Time:</label>\r\n                {FormData.campaignScheduleType}\r\n              </div>\r\n            </div>\r\n           </div>\r\n        </div>\r\n        <div className=\"container mt-4\">\r\n      \r\n          <Header as=\"h2\" attached=\"top\" className=\"shadow-sm mt-1\">\r\n            Message\r\n          </Header>\r\n          <Header as=\"h2\" attached=\"top\" className=\"\">\r\n            Preview \r\n          </Header>\r\n          <div className=\"campaign-card shadow-sm\">\r\n          <div class=\"form-row\">\r\n          <div class=\"form-group col-md-6\">\r\n                <label className=\"preview-label\">Campaign Type :</label>\r\n                {FormData.campaignScheduleType}\r\n              </div>\r\n\r\n              <div class=\"form-group col-md-4\">\r\n                <label className=\"preview-label\">Delivery Time:</label>\r\n                {FormData.campaignScheduleType}\r\n              </div>\r\n            </div>\r\n           </div>\r\n           \r\n           <Button\r\n              variant=\"contained\"\r\n              fullWidth\r\n              color=\"green\"\r\n              style={{ marginTop: \"1rem\" }}\r\n              onClick={() => navigation.next()}\r\n            >\r\n              Save & Continue\r\n            </Button>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampaignPreview;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignMessage.js",["749","750","751","752","753","754","755","756","757","758","759"],"import React, { useRef } from \"react\";\r\nimport { Header, Form, Segment, Button, TextArea } from \"semantic-ui-react\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nimport Select, { components } from \"react-select\";\r\nimport ReactQuill from \"react-quill\";\r\n// import EditorToolbar, { modules, formats } from \"./QuillToolbar\";\r\nimport DragAndDrog from \"./DragDropEditor\";\r\n// import \"./style.css\";\r\nconst CampaignMessage = (props) => {\r\n  const {\r\n    FormData,\r\n    setFormData,\r\n    changeHandler,\r\n    navigation,\r\n    submitHandler,\r\n  } = props;\r\n  console.log(FormData);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"shadow-sm p-0\">\r\n              <Header as=\"h3\" attached=\"top\">\r\n                Create New Campaign\r\n              </Header>\r\n              <Segment attached>\r\n                <div className=\"ui big breadcrumb\">\r\n                  <a className=\"section\"> Audience </a>\r\n                  <i className=\"right chevron icon divider\"> </i>\r\n                  <a className=\"section\"> When </a>\r\n                  <i className=\"right chevron icon divider\"> </i>\r\n                  <a className=\"active-nav\"> Message </a>\r\n                  <i className=\"right chevron icon divider\"> </i>\r\n                  <a className=\"section\"> Preview & Launch </a>\r\n                </div>\r\n              </Segment>\r\n            </div>\r\n            <div className=\"card shadow-sm mb-2 mt-1 p-3 border-0\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-3\">\r\n                  <h4 className=\"msg-heading\">Notification Type</h4>\r\n                </div>\r\n                <div className=\"col-sm-6\">\r\n                  <Select\r\n                    className=\"cat-input\"\r\n                    closeMenuOnSelect={false}\r\n                    // components={animatedComponents}\r\n                    defaultValue=\"select\"\r\n                    isMulti\r\n                    // options={tagsOption}\r\n                    // name=\"tagIds\"\r\n                    // onChange={handleTags}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm\">\r\n                <div className=\"msg-card shadow-sm\">\r\n                  <h3 className=\"msg-header\">Sender ID</h3>\r\n                  <label className=\"msg-label\">Select Your Sender Id</label>\r\n                  <div className=\"col-sm-7\">\r\n                    <Select\r\n                      className=\"cat-input\"\r\n                      closeMenuOnSelect={false}\r\n                      // components={animatedComponents}\r\n                      defaultValue=\"select\"\r\n                      isMulti\r\n                      // options={tagsOption}\r\n                      // name=\"tagIds\"\r\n                      // onChange={handleTags}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-sm\">\r\n                <div className=\"msg-card-mobile shadow-sm\">\r\n                <Header as=\"h3\" attached=\"top\"> Preview</Header>\r\n                 <figure>\r\n                   <img />\r\n                 </figure>\r\n                </div>\r\n              </div>\r\n              <div class=\"\">\r\n                <div className=\"msg-card-msg mb-5 p-2 shadow-sm\">\r\n                  <h3 className=\"msg-header\">Sender ID</h3>\r\n                  <label className=\"msg-label\">Select Your Sender Id</label>\r\n                  <div className=\"col-sm-9\">\r\n                    <Select\r\n                      className=\"cat-input\"\r\n                      closeMenuOnSelect={false}\r\n                      // components={animatedComponents}\r\n                      defaultValue=\"select\"\r\n                      placeholder=\"-Select Language-\"\r\n                      isMulti\r\n                      // options={tagsOption}\r\n                      // name=\"tagIds\"\r\n                      // onChange={handleTags}\r\n                    />\r\n                  </div>\r\n                  <label className=\"msg-label\">Message Content</label>\r\n                  <div className=\"\">\r\n                    <TextArea\r\n                    className=\"text-area\"\r\n                    // style={{ minHeight: 100,width:800 }}\r\n                      placeholder=\"Tell us more\"\r\n                      style={{ minHeight: 100 }}\r\n                    />\r\n                  </div>\r\n                  <label className=\"msg-label\">Url Shortner / Tracker</label>\r\n                  <div className=\"col-sm-9\">\r\n                    <div class=\"input-group mb-3\">\r\n                      <input\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        placeholder=\"Recipient's username\"\r\n                        aria-label=\"Recipient's username\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                      />\r\n                      <div class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-success\" type=\"button\">\r\n                          create\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"card shadow-sm border-0\">\r\n              <Header as=\"h3\" attached=\"top\" className=\"header\">\r\n                Message\r\n              </Header>\r\n              <Form onSubmit={submitHandler}>\r\n                <Form.Field inline>\r\n                  <div className=\"mb-3 row \">\r\n                    <label className=\"col-sm-2 mt-4 form-label\">Subject</label>\r\n                    <div className=\"col-sm-5 \">\r\n                      <input\r\n                        className=\"email-input mt-4\"\r\n                        type=\"text\"\r\n                        name=\"subject\"\r\n                        // value={FormData.subject}\r\n                        placeholder=\"Subject\"\r\n                        onChange={changeHandler}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <label></label>\r\n                <div class=\"form-check form-check-inline\">\r\n                  <input\r\n                    class=\"form-check-input\"\r\n                   \r\n                    type=\"radio\"\r\n                    name=\"templateId\"\r\n                    value={\"1\"}\r\n                    checked={FormData.templateId === \"1\"}\r\n                    onChange={changeHandler}\r\n                  />\r\n                  <label class=\"form-check-label\" for=\"inlineRadio1\">\r\n                    Rich Text\r\n                  </label>\r\n                </div>\r\n                <div class=\"form-check form-check-inline\">\r\n                  <input\r\n                    class=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    value={\"2\"}\r\n                    checked={FormData.templateId === \"2\"}\r\n                    onChange={changeHandler}\r\n                  />\r\n                  <label class=\"form-check-label\" for=\"inlineRadio2\">\r\n                    Html\r\n                  </label>\r\n                </div>\r\n                <div class=\"form-check form-check-inline\">\r\n                  <input\r\n                    class=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"templateId\"\r\n                    value={\"3\"}\r\n                    checked={FormData.templateId === \"3\"}\r\n                    onChange={changeHandler}\r\n                  />\r\n                  <label class=\"form-check-label\" for=\"inlineRadio3\">\r\n                    Drag & Drop Editor\r\n                  </label>\r\n                </div>\r\n\r\n                {FormData.templateId == \"1\" ? (\r\n                  <Form.Field inline>\r\n                    <div className=\"mb-3 row\">\r\n                      <label className=\"col-sm-2 mt-4 form-label\">\r\n                        Body\r\n                        {/* <label className=\"col-sm-2 mt-4 col-form-label\">Body */}\r\n                        <div className=\"\">\r\n                          {/* <div className=\"col-sm-5 \"> */}\r\n                          <CKEditor\r\n                            // editor={ ClassicEditor }\r\n                            data=\"<p>Hello from CKEditor 5!</p>\"\r\n                            name=\"content\"\r\n                            value={FormData.content}\r\n                            // onChange={changemsg}\r\n                            onReady={(editor) => {\r\n                              // You can store the \"editor\" and use when it is needed.\r\n                              console.log(\"Editor is ready to use!\", editor);\r\n                            }}\r\n                            onChange={(event, editor) => {\r\n                              const data = editor.getData();\r\n                              FormData.content = data;\r\n\r\n                              console.log(data);\r\n                            }}\r\n                            onBlur={(event, editor) => {\r\n                              console.log(\"Blur.\", editor);\r\n                            }}\r\n                            onFocus={(event, editor) => {\r\n                              console.log(\"Focus.\", editor);\r\n                            }}\r\n                          />\r\n\r\n                          {/* <FroalaEditor\r\n  tag='textarea'\r\n  // config={config}\r\n  // model={FormData.content}\r\n  // onModelChange={(e)=>{console.log(e)}}\r\n/> */}\r\n                        </div>\r\n                      </label>\r\n                    </div>\r\n                  </Form.Field>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {FormData.templateId == \"2\" ? (\r\n                  <Form.Field>\r\n                    {/* <EditorToolbar /> */}\r\n                    <ReactQuill\r\n                      theme=\"snow\"\r\n                      style={{ height: 300 }}\r\n                      value={FormData.content}\r\n                      name=\"content\"\r\n                      placeholder={\"Write something awesome...\"}\r\n                      // modules={modules}\r\n                      // formats={formats}\r\n                      onChange={(e) => (FormData.content = e)}\r\n                    />\r\n                  </Form.Field>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {FormData.templateId == \"3\" ? (\r\n                  <Form.Field>\r\n                    <DragAndDrog {...props} />\r\n                  </Form.Field>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Form.Field inline>\r\n                  <div className=\" row \">\r\n                    <label className=\"col-sm-2 mt-4 form-label\">\r\n                      Attachments\r\n                    </label>\r\n                    <div className=\"col-sm-4 \">\r\n                      <i className=\"fa fa-user icon\"></i>\r\n                      <input\r\n                        className=\" \"\r\n                        type=\"text\"\r\n                        name=\"longUrl\"\r\n                        value={FormData.longUrl}\r\n                        onChange={changeHandler}\r\n                        placeholder=\"https://www.abc.com/document.pdf\"\r\n                      />\r\n                      <p className=\"text-muted\">Maximum file size:10mb</p>\r\n                    </div>\r\n                    <span className=\"msg-span\">OR</span>\r\n                    <div className=\"col-sm-3 mt-3\">\r\n                      <button className=\"upload-btn badge badge-pill mt-3\">\r\n                        UPLOAD\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <div className=\"col-sm-5 mt-3 d-flex justify-content-end\">\r\n                    <button className=\"btn-attachment badge badge-pill\">\r\n                      Add another Attachment\r\n                    </button>\r\n                  </div>\r\n                </Form.Field>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  color=\"green\"\r\n                  style={{ marginTop: \"1rem\" }}\r\n                  onClick={() => navigation.next()}\r\n                >\r\n                  Save & Continue\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CampaignMessage;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignAudienceForm.js",["760","761","762","763","764","765","766","767","768","769","770","771","772"],"import React from \"react\";\r\nimport { IoIosAddCircleOutline } from \"react-icons/io\";\r\nimport Select, { components } from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport SegmentForm from \"../../../Containers/Campaign/Segment-Container\";\r\nimport { CustomSelect, CustomSelectMulti, Menu } from \"./CustomSelect\";\r\n\r\n// import SelectMenu from \"./SelectMenu\";\r\nimport {\r\n  Form,\r\n  Header,\r\n  Button,\r\n  Segment,\r\n  Input,\r\n  TextArea,\r\n} from \"semantic-ui-react\";\r\n// import \"./style.css\";\r\nconst animatedComponents = makeAnimated();\r\nconst CampaignFormTemplate = (props) => {\r\n  console.log(\"nav :\" + props.navigation);\r\n  const {\r\n    tagsOption,\r\n    submitTags,\r\n    tagName,\r\n    FormData,\r\n    FormDataError,\r\n    options,\r\n    changeHandler,\r\n    handleTags,\r\n    handleSegment,\r\n    submitHandler,\r\n    navigation,\r\n  } = props;\r\n  {\r\n    console.log(FormDataError);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"shadow-sm p-0\">\r\n              <Header as=\"h3\" attached=\"top\">\r\n                Create New Campaign\r\n              </Header>\r\n              <Segment attached>\r\n                <div className=\"ui big breadcrumb\">\r\n                  <a className=\"active-nav breadcrumb-label\">Audience</a>\r\n                  <i className=\"right chevron icon divider\"></i>\r\n                  <a className=\"section breadcrumb-label\">When</a>\r\n                  <i className=\"right chevron icon divider\"></i>\r\n                  <a className=\"section breadcrumb-label\">Message</a>\r\n                  <i className=\"right chevron icon divider\"></i>\r\n                  <a className=\"section breadcrumb-label\">Preview & Launch</a>\r\n                </div>\r\n              </Segment>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-12\">\r\n            <div className=\"campaign-card shadow-sm border-0\">\r\n              <Form onSubmit={submitHandler}>\r\n                <Form.Field inline>\r\n                  <div className=\"mb-3 row\">\r\n                    <label\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-3 form-label\"\r\n                    >\r\n                      Campaign Name\r\n                    </label>\r\n                    <div className=\"col-sm-5\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control-plaintext\"\r\n                        id=\"staticEmail\"\r\n                        name=\"campaignName\"\r\n                        value={FormData.campaignName}\r\n                        onChange={changeHandler}\r\n                      />\r\n                      {!FormData.campaignName ? (\r\n                        <small className=\"text-danger\">\r\n                          {FormDataError.campaignName}\r\n                        </small>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <Form.Field inline>\r\n                  <div className=\"mb-3 row\">\r\n                    <label\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-3 form-label\"\r\n                    >\r\n                      Campaign Tags\r\n                    </label>\r\n                    <div className=\"col-sm-7\">\r\n                      <Select\r\n                        className=\"cat-input\"\r\n                        closeMenuOnSelect={false}\r\n                        components={animatedComponents}\r\n                        defaultValue=\"select\"\r\n                        isMulti\r\n                        options={tagsOption}\r\n                        name=\"tagIds\"\r\n                        onChange={handleTags}\r\n                      />\r\n                      <div className=\"m-auto\">\r\n                        <p className=\"text-muted\">\r\n                          This field is optional.Tags help you analyze Campaign\r\n                          results for a group of campaign that belongs to a tag.\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\r\n                      <IoIosAddCircleOutline\r\n                        type=\"button\"\r\n                        color=\"gray\"\r\n                        size=\"25\"\r\n                        className=\"msg-icon\"\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      class=\"modal fade\"\r\n                      id=\"exampleModalCenter\"\r\n                      tabindex=\"-1\"\r\n                      role=\"dialog\"\r\n                      aria-labelledby=\"exampleModalCenterTitle\"\r\n                      aria-hidden=\"true\"\r\n                    >\r\n                      <div\r\n                        class=\"modal-dialog modal-dialog-centered\"\r\n                        role=\"document\"\r\n                      >\r\n                        <div class=\"modal-content\">\r\n                          <div class=\"modal-header\">\r\n                            <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">\r\n                              Add Tags\r\n                            </h5>\r\n                            <button\r\n                              type=\"button\"\r\n                              class=\"close\"\r\n                              data-dismiss=\"modal\"\r\n                              aria-label=\"Close\"\r\n                            >\r\n                              <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                          </div>\r\n                          <div class=\"modal-body\">\r\n                            <Form.Field>\r\n                              <input\r\n                                type=\"text\"\r\n                                placeholder=\"add tags..\"\r\n                                name=\"tagName\"\r\n                                value={FormData.tagName}\r\n                                onChange={changeHandler}\r\n                              />\r\n                            </Form.Field>\r\n                          </div>\r\n                          <div class=\"modal-footer\">\r\n                            <Button\r\n                              type=\"button\"\r\n                              color=\"green\"\r\n                              className=\"btn btn-block\"\r\n                              onClick={submitTags}\r\n                            >\r\n                             Add Tags \r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <Form.Field inline>\r\n                  <div className=\"mb-3 row\">\r\n                    <label\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-3 form-label\"\r\n                    >\r\n                      Campaign Type\r\n                    </label>\r\n                    <div className=\"col-sm-2\">\r\n                      <label>\r\n                        <input\r\n                          type=\"radio\"\r\n                          label=\"one time\"\r\n                          name=\"campaignScheduleType\"\r\n                          value=\"ONETIME\"\r\n                          className=\"mr-1\"\r\n                          checked={FormData.campaignScheduleType === \"ONETIME\"}\r\n                          onChange={changeHandler}\r\n                        />\r\n                        One time\r\n                      </label>\r\n                      <br />\r\n                      <label>\r\n                        <input\r\n                          type=\"radio\"\r\n                          label=\"triggered\"\r\n                          name=\"campaignScheduleType\"\r\n                          value=\"TRIGGERED\"\r\n                          className=\"mr-1\"\r\n                          checked={\r\n                            FormData.campaignScheduleType === \"TRIGGERED\"\r\n                          }\r\n                          onChange={changeHandler}\r\n                        />\r\n                        Triggered\r\n                      </label>\r\n                      <br />\r\n                      <label>\r\n                        <input\r\n                          type=\"radio\"\r\n                          className=\"btn btn-outline-secondary\"\r\n                          label=\"recurring\"\r\n                          className=\"mr-1\"\r\n                          name=\"campaignScheduleType\"\r\n                          value=\"RECURRING\"\r\n                          checked={\r\n                            FormData.campaignScheduleType === \"RECURRING\"\r\n                          }\r\n                          onChange={changeHandler}\r\n                        />\r\n                        Recurring\r\n                      </label>\r\n                      {!FormData.campaignScheduleType ? (\r\n                        <small className=\"text-danger\" className=\"text-danger\">\r\n                          {FormDataError.campaignScheduleType}\r\n                        </small>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <Form.Field inline>\r\n                  <div className=\"mb-3 row\">\r\n                    <label\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-3 form-label\"\r\n                    >\r\n                      Campaign Description\r\n                    </label>\r\n                    <div className=\"col-sm-8\">\r\n                      <TextArea\r\n                        className=\"text-area\"\r\n                        style={{ minHeight: 100, width: 800 }}\r\n                        name=\"campaignDesc\"\r\n                        value={FormData.campaignDesc}\r\n                        onChange={changeHandler}\r\n                      />\r\n                      {!FormData.campaignDesc ? (\r\n                        <small className=\"text-danger\">\r\n                          {FormDataError.campaignDesc}\r\n                        </small>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <Form.Field inline>\r\n                  <div className=\"mb-3 row\">\r\n                    <label\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-3 form-label\"\r\n                    >\r\n                      Audience Type\r\n                    </label>\r\n                    <div className=\"col-sm-8\">\r\n                      <label>\r\n                        <input\r\n                          type=\"radio\"\r\n                          label=\"Send to users in a single segment\"\r\n                          name=\"audienceType\"\r\n                          value={\"0\"}\r\n                          className=\"mr-1\"\r\n                          checked={FormData.audienceType === \"0\"}\r\n                          onChange={changeHandler}\r\n                        />\r\n                        Send to users in a single segment\r\n                      </label>\r\n                      <br />\r\n                      <label>\r\n                        <input\r\n                          type=\"radio\"\r\n                          label=\"Send to users in a single segment multiple segment/\"\r\n                          className=\"mr-1\"\r\n                          name=\"audienceType\"\r\n                          value={\"1\"}\r\n                          checked={FormData.audienceType === \"1\"}\r\n                          onChange={changeHandler}\r\n                        />\r\n                        Send to users in a single segment/multiple segment\r\n                      </label>\r\n                      <br />\r\n                      {!FormData.audienceType ? (\r\n                        <small className=\"text-danger\">\r\n                          {FormDataError.audienceType}\r\n                        </small>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <Form.Field inline>\r\n                  <div className=\"mb-3 row\">\r\n                    <label className=\"col-sm-3 form-label\">Send To</label>\r\n                    <div className=\"col-sm-8\">\r\n                      {FormData.audienceType == 0 ? (\r\n                        <CustomSelect\r\n                          options={tagsOption}\r\n                          onChange={(e) => {\r\n                            FormData.journeySegmentIds = [e.value];\r\n                            // console.log(FormData)\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        // <Select\r\n\r\n                        //   placeholder=\"Select Segment\"\r\n                        //   className=\"cat-input\"\r\n                        //   options={tagsOption}\r\n                        //   style={{ minWidth: 300 }}\r\n                        //   name=\"journeySegmentIds\"\r\n                        //   components={{ SelectMenu }}\r\n                        //   // isMulti\r\n                        //   // value={FormData.journeySegmentIds}\r\n                        //   // onChange={handleSegment}\r\n                        //   onChange={(e) =>\r\n                        //     (FormData.journeySegmentIds = Array.from(e.value))\r\n                        //   }\r\n                        // />\r\n                        // <Select\r\n                        //   placeholder=\"Select Segment\"\r\n                        //   className=\"cat-input\"\r\n                        //   options={tagsOption}\r\n                        //   style={{ minWidth: 300 }}\r\n                        //   name=\"journeySegmentIds\"\r\n                        //   isMulti\r\n                        //   // value={FormData.journeySegmentIds}\r\n                        //   onChange={handleSegment}\r\n                        // />\r\n                        <CustomSelectMulti\r\n                          options={tagsOption}\r\n                          onChange={handleSegment}\r\n                          closeMenuOnSelect={false}\r\n                        />\r\n                      )}\r\n                      <SegmentForm {...props} />\r\n                      {FormData.journeySegmentIds.length <= 0 ? (\r\n                        <small className=\"text-danger\">\r\n                          {FormDataError.journeySegmentIds}\r\n                        </small>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                </Form.Field>\r\n                <br />\r\n                <div className=\"form-btn\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    fullWidth\r\n                    color=\"green\"\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    onClick={() => navigation.next()}\r\n                  >\r\n                    Save & Continue\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n    </>\r\n  );\r\n};\r\nexport default CampaignFormTemplate;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\DragDropEditor.js",["773","774","775"],"import React, { useRef } from 'react';\r\nimport { render } from 'react-dom'\r\n\r\n\r\nimport EmailEditor from 'react-email-editor';\r\n\r\nconst DragAndDrog = (props) => {\r\n  const emailEditorRef = useRef(null);\r\nconst {FormData,setFormData}=props\r\n\r\n  const exportHtml = () => {\r\n    emailEditorRef.current.editor.exportHtml((data) => {\r\n      const { design, html } = data;\r\n      FormData.content=html\r\n      console.log('exportHtml', html);\r\n      console.log(FormData)\r\n    });\r\n  };\r\n\r\n  const onLoad = (e) => {\r\n    console.log(e)\r\n      console.log(FormData)\r\n    // you can load your template here;\r\n    // const templateJson = {};\r\n    // emailEditorRef.current.editor.loadDesign(templateJson);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <EmailEditor\r\n        ref={emailEditorRef}\r\n        onLoad={onLoad}\r\n        \r\n      />\r\n      <div>\r\n        <button className=\"btn btn-success\" onClick={exportHtml}>save</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DragAndDrog","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CustomSelect.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Constants\\icon-names.constants.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Containers\\Campaign\\Segment-Container.js",["776","777","778","779","780","781"],"import React, { useState,useEffect } from \"react\";\r\nimport CampaignCreateSegment from \"../../Components/Campaign/automationcampaign/CampaignCreateSegment\";\r\nimport {getCampaign} from \"../../Services/campaign-service\";\r\nimport utils from \"../../Services/utility-service\";\r\nimport {\r\n  ToastsContainer,\r\n  ToastsStore,\r\n  ToastsContainerPosition,\r\n} from \"react-toasts\";\r\nconst SegmentForm = () => {\r\n  const [audienceData, setaudienceData] = useState({\r\n    audienceType: 0,\r\n    fileFormat: null,\r\n    operation: \"fileUpload\",\r\n    gpUpdate: null,\r\n    groupNameList: [],\r\n    audienceData: [],\r\n    audienceGroupId: null,\r\n    fetchingData: false,\r\n  });\r\n\r\n  \r\n  const [segmentData, setSegmentData] = useState({\r\n    segmentName: \"\",\r\n  });\r\n\r\n  const [formControls, setFormControls] = useState({\r\n    file: {\r\n      value: null,\r\n    },\r\n    gpName: {\r\n      value: null,\r\n    },\r\n  });\r\n\r\n  const changeHandler = () => {};\r\n\r\n  useEffect(() => {\r\n    fetchCampaign(true);\r\n    }\r\n  )\r\n\r\n  function fetchCampaign(isprefill) {\r\n    const body = {\r\n      // ammId: parseInt(this.state.ammId),\r\n      // bamId: parseInt(this.state.bamId),\r\n    };\r\n    getCampaign(body)\r\n      .then((response) =>{ response.json()\r\n      console.log(response)\r\n      })\r\n      .then((data) => {\r\n        //let data = {\"success\":true,\"message\":null,\"allowedActions\":[],\"segmentDetails\":[{\"segmentName\":\"city\",\"title\":\"City\",\"desc\":null,\"icon\":\"fas fa-map-marked\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":null},\"segmentType\":\"TXT\",\"asmId\":128,\"basmId\":null,\"segmentId\":52},{\"segmentName\":\"mobile_bill\",\"title\":\"Mobile Bill Per Month (ARPU)\",\"desc\":null,\"icon\":\"fa fa-mobile\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Upto Rs. 200\"},{\"id\":3,\"value\":\"Rs. 201 to 500\"},{\"id\":4,\"value\":\"Rs. 501 to 1000\"},{\"id\":5,\"value\":\"Rs. 1001+\"}]},\"segmentType\":\"MUL\",\"asmId\":129,\"basmId\":null,\"segmentId\":6},{\"segmentName\":\"pincode\",\"title\":\"Pincode\",\"desc\":null,\"icon\":\"fas fa-thumbtack\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":null},\"segmentType\":\"TXT\",\"asmId\":130,\"basmId\":null,\"segmentId\":50},{\"segmentName\":\"handset_name\",\"title\":\"Handset Name\",\"desc\":null,\"icon\":\"fa fa-font\",\"price\":0.05,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Acer\"},{\"id\":2,\"value\":\"Apple\"},{\"id\":3,\"value\":\"Asus\"},{\"id\":4,\"value\":\"Blackberry\"},{\"id\":5,\"value\":\"Celkon\"},{\"id\":6,\"value\":\"Gionee\"},{\"id\":7,\"value\":\"Google\"},{\"id\":8,\"value\":\"HTC\"},{\"id\":9,\"value\":\"Huawei\"},{\"id\":10,\"value\":\"Intex\"},{\"id\":11,\"value\":\"Jolla\"},{\"id\":12,\"value\":\"Karbonn\"},{\"id\":13,\"value\":\"LAVA\"},{\"id\":14,\"value\":\"LeEco\"},{\"id\":15,\"value\":\"Lenovo\"},{\"id\":16,\"value\":\"LG\"},{\"id\":17,\"value\":\"Meizu\"},{\"id\":18,\"value\":\"Micromax\"},{\"id\":19,\"value\":\"Motorola\"},{\"id\":20,\"value\":\"Nokia\"},{\"id\":21,\"value\":\"OnePlus\"},{\"id\":22,\"value\":\"Oppo\"},{\"id\":23,\"value\":\"Panasonic\"},{\"id\":24,\"value\":\"Philips\"},{\"id\":25,\"value\":\"Sagem\"},{\"id\":26,\"value\":\"Samsung\"},{\"id\":27,\"value\":\"Sony\"},{\"id\":28,\"value\":\"Sony Ericson\"},{\"id\":29,\"value\":\"Spice\"},{\"id\":30,\"value\":\"Vertu\"},{\"id\":31,\"value\":\"Vivo\"},{\"id\":32,\"value\":\"Vodofone\"},{\"id\":33,\"value\":\"Xiaomi\"},{\"id\":34,\"value\":\"Xolo\"},{\"id\":35,\"value\":\"ZTE\"}]},\"segmentType\":\"MUL\",\"asmId\":131,\"basmId\":null,\"segmentId\":13},{\"segmentName\":\"ageSlider2\",\"title\":\"Age\",\"desc\":\"\",\"icon\":\"\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":15,\"maxValue\":75,\"segmentValuesList\":null},\"segmentType\":\"RNG\",\"asmId\":132,\"basmId\":null,\"segmentId\":1},{\"segmentName\":\"handset_cost\",\"title\":\"Handset Cost\",\"desc\":null,\"icon\":\"fas fa-hand-holding-usd\",\"price\":0.02,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Less than INR 1500\"},{\"id\":2,\"value\":\"INR 1500 - 3000\"},{\"id\":3,\"value\":\"INR 3001 - 5000\"},{\"id\":4,\"value\":\"INR 5K - 10K\"},{\"id\":5,\"value\":\"INR 10K - 15K\"},{\"id\":6,\"value\":\"INR 15K - 20K\"},{\"id\":7,\"value\":\"INR 20K - 30K\"},{\"id\":8,\"value\":\"INR 30K - 40K\"},{\"id\":9,\"value\":\"INR 40K+\"}]},\"segmentType\":\"MUL\",\"asmId\":133,\"basmId\":null,\"segmentId\":16},{\"segmentName\":\"data_user\",\"title\":\"Data User\",\"desc\":null,\"icon\":\"fa fa-user-lock\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Yes\"},{\"id\":2,\"value\":\"No\"}]},\"segmentType\":\"RDO\",\"asmId\":134,\"basmId\":null,\"segmentId\":8},{\"segmentName\":\"national_roaming\",\"title\":\"National Roaming\",\"desc\":null,\"icon\":\"fa fa-broadcast-tower\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Yes\"},{\"id\":2,\"value\":\"No\"}]},\"segmentType\":\"RDO\",\"asmId\":135,\"basmId\":null,\"segmentId\":7},{\"segmentName\":\"payment_model\",\"title\":\"Payment Model\",\"desc\":null,\"icon\":\"fa fa-money-bill-alt\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Prepaid\"},{\"id\":3,\"value\":\"Postpaid\"}]},\"segmentType\":\"RDO\",\"asmId\":136,\"basmId\":null,\"segmentId\":10},{\"segmentName\":\"handsetOS_category\",\"title\":\"Handset OS Category\",\"desc\":null,\"icon\":\"fab fa-opera\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"Android\"},{\"id\":2,\"value\":\"iOS\"},{\"id\":3,\"value\":\"Windows\"}]},\"segmentType\":\"MUL\",\"asmId\":137,\"basmId\":null,\"segmentId\":17},{\"segmentName\":\"handset_type\",\"title\":\"Handset Type\",\"desc\":null,\"icon\":\"fa fa-mobile-alt\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Feature Phone\"},{\"id\":3,\"value\":\"Smart Phone\"}]},\"segmentType\":\"RDO\",\"asmId\":138,\"basmId\":null,\"segmentId\":12},{\"segmentName\":\"ageof_device\",\"title\":\"Age of Device\",\"desc\":null,\"icon\":\"fas fa-clock\",\"price\":0.02,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"1-3 Months\"},{\"id\":2,\"value\":\"3-6 Months\"},{\"id\":3,\"value\":\"6-12 Months\"},{\"id\":4,\"value\":\"1 Year +\"}]},\"segmentType\":\"MUL\",\"asmId\":139,\"basmId\":null,\"segmentId\":18},{\"segmentName\":\"customer_BusinessCat\",\"title\":\"Customer Business Category\",\"desc\":null,\"icon\":\"fas fa-user-tie\",\"price\":0.02,\"subscriptionType\":\"premium\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"SME\"},{\"id\":2,\"value\":\"Enterprise\"}]},\"segmentType\":\"MUL\",\"asmId\":140,\"basmId\":null,\"segmentId\":22},{\"segmentName\":\"gender\",\"title\":\"Gender\",\"desc\":\"gender\",\"icon\":\"fa fa-user\",\"price\":0.0,\"subscriptionType\":\"basic\",\"values\":{\"minValue\":null,\"maxValue\":null,\"segmentValuesList\":[{\"id\":1,\"value\":\"All\"},{\"id\":2,\"value\":\"Male\"},{\"id\":3,\"value\":\"Female\"}]},\"segmentType\":\"RDO\",\"asmId\":141,\"basmId\":null,\"segmentId\":4},{\"segmentName\":\"amountRange\",\"title\":\"Amount\",\"desc\":\"Amount\",\"icon\":\"fa fa-users\",\"price\":0.99,\"subscriptionType\":\"Premium\",\"values\":{\"minValue\":100,\"maxValue\":900,\"segmentValuesList\":null},\"segmentType\":\"RNG\",\"asmId\":235,\"basmId\":null,\"segmentId\":2},{\"segmentName\":\"amountRange\",\"title\":\"Amount\",\"desc\":\"Amount\",\"icon\":\"fa fa-users\",\"price\":0.99,\"subscriptionType\":\"Premium\",\"values\":{\"minValue\":100,\"maxValue\":900,\"segmentValuesList\":null},\"segmentType\":\"RNG\",\"asmId\":236,\"basmId\":null,\"segmentId\":2}]}\r\n        if (data.success) {\r\n          let temp = this.state.formControls;\r\n        //     // () => {\r\n        //     //   if (isprefill) {\r\n        //     //     this.populateCampaignData();\r\n        //     //     this.populateSegmentFiltersData();\r\n        //     //     let qp = utils.getQueryParams();\r\n        //     //     if (qp && qp.p) {\r\n        //     //       this.computeDetails();\r\n        //     //     }\r\n        //       }\r\n        //     }\r\n        //   );\r\n        // } else {\r\n        //   this.setState({\r\n        //     campaignSegmentDetail: [],\r\n        //   });\r\n        }\r\n        ToastsStore.success(data.message);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        ToastsStore.error(\"Something went wrong, Please Try Again Later \");\r\n      });\r\n  }\r\n\r\n  const props = { formControls,segmentData, changeHandler, audienceData, setaudienceData };\r\n\r\n  return (\r\n    <>\r\n      <CampaignCreateSegment {...props} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SegmentForm;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignWhenTemplate.js",["782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799"],"import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport {\r\n  Dropdown,\r\n  Form,\r\n  Header,\r\n  Button,\r\n  Segment,\r\n  Ref,\r\n  Input,\r\n  Radio,\r\n  TextArea,\r\n} from \"semantic-ui-react\";\r\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\r\n\r\nimport Onetime from \"./CampaignOneTime\";\r\nimport Triggered from \"./CampaignTrigger\";\r\nimport Recurring from \"./CampaignRecurring\";\r\n// import \"./when.css\";\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst CampaignWhenTemplate = (props) => {\r\n  const {\r\n    FormData,\r\n    tagsOption,\r\n    timeOption,\r\n    timeHandler,\r\n    FormDataError,\r\n    changeHandler,\r\n    submitHandler,\r\n    navigation,\r\n  } = props;\r\n  return (\r\n    <>    \r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n        <div className=\"col-sm-12\">  \r\n        <div className=\"shadow-sm p-0\">\r\n      <Header as=\"h3\" attached=\"top\" >\r\n          Create New Campaign\r\n        </Header>\r\n          <Segment attached>\r\n            <div className=\"ui big breadcrumb\">\r\n              <a className=\"section\"> Audience </a>\r\n              <i className=\"right chevron icon divider\"> </i>\r\n              <a className=\"active-nav\"> When </a>\r\n              <i className=\"right chevron icon divider\"> </i>\r\n              <a className=\"section\"> Message </a>\r\n              <i className=\"right chevron icon divider\"> </i>\r\n              <a className=\"section\"> Preview & Launch </a>\r\n            </div>\r\n          </Segment>\r\n          </div>\r\n         \r\n      </div>\r\n          <div className=\"col-sm-12\">\r\n         \r\n          <div className=\"when-card  shadow-sm border-0\">\r\n          <Header as=\"h3\" attached=\"top\" className=\"when-header\">\r\n          Campaign Type & Schedule\r\n        </Header>\r\n            <Form onSubmit={submitHandler}>\r\n              <Form.Field inline>\r\n                <div className=\"mb-3 row\">\r\n                  <label\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-3 mt-5\"\r\n                  >\r\n                    Campaign Type\r\n                  </label>\r\n                  <div className=\"col-sm-6 mt-4\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      label=\"One time\"\r\n                      className=\"mr-1\"\r\n                      name=\"campaignScheduleType\"\r\n                      value=\"ONETIME\"\r\n                      checked={FormData.campaignScheduleType === \"ONETIME\"}\r\n                      onChange={changeHandler}\r\n                    />\r\n                    <label className=\"radio-label\">One Time</label>\r\n                    <br />\r\n                    <input\r\n                      type=\"radio\"\r\n                      className=\"mr-1\"\r\n                      label=\"Triggered\"\r\n                      name=\"campaignScheduleType\"\r\n                      value=\"TRIGGERED\"\r\n                      checked={FormData.campaignScheduleType === \"TRIGGERED\"}\r\n                      onChange={changeHandler}\r\n                    />\r\n                    <label className=\"radio-label\">Triggered</label>\r\n                    <br />\r\n                    <input\r\n                      type=\"radio\"\r\n                      className=\"mr-1\"\r\n                      name=\"campaignScheduleType\"\r\n                      value=\"RECURRING\"\r\n                      checked={FormData.campaignScheduleType === \"RECURRING\"}\r\n                      onChange={changeHandler}\r\n                    />\r\n\r\n                    <label className=\"radio-label\">Recurring</label>\r\n                    {!FormData.campaignScheduleType ? (\r\n                      <small className=\"text-danger\" className=\"text-danger\">\r\n                        {FormDataError.campaignScheduleType}\r\n                      </small>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              </Form.Field>\r\n              {FormData.campaignScheduleType == \"ONETIME\" ? (\r\n                <div>\r\n                  <Onetime {...props} />\r\n                </div>\r\n              ) : null}\r\n              {/* triggered  */}\r\n              {FormData.campaignScheduleType == \"TRIGGERED\" ? (\r\n                <div>\r\n                  <Triggered {...props} />\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {FormData.campaignScheduleType === \"RECURRING\" ? (\r\n                <div>\r\n                  <Recurring {...props} />\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <br />\r\n              <div className=\"form-btn\">\r\n              <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  color=\"green\"\r\n                  style={{ marginTop: \"1rem\" }}\r\n                  onClick={() => navigation.next()}\r\n                >\r\n                  Save & Continue\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CampaignWhenTemplate;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignCreateSegment.js",["800","801","802","803","804","805","806","807","808","809","810","811"],"import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Checkbox,\r\n  Divider,\r\n  Icon,\r\n  Modal,\r\n  Radio,\r\n  Accordion,\r\n} from \"semantic-ui-react\";\r\nimport InputRange from \"react-input-range\";\r\nimport { IoIosArrowForward } from \"react-icons/io\";\r\nimport CampaignSegmentAudience from \"./CampaignSegmentAudience\";\r\n// import \"./audience.css\";\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nfunction CampaignCreateSegment(props) {\r\n  const {\r\n    FormData,\r\n    changeHandler,\r\n    tagsOption,\r\n    handleTags,\r\n    audienceData,\r\n    setaudienceData,\r\n    segmentData,\r\n    setSegmentData,\r\n  } = props;\r\n\r\n  console.log(props.segmentData);\r\n\r\n  const [activeIndex, setactiveIndex] = React.useState(\"\");\r\n  const option = [\r\n    { label: \"create a new Audience\", value: 0 },\r\n    { label: \"Upload/Update Audience\", value: 1 },\r\n  ];\r\n\r\n  const handleClick = (e, titleProps) => {\r\n    const { index } = titleProps;\r\n    const newIndex = activeIndex === index ? -1 : index;\r\n\r\n    setactiveIndex(newIndex);\r\n    console.log(activeIndex);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        data-toggle=\"modal\"\r\n        data-target=\"#addSegment\"\r\n      >\r\n        Segment\r\n      </button>\r\n      <div className=\"\">\r\n        <div\r\n          class=\"modal fade modal fade bd-example-modal-lg bd-example-modal-xl\"\r\n          id=\"addSegment\"\r\n          tabindex=\"-1\"\r\n          role=\"dialog\"\r\n          aria-labelledby=\"exampleModalCenterTitle\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <div\r\n            class=\"modal-dialog modal-dialog-centered modal-dialog modal-lg\"\r\n            role=\"document\"\r\n          >\r\n            <div class=\"modal-content\">\r\n              <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">\r\n                  Create New Segment\r\n                </h5>\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"close\"\r\n                  data-dismiss=\"modal\"\r\n                  aria-label=\"Close\"\r\n                >\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n              <div class=\"modal-body\">\r\n                <div class=\"modal-footer\">\r\n                  <Button type=\"btn\" class=\"btn \" color=\"green\">\r\n                    Save\r\n                  </Button>\r\n                </div>\r\n                <Form>\r\n                  <h4> Segment Details</h4>\r\n                  <Form.Field inline>\r\n                    <label className=\"modal-label\">Name Your Segment :</label>\r\n                    <input\r\n                      placeholder=\"type your segment name..\"\r\n                      style={{ minWidth: 230, width: 370 }}\r\n                      onChange={changeHandler}\r\n                      name=\"segmentName\"\r\n                      value={segmentData.segmentName}\r\n                    />\r\n                  </Form.Field>\r\n                  <Accordion\r\n                    fluid\r\n                    className=\"custom-accordian\"\r\n                    style={{ marginBottom: 5 }}\r\n                  >\r\n                    <Accordion.Title\r\n                      active={activeIndex === 0}\r\n                      index={0}\r\n                      className=\"p-3\"\r\n                      onClick={handleClick}\r\n                    >\r\n                      <Icon name=\"angle right\" />\r\n                      Audience\r\n                    </Accordion.Title>\r\n                    <Accordion.Content active={activeIndex === 0}>\r\n                      <div className=\"m-4\">\r\n                        <Form.Field>\r\n                         \r\n                            <label className=\"modal-label\">Audience Type</label>\r\n                         <div className=\"\">\r\n                            <Select\r\n                              name=\"audienceType\"\r\n                              placeholder=\"select-Type\"\r\n                              options={option}\r\n                              lable=\"Audience Type\"\r\n                              defaultValue={0}\r\n                              onChange={(e) => {\r\n                                console.log(e.value);\r\n                                setaudienceData({ audienceType: e.value });\r\n                              }}\r\n                            />\r\n                            </div>\r\n                         </Form.Field>\r\n                      </div>\r\n                      {audienceData.audienceType == 0 ? (\r\n                        <div>\r\n                          <h3>User Attribute</h3>\r\n                          <Form.Field inline>\r\n                            <div className=\"mb-3 row\">\r\n                              <label\r\n                                htmlFor=\"staticEmail\"\r\n                                className=\"col-sm-2 mt-4 col-form-label\"\r\n                              >\r\n                                Gender\r\n                              </label>\r\n                              <div className=\"col-sm-8\">\r\n                                <label className=\"radio-label\">\r\n                                  <input\r\n                                    type=\"radio\"\r\n                                    className=\"mr-1\"\r\n                                    name=\"gender\"\r\n                                    value=\"All\"\r\n                                    checked={segmentData.gender == \"All\"}\r\n                                    onChange={changeHandler}\r\n                                  />\r\n                                  All\r\n                                </label>\r\n                                <br />\r\n\r\n                                <label className=\"radio-label\">\r\n                                  <input\r\n                                    type=\"radio\"\r\n                                    className=\"mr-1\"\r\n                                    name=\"gender\"\r\n                                    value=\"Male\"\r\n                                    checked={segmentData.gender == \"Male\"}\r\n                                    onChange={changeHandler}\r\n                                  />\r\n                                  Male\r\n                                </label>\r\n                                <br />\r\n\r\n                                <label className=\"radio-label\">\r\n                                  <input\r\n                                    type=\"radio\"\r\n                                    className=\"mr-1\"\r\n                                    name=\"gender\"\r\n                                    value=\"Female\"\r\n                                    checked={segmentData.gender == \"Female\"}\r\n                                    onChange={changeHandler}\r\n                                  />\r\n                                  Female\r\n                                </label>\r\n                              </div>\r\n                            </div>\r\n                          </Form.Field>\r\n                          <Divider />\r\n                          <Form.Field inline>\r\n                            <div className=\"mb-3 row\">\r\n                              <label\r\n                                htmlFor=\"staticEmail\"\r\n                                className=\"col-sm-3 form-label\"\r\n                              >\r\n                                City\r\n                              </label>\r\n                              <div className=\"col-sm-7\">\r\n                                <input\r\n                                  placeholder=\"type here\"\r\n                                  name=\"city\"\r\n                                  value={segmentData.city}\r\n                                  onChange={changeHandler}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </Form.Field>\r\n                          <Divider />\r\n                          {/* <div className=\"col-10\">\r\n                              {item.segmentType === \"RNG\" && (\r\n                                <div style={{ padding: \"36px 32px 36px 8px\" }}>\r\n                                  <InputRange\r\n                                    draggableTrack\r\n                                    maxValue={item.values.maxValue}\r\n                                    minValue={item.values.minValue}\r\n                                    onChange={(value) => {\r\n                                      this.filtersChangeHandler(value, index);\r\n                                    }}\r\n                                    value={item.value}\r\n                                  /> */}\r\n                                {/* </div> */}\r\n                              )}\r\n                           {/* </div> */}\r\n                          <Form.Field inline>\r\n                            <div className=\"mb-3 row\">\r\n                              <label\r\n                                htmlFor=\"staticEmail\"\r\n                                className=\"col-sm-3 form-label\"\r\n                              >\r\n                                Pincode\r\n                              </label>\r\n                              <div className=\"col-sm-7\">\r\n                                <input\r\n                                  placeholder=\"type here\"\r\n                                  onChange={changeHandler}\r\n                                  name=\"pincode\"\r\n                                  value={segmentData.pincode}\r\n                                  onChange={changeHandler}\r\n                                  // value={FormData.PinCode.value}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </Form.Field>\r\n                        </div>\r\n                      ) : (\r\n                        <div>\r\n                          <CampaignSegmentAudience {...props} />\r\n                        </div>\r\n                      )}\r\n                      {/* </div> */}\r\n                    </Accordion.Content>\r\n                  </Accordion>\r\n                  <Accordion\r\n                    fluid\r\n                    className=\"custom-accordian\"\r\n                    style={{ marginBottom: 5 }}\r\n                  >\r\n                    <Accordion.Title\r\n                      active={activeIndex === 1}\r\n                      index={1}\r\n                      className=\"p-3\"\r\n                      onClick={handleClick}\r\n                    >\r\n                      <Icon name=\"angle right\" />\r\n                      Behavioral\r\n                    </Accordion.Title>\r\n                    <Accordion.Content active={activeIndex === 1}>\r\n                      <Form.Field className=\"ml-3\">\r\n                        <label className=\"modal-label\">\r\n                          Users who DID these Events:\r\n                        </label>\r\n                        <div className=\"col-sm-6\">\r\n                          <Select placeholder=\"-select-event-\" />\r\n                        </div>\r\n                      </Form.Field>\r\n                      <Divider horizontal>\r\n                        <div>\r\n                          <Button.Group>\r\n                            <Button\r\n                              color=\"green\"\r\n                              className=\"green-btn\"\r\n                              content=\"And\"\r\n                            />\r\n                            <Button className=\"white-btn\" content=\"Or\" />\r\n                          </Button.Group>\r\n                        </div>\r\n                      </Divider>\r\n                      <Form.Field className=\"ml-3\">\r\n                        <label className=\"modal-label\">\r\n                          Users who DID NOT do these meetings\r\n                        </label>\r\n                        <div className=\"col-sm-6\">\r\n                          <Select placeholder=\"-select-event-\" />\r\n                        </div>\r\n                        <div className=\"reset\">Reset</div>\r\n                      </Form.Field>\r\n                    </Accordion.Content>\r\n                  </Accordion>\r\n                  <Accordion fluid className=\"custom-accordian\">\r\n                    <Accordion.Title\r\n                      active={activeIndex === 2}\r\n                      index={2}\r\n                      className=\"p-3\"\r\n                      onClick={handleClick}\r\n                    >\r\n                      <Icon name=\"angle right\" />\r\n                      Filter By Tags\r\n                    </Accordion.Title>\r\n                    <Accordion.Content active={activeIndex === 2}>\r\n                      <Form.Field className=\"ml-3\">\r\n                        <label\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-3 col-form-label\"\r\n                        >\r\n                          Campaign Tags :\r\n                        </label>\r\n                        <Select\r\n                          className=\"cat-input\"\r\n                          closeMenuOnSelect={false}\r\n                          components={animatedComponents}\r\n                          defaultValue=\"select\"\r\n                          isMulti\r\n                          options={tagsOption}\r\n                          name=\"tagIds\"\r\n                          onChange={handleTags}\r\n                        />\r\n                      </Form.Field>\r\n                    </Accordion.Content>\r\n                  </Accordion>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CampaignCreateSegment;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignRecurring.js",["812","813","814","815","816"],"import React from \"react\";\r\n// import { Container, Row } from \"react-bootstrap\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { Checkbox, Form } from \"semantic-ui-react\";\r\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\r\n// import \"./when.css\";\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst Recurring = (props) => {\r\n  const {\r\n    FormData,\r\n    setFormData,\r\n    timeOption,\r\n    timeHandler,\r\n    FormDataError,\r\n    changeHandler,\r\n    submitHandler,\r\n  } = props;\r\n\r\n  const checkboxChangeHandler = (event, data) => {\r\n    const value = data.checked;\r\n    console.log(data);\r\n    console.log(value);\r\n    // this.setState({ [data.name]: data.checked });\r\n    // console.log(value); // It is giving undefined here\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form.Field inline>\r\n        <div className=\"mb-3 row\">\r\n          <label className=\"col-sm-3 col-form-label\"> Start Date </label>\r\n          <div className=\"col-sm-8\">\r\n            <SemanticDatepicker\r\n              name=\"startDate\"\r\n              className=\"custom-datepicker\"\r\n              placeholder=\"click to select date\"\r\n              value={FormData.startDate}\r\n              onChange={(e, d) => {\r\n                console.log(d.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Form.Field>\r\n      <Form.Group widths=\"equal\">\r\n        <div className=\"mb-3 row\">\r\n          <Form.Field inline>\r\n            <label className=\"col-sm-12 col-form-label\">\r\n              Delivery Schedule\r\n            </label>\r\n            <label>Repeat Every</label>\r\n            <Checkbox\r\n              name=\"recurringInfo.frequency\"\r\n              // value=\"\"\r\n              // checked={FormData.frequency == \"1\"}\r\n              onChange={(event, data) => {\r\n                console.log(event);\r\n                console.log(data);\r\n                const frequency = data.checked;\r\n                // setFormData({ ...FormData, [FormData.recurringInfo.frequency]: frequency })\r\n                FormData.recurringInfo.frequency = frequency;\r\n                // console.log(value); // It is giving undefined here\r\n              }}\r\n            />\r\n          </Form.Field>\r\n          <span className=\"mt-2 mr-2 h5\">on</span>\r\n          <Form.Field>\r\n            <ul>\r\n              <li>\r\n                <label for=\"muhRadio1\">\r\n                  <input type=\"radio\" name=\"muhRadio\" value=\"\" /> Help\r\n                </label>\r\n              </li>\r\n              <li>\r\n                <label for=\"muhRadio2\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    className=\"weekdays\"\r\n                    name=\"muhRadio\"\r\n                    value=\"\"\r\n                  />{\" \"}\r\n                  Yep\r\n                </label>\r\n              </li>\r\n              <li>\r\n                <label for=\"muhRadio3\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    className=\"weekdays\"\r\n                    name=\"muhRadio\"\r\n                    value=\"\"\r\n                  />{\" \"}\r\n                  Something\r\n                </label>\r\n              </li>\r\n              <li>\r\n                <label for=\"muhRadio4\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"muhRadio\"\r\n                    className=\"weekdays\"\r\n                    value=\"\"\r\n                  />{\" \"}\r\n                  Farts\r\n                </label>\r\n              </li>\r\n            </ul>\r\n\r\n            {/* <div class=\"weekDays-selector\">\r\n            <input type=\"radio\" id=\"weekday-mon\" className=\"weekday\" />\r\n            <label for=\"weekday-mon\">M</label>\r\n            <input type=\"radio\" id=\"weekday-tue\" className=\"weekday\" />\r\n            <label for=\"weekday-tue\">T</label>\r\n            <input type=\"radio\" id=\"weekday-wed\" className=\"weekday\" />\r\n            <label for=\"weekday-wed\">W</label>\r\n            <input type=\"radio\" id=\"weekday-thu\" className=\"weekday\" />\r\n            <label for=\"weekday-thu\">T</label>\r\n            <input type=\"radio\" id=\"weekday-fri\" className=\"weekday\" />\r\n            <label for=\"weekday-fri\">F</label>\r\n            <input type=\"radio\" id=\"weekday-sat\" className=\"weekday\" />\r\n            <label for=\"weekday-sat\">S</label>\r\n            <input type=\"radio\" id=\"weekday-sun\" className=\"weekday\" />\r\n            <label for=\"weekday-sun\">S</label>\r\n          </div> */}\r\n          </Form.Field>\r\n        </div>\r\n        <span className=\"mt-2 mr-2 h5\">at</span>\r\n        <Form.Field inline>\r\n          <div className=\"col-6 col-md-4\">\r\n            <Select\r\n              className=\"cat-input\"\r\n              components={animatedComponents}\r\n              defaultValue=\"select\"\r\n              placeholder=\"-Select Time-\"\r\n              options={timeOption}\r\n              name=\"startTimeInterval\"\r\n              onChange={(e) => (FormData.startTimeInterval = e.value)}\r\n            />\r\n          </div>\r\n        </Form.Field>\r\n      </Form.Group>\r\n      <Form.Field inline>\r\n        <div className=\"mb-3 row\">\r\n          <label htmlFor=\"staticEmail\" className=\"col-sm-3 col-form-label\">\r\n            End Date\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                label=\"Send to users in a single segment\"\r\n                name=\"endType\"\r\n                className=\"mr-1\"\r\n                value={\"0\"}\r\n                checked={FormData.endType === \"0\"}\r\n                onChange={changeHandler}\r\n              />\r\n              Till\r\n            </label>\r\n            <br />\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                label=\"Send to users in a single segment multiple segment/\"\r\n                name=\"endType\"\r\n                className=\"mr-1\"\r\n                value={\"1\"}\r\n                checked={FormData.endType === \"1\"}\r\n                onChange={changeHandler}\r\n              />\r\n              Never\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </Form.Field>\r\n      {FormData.endType === \"1\" ? (\r\n        <div className=\"offset-3\">\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Field>\r\n              <div className=\"date\">\r\n                <SemanticDatepicker\r\n                  name=\"endDate\"\r\n                  placeholder=\"-Click to select date-\"\r\n                  value={FormData.endDate}\r\n                  onChange={(e) => console.log(e)}\r\n                />\r\n              </div>\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <Select\r\n                className=\"cat-input\"\r\n                placeholder=\"-Select Time-\"\r\n                components={animatedComponents}\r\n                defaultValue=\"select\"\r\n                options={timeOption}\r\n                name=\"endTimeInterval\"\r\n                onChange={(e) => (FormData.endTimeInterval = e.value)}\r\n              />\r\n            </Form.Field>\r\n          </Form.Group>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recurring;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignTrigger.js",["817","818","819"],"import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\r\n// import \"./when.css\";\r\nconst animatedComponents = makeAnimated();\r\nconst Triggered = (props) => {\r\n  const {\r\n    FormData,\r\n    timeOption,\r\n    timeHandler,\r\n    FormDataError,\r\n    changeHandler,\r\n    submitHandler,\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Form.Field inline>\r\n        <div className=\"row\">\r\n          <label className=\"col-sm-1 col-form-label\">Upon Occurence Of:</label>\r\n          <div className=\"col-sm-6 ml-5\">\r\n            <Select\r\n              className=\"cat-input mt-4 ml-4\"\r\n              components={animatedComponents}\r\n              defaultValue=\"select\"\r\n              options={timeOption}\r\n              placeholder=\"-Select Event-\"\r\n              name=\"startTimeInterval\"\r\n              onChange={(e) => (FormData.startTimeInterval = e.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Form.Field>\r\n      <Form.Field inline>\r\n        <div className=\"mb-3 row\">\r\n          <label htmlFor=\"staticEmail\" className=\"col-sm-3 col-form-label\">\r\n            Start Date\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                className=\"mr-1\"\r\n                label=\"Send to users in a single segment\"\r\n                name=\"startType\"\r\n                value={\"0\"}\r\n                checked={FormData.startType === \"0\"}\r\n                onChange={changeHandler}\r\n              />\r\n              Now\r\n            </label>\r\n            <br />\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                className=\"mr-1\"\r\n                label=\"Send to users in a single segment multiple segment/\"\r\n                name=\"startType\"\r\n                value={\"1\"}\r\n                checked={FormData.startType === \"1\"}\r\n                onChange={changeHandler}\r\n              />\r\n              Later\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </Form.Field>\r\n      {FormData.startType === \"1\" ? (\r\n        <div className=\"offset-3\">\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Field>\r\n              <div className=\"date\">\r\n                <SemanticDatepicker\r\n                  name=\"startDate\"\r\n                  placeholder=\"click to select date\"\r\n                  value={FormData.startDate}\r\n                  onChange={(e) => console.log(e)}\r\n                />\r\n              </div>\r\n            </Form.Field>\r\n            <Form.Field inline>\r\n              <Select\r\n                className=\"cat-input\"\r\n                placeholder=\"select time\"\r\n                components={animatedComponents}\r\n                defaultValue=\"select\"\r\n                options={timeOption}\r\n                name=\"startTimeInterval\"\r\n                onChange={(e) => (FormData.startTimeInterval = e.value)}\r\n              />\r\n            </Form.Field>\r\n          </Form.Group>\r\n        </div>\r\n      ) : null}\r\n      <Form.Field inline>\r\n        <div className=\"mb-3 row\">\r\n          <label htmlFor=\"staticEmail\" className=\"col-sm-3 col-form-label\">\r\n            End Date\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                label=\"Send to users in a single segment\"\r\n                name=\"endType\"\r\n                className=\"mr-1\"\r\n                value={\"0\"}\r\n                checked={FormData.endType === \"0\"}\r\n                onChange={changeHandler}\r\n              />\r\n              Now\r\n            </label>\r\n            <br />\r\n            <label className=\"radio-label\">\r\n              <input\r\n                type=\"radio\"\r\n                label=\"Send to users in a single segment multiple segment/\"\r\n                className=\"mr-1\"\r\n                name=\"endType\"\r\n                value={\"1\"}\r\n                checked={FormData.endType === \"1\"}\r\n                onChange={changeHandler}\r\n              />\r\n              Later\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </Form.Field>\r\n      {FormData.endType === \"1\" ? (\r\n        <div className=\"offset-3\">\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Field>\r\n              <div className=\"date\">\r\n                <SemanticDatepicker\r\n                  name=\"endDate\"\r\n                  placeholder=\"click to select date\"\r\n                  value={FormData.endDate}\r\n                  onChange={(e) => console.log(e)}\r\n                />\r\n              </div>\r\n            </Form.Field>\r\n            <Form.Field inline>\r\n              <Select\r\n                className=\"cat-input\"\r\n                placeholder=\"select time\"\r\n                components={animatedComponents}\r\n                defaultValue=\"select\"\r\n                options={timeOption}\r\n                name=\"endTimeInterval\"\r\n                onChange={(e) => (FormData.endTimeInterval = e.value)}\r\n              />\r\n            </Form.Field>\r\n          </Form.Group>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Triggered;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignOneTime.js",["820","821","822"],"import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\r\n// import \"./when.css\";\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst Onetime = (props) => {\r\n  const {\r\n    FormData,\r\n    timeOption,\r\n    timeHandler,\r\n    FormDataError,\r\n    changeHandler,\r\n    submitHandler,\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n        <Form>\r\n          <Form.Field inline>\r\n          <div className=\"mb-3 row\">\r\n                  <label\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-3 form-label\"\r\n                  >\r\n                Delivery Time\r\n              </label>\r\n              <div className=\"col-sm-6\">\r\n                <label className=\"radio-label\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    className=\"mr-1\"\r\n                    label=\"Send to users in a single segment\"\r\n                    name=\"deliveryTime\"\r\n                    value={\"0\"}\r\n                    checked={FormData.deliveryTime === \"0\"}\r\n                    onChange={changeHandler}\r\n                  />\r\n                  Now\r\n                </label>\r\n                <br />\r\n                <label className=\"radio-label\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    className=\"mr-1\"\r\n                    label=\"Send to users in a single segment multiple segment/\"\r\n                    name=\"deliveryTime\"\r\n                    value={\"1\"}\r\n                    checked={FormData.deliveryTime === \"1\"}\r\n                    onChange={changeHandler}\r\n                  />\r\n                  Later\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </Form.Field>\r\n          {FormData.deliveryTime === \"1\" ? (\r\n            <div className=\"offset-3\">\r\n              <Form.Group widths=\"equal\">\r\n                <Form.Field inline>\r\n                  <label className=\"radio-label\">Schedule Date</label>\r\n                  <div className=\"date\">\r\n                    <SemanticDatepicker\r\n                      name=\"startDate\"\r\n                      //    value={FormData.startDate}\r\n                      placeholder=\"-Click to select date-\"\r\n                      onChange={(e) => console.log(e)}\r\n                    />\r\n                  </div>\r\n                </Form.Field>\r\n                <Form.Field >\r\n                  <label className=\" radio-label\">Schedule Time:</label>\r\n                  <Select\r\n                    className=\"cat-input\"\r\n                    components={animatedComponents}\r\n                    defaultValue=\"select\"\r\n                    placeholder=\"-Select Time-\"\r\n                    options={timeOption}\r\n                    name=\"startTimeInterval\"\r\n                    onChange={(e) => (FormData.startTimeInterval = e.value)}\r\n                  />\r\n                </Form.Field>\r\n              </Form.Group>\r\n            </div>\r\n          ) : null}\r\n        </Form>\r\n      </div>\r\n      </div>\r\n      </div> \r\n         </div>\r\n  );\r\n};\r\n\r\nexport default Onetime;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\CampaignSegmentAudience.js",["823","824","825","826","827","828","829","830","831","832"],"import React, { useState } from \"react\";\r\nimport utils from \"../../../Services/utility-service\";\r\n\r\n// import \"./audience.css\";\r\nconst CampaignSegmentAudience = (props) => {\r\n  const { changeHandler } = props;\r\n  const [fileFormat, setFileFormat] = useState(null);\r\n  const [operation, setOperation] = useState(\"fileUpload\");\r\n  const [gpUpdate, setgpUpdate] = useState(null);\r\n  const [groupNameList, setgroupNameList] = useState([]);\r\n  const [audienceData, setaudienceData] = useState([]);\r\n  const [audienceGroupId, setaudienceGroupId] = useState(null);\r\n  const [fetchingData, setfetchingData] = useState(false);\r\n  const [formControls, setFormControls] = useState({\r\n    file: {\r\n      value: null,\r\n    },\r\n    gpName: {\r\n      value: null,\r\n    },\r\n  });\r\n\r\n  const radioChangeHandler = (event, params) => {\r\n    let v = event.target.value;\r\n    if (params === \"operation\") {\r\n      setOperation(v);\r\n      setFileFormat(null);\r\n    } else if (params === \"fileFormat\") {\r\n      setFileFormat(event.target.value);\r\n    }\r\n  };\r\n\r\n  const handleUpload = () => {};\r\n\r\n  const chooseAgain = () => {};\r\n\r\n  return (\r\n    <div>\r\n      {/* <Popup title={'Upload/Update Audience'} togglePopup={this.togglePopup.bind(this)}></Popup> */}\r\n      <article className=\"padding-all-12 ml-5 col-20\">\r\n        <div className=\"label\">Please select one of the operation</div>\r\n        <label for=\"fileUpload\" className=\"modal-label1\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"operation\"\r\n            value=\"fileUpload\"\r\n            className=\"mr-2\"\r\n            id=\"fileUpload\"\r\n            onChange={(e) => {\r\n              radioChangeHandler(e, \"operation\");\r\n            }}\r\n          />\r\n          Add New Audience\r\n        </label>\r\n        <label for=\"fileUpdate\" className=\"modal-label1\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"operation\"\r\n            className=\"mr-2\"\r\n            checked={operation === \"fileUpdate\"}\r\n            id=\"fileUpdate\"\r\n            value=\"fileUpdate\"\r\n            onChange={(e) => {\r\n              radioChangeHandler(e, \"operation\");\r\n            }}\r\n          />\r\n          Update Audience\r\n        </label>\r\n      </article>\r\n      {operation === \"fileUpload\" ? (\r\n        <div className=\"file-upload--card pad--half flex flex-direction--col m-4\">\r\n          <div className=\"section-title\">File Upload</div>\r\n          <div className=\"col-20 margin-top--half margin-btm--half\">\r\n            <div className=\"modal-label\">Group Name</div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"groupName\"\r\n              style={{ width: \"100%\" }}\r\n            />\r\n            <div class=\"form-group form-check mt-2\">\r\n              <input\r\n                className=\"mr-1 mt-1\"\r\n                type=\"checkbox\"\r\n                name=\"remember\"\r\n                value=\"1\"\r\n                id=\"remember\"\r\n              />\r\n              <label class=\"form-check-label\" for=\"exampleCheck1\">\r\n                SHA Encryption Required\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <article className=\"margin-btm--half\">\r\n            <div>\r\n              <b>Please select format</b>\r\n            </div>\r\n            <form\r\n              className=\"flex align-space-between\"\r\n              style={{\r\n                border: \"1px solid rgb(204, 204, 204)\",\r\n                borderRadius: \"5px\",\r\n                padding: \"5px\",\r\n              }}\r\n            >\r\n              <span>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\".xls\"\r\n                  value=\".xls\"\r\n                  name=\".xls\"\r\n                  checked={fileFormat === \".xls\"}\r\n                  onChange={(e) => {\r\n                    radioChangeHandler(e, \"fileFormat\");\r\n                  }}\r\n                  style={{ marginRight: \"5px\" }}\r\n                />\r\n                <label for=\".xls\">XLS</label>\r\n                <div>\r\n                  <a\r\n                    href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\" \"\r\n                  >\r\n                    <b>\r\n                      <u>Download xls Template</u>\r\n                    </b>\r\n                  </a>\r\n                </div>\r\n              </span>\r\n              <span>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\".xlsx\"\r\n                  value=\".xlsx\"\r\n                  name=\".xlsx\"\r\n                  checked={fileFormat === \".xlsx\"}\r\n                  onChange={(e) => {\r\n                    radioChangeHandler(e, \"fileFormat\");\r\n                  }}\r\n                  style={{ marginRight: \"5px\" }}\r\n                />\r\n                <label for=\".xlsx\">XLSX</label>\r\n                <div>\r\n                  <a\r\n                    href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_XLSX.xlsx\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\" \"\r\n                  >\r\n                    <b>\r\n                      <u>Download xlsx Template</u>\r\n                    </b>\r\n                  </a>\r\n                </div>\r\n              </span>\r\n              <span>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\".csv\"\r\n                  value=\".csv\"\r\n                  name=\".csv\"\r\n                  checked={fileFormat === \".csv\"}\r\n                  onChange={(e) => {\r\n                    radioChangeHandler(e, \"fileFormat\");\r\n                  }}\r\n                  style={{ marginRight: \"5px\" }}\r\n                />\r\n                <label for=\".csv\">CSV</label>\r\n                <div>\r\n                  <a\r\n                    href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\" \"\r\n                  >\r\n                    <b>\r\n                      <u>Download csv Template</u>\r\n                    </b>\r\n                  </a>\r\n                </div>\r\n              </span>\r\n            </form>\r\n          </article>\r\n          <form>\r\n            <input\r\n              type=\"file\"\r\n              accept={`${fileFormat}`}\r\n              className=\"form-control\"\r\n              name=\"file\"\r\n              id=\"file\"\r\n              style={{ width: \"100%\" }}\r\n              onChange={changeHandler}\r\n            />\r\n            <div className=\"col-20\">\r\n              <p style={{ color: \"green\" }}>\r\n                Please upload {`${fileFormat}`} file only\r\n              </p>\r\n              {/* <a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\" className=\"\"><b><u>Download csv Template</u></b></a> */}\r\n            </div>\r\n          </form>\r\n        </div>\r\n      ) : (\r\n        <article className=\"file-upload--card pad--half flex flex-direction--col m-4\">\r\n          <div className=\"col-14 margin-btm--half\">\r\n            <div className=\"modal-label\">Group Name</div>\r\n            <select\r\n              className=\"form-control\"\r\n              style={utils.isMobile ? { width: \"100%\" } : { width: \"100%\" }}\r\n              name=\"gpUpdate\"\r\n              onChange={(e) => ({ gpUpdate: e.target.value })}\r\n              id=\"gNameUpdate\"\r\n            >\r\n              <option>Choose...</option>\r\n              {groupNameList.map((item, index) => {\r\n                return (\r\n                  <option key={index} value={item.agId}>\r\n                    {item.name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </div>\r\n\r\n          {/* --------------------- */}\r\n\r\n          <article className=\"margin-btm--half\">\r\n            <div>\r\n              <b>Please select format</b>\r\n            </div>\r\n            <form\r\n              className=\"flex align-space-between\"\r\n              style={{\r\n                border: \"1px solid rgb(204, 204, 204)\",\r\n                borderRadius: \"5px\",\r\n                padding: \"5px\",\r\n              }}\r\n            >\r\n              <span>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\".xls\"\r\n                  value=\".xls\"\r\n                  name=\".xls\"\r\n                  checked={fileFormat === \".xls\"}\r\n                  onChange={(e) => {\r\n                    radioChangeHandler(e, \"fileFormat\");\r\n                  }}\r\n                  style={{ marginRight: \"5px\" }}\r\n                />\r\n                <label for=\".xls\">XLS</label>\r\n                <div>\r\n                  <a\r\n                    href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\" \"\r\n                  >\r\n                    <b>\r\n                      <u>Download xls Template</u>\r\n                    </b>\r\n                  </a>\r\n                </div>\r\n              </span>\r\n              <span>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\".xlsx\"\r\n                  value=\".xlsx\"\r\n                  name=\".xlsx\"\r\n                  checked={fileFormat === \".xlsx\"}\r\n                  onChange={(e) => {\r\n                    radioChangeHandler(e, \"fileFormat\");\r\n                  }}\r\n                  style={{ marginRight: \"5px\" }}\r\n                />\r\n                <label for=\".xlsx\">XLSX</label>\r\n                <div>\r\n                  <a\r\n                    href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_XLSX.xlsx\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\" \"\r\n                  >\r\n                    <b>\r\n                      <u>Download xlsx Template</u>\r\n                    </b>\r\n                  </a>\r\n                </div>\r\n              </span>\r\n              <span>\r\n                <input\r\n                  type=\"radio\"\r\n                  id=\".csv\"\r\n                  value=\".csv\"\r\n                  name=\".csv\"\r\n                  checked={fileFormat === \".csv\"}\r\n                  onChange={(e) => {\r\n                    radioChangeHandler(e, \"fileFormat\");\r\n                  }}\r\n                  style={{ marginRight: \"5px\" }}\r\n                />\r\n                <label for=\".csv\">CSV</label>\r\n                <div>\r\n                  <a\r\n                    href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/Audience_Sample_CSV.csv\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\" \"\r\n                  >\r\n                    <b>\r\n                      <u>Download csv Template</u>\r\n                    </b>\r\n                  </a>\r\n                </div>\r\n              </span>\r\n            </form>\r\n          </article>\r\n\r\n          <form>\r\n            <input\r\n              type=\"file\"\r\n              accept={`${fileFormat}`}\r\n              className=\"form-control\"\r\n              name=\"file\"\r\n              id=\"file\"\r\n              onChange={changeHandler}\r\n              style={{ width: \"100%\" }}\r\n            />\r\n            <div className=\"col-20\">\r\n              <p style={{ color: \"green\" }}>\r\n                Please upload {`${fileFormat}`} file only\r\n              </p>\r\n              {/* <a href=\"https://s3-reachlocalads.s3.ap-south-1.amazonaws.com/sample/audience/AudienceXLS.xls\" className=\"\"><b><u>Download Template</u></b></a> */}\r\n            </div>\r\n          </form>\r\n\r\n          <div className=\"label\">{formControls.file.value}</div>\r\n\r\n          {/* <div>\r\n                                            <CircularLoader stroke={\"#0c73a5\"} size={\"36\"} buttonSize={\"50px\"}></CircularLoader>\r\n                                    </div> */}\r\n\r\n          <div className=\"margin-top--half\">\r\n            <button\r\n              className=\"btn btn-fill btn-primary\"\r\n              onClick={() => chooseAgain()}\r\n            >\r\n              Choose Again\r\n            </button>\r\n            <button\r\n              className=\"btn btn-fill btn-green margin-left--half\"\r\n              onClick={() => handleUpload(\"update\")}\r\n            >\r\n              UPDATE\r\n            </button>\r\n          </div>\r\n        </article>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampaignSegmentAudience;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Segments\\SegmentTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\NewMedium\\NewMedium.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\MediumTable\\MediumTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Datasource\\CreateDatasource.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\ModalSenderId\\NewSenderId.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\SenderTable\\SenderTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Roles\\NewRole.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Roles\\RoleTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadsMapping\\LeadsMapping.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\PublisherMapping\\PublisherMapProcess.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\StatusGroup\\NewLeadStatusGr.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadBucket\\NewLeadBucket.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\automationcampaign\\SelectAutomationType.js",["833","834","835","836"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import  from \"\" \r\nfunction SelectAutomationType() {\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        data-toggle=\"modal\"\r\n        data-target=\"#exampleModalCenter\"\r\n      >\r\n        launch type\r\n      </button>\r\n\r\n      <div\r\n        className=\"modal fade  bd-example-modal-lg\"\r\n        id=\"exampleModalCenter\"\r\n        tabindex=\"-1\"\r\n        role=\"dialog\"\r\n        aria-labelledby=\"exampleModalCenterTitle\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div\r\n          className=\"modal-dialog modal-dialog-centered modal-lg\"\r\n          role=\"document\"\r\n        >\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">\r\n                Select Automation Campaign Type\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"close\"\r\n                data-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <div class=\"container\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-4 col-lg-4 col-sm-4\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"product\"\r\n                        class=\"card-input-element\"\r\n                      />\r\n\r\n                      <div class=\"panel panel-default card-input\">\r\n                        <div class=\"panel-heading\">One-Time</div>\r\n                        <figure>\r\n                          <img src=\"\" />\r\n                        </figure>\r\n                        <div class=\"panel-body\">Product specific content</div>\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                  <div class=\"col-md-4 col-lg-4 col-sm-4\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"product\"\r\n                        class=\"card-input-element\"\r\n                      />\r\n\r\n                      <div class=\"panel panel-default card-input\">\r\n                        <div class=\"panel-heading\">Triggered</div>\r\n                        <figure>\r\n                          <img src=\"\" />\r\n                        </figure>\r\n                        <div class=\"panel-body\">Product specific content</div>\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                  <div class=\"col-md-4 col-lg-4 col-sm-4\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"product\"\r\n                        class=\"card-input-element\"\r\n                      />\r\n\r\n                      <div class=\"panel panel-default card-input\">\r\n                        <div class=\"panel-heading\">Recurring</div>\r\n                        <figure>\r\n                          <img />\r\n                        </figure>\r\n                        <div class=\"panel-body\">Product specific content</div>\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </div>{\" \"}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectAutomationType;\r\n","G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\LeadManagement\\LeadStatus\\NewLeasStatus.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Services\\tag-service.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignTable.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\Campaign\\CampaignInlineHeader.js",[],"G:\\TEch\\Web\\Dev\\NextJs\\rla\\src\\Components\\TransactionHistory\\TransactionHistory.js",[],{"ruleId":"837","severity":1,"message":"838","line":156,"column":47,"nodeType":"839","messageId":"840","endLine":156,"endColumn":48},{"ruleId":"837","severity":1,"message":"838","line":156,"column":61,"nodeType":"839","messageId":"840","endLine":156,"endColumn":62},{"ruleId":"837","severity":1,"message":"838","line":156,"column":67,"nodeType":"839","messageId":"840","endLine":156,"endColumn":68},{"ruleId":"837","severity":1,"message":"838","line":156,"column":80,"nodeType":"839","messageId":"840","endLine":156,"endColumn":81},{"ruleId":"837","severity":1,"message":"838","line":156,"column":86,"nodeType":"839","messageId":"840","endLine":156,"endColumn":87},{"ruleId":"837","severity":1,"message":"838","line":156,"column":97,"nodeType":"839","messageId":"840","endLine":156,"endColumn":98},{"ruleId":"837","severity":1,"message":"838","line":156,"column":103,"nodeType":"839","messageId":"840","endLine":156,"endColumn":104},{"ruleId":"837","severity":1,"message":"838","line":156,"column":120,"nodeType":"839","messageId":"840","endLine":156,"endColumn":121},{"ruleId":"837","severity":1,"message":"838","line":156,"column":126,"nodeType":"839","messageId":"840","endLine":156,"endColumn":127},{"ruleId":"837","severity":1,"message":"838","line":156,"column":137,"nodeType":"839","messageId":"840","endLine":156,"endColumn":138},{"ruleId":"837","severity":1,"message":"838","line":324,"column":47,"nodeType":"839","messageId":"840","endLine":324,"endColumn":48},{"ruleId":"837","severity":1,"message":"838","line":324,"column":61,"nodeType":"839","messageId":"840","endLine":324,"endColumn":62},{"ruleId":"837","severity":1,"message":"838","line":324,"column":67,"nodeType":"839","messageId":"840","endLine":324,"endColumn":68},{"ruleId":"837","severity":1,"message":"838","line":324,"column":80,"nodeType":"839","messageId":"840","endLine":324,"endColumn":81},{"ruleId":"837","severity":1,"message":"838","line":324,"column":86,"nodeType":"839","messageId":"840","endLine":324,"endColumn":87},{"ruleId":"837","severity":1,"message":"838","line":324,"column":97,"nodeType":"839","messageId":"840","endLine":324,"endColumn":98},{"ruleId":"837","severity":1,"message":"838","line":324,"column":103,"nodeType":"839","messageId":"840","endLine":324,"endColumn":104},{"ruleId":"837","severity":1,"message":"838","line":324,"column":120,"nodeType":"839","messageId":"840","endLine":324,"endColumn":121},{"ruleId":"837","severity":1,"message":"838","line":324,"column":126,"nodeType":"839","messageId":"840","endLine":324,"endColumn":127},{"ruleId":"837","severity":1,"message":"838","line":324,"column":137,"nodeType":"839","messageId":"840","endLine":324,"endColumn":138},{"ruleId":"841","severity":1,"message":"842","line":484,"column":29,"nodeType":"843","endLine":484,"endColumn":40},{"ruleId":"844","severity":1,"message":"845","line":174,"column":17,"nodeType":"846","messageId":"847","endLine":174,"endColumn":25},{"ruleId":"848","severity":1,"message":"849","line":491,"column":13,"nodeType":"846","messageId":"850","endLine":491,"endColumn":16},{"ruleId":"848","severity":1,"message":"851","line":4,"column":3,"nodeType":"846","messageId":"850","endLine":4,"endColumn":18},{"ruleId":"848","severity":1,"message":"852","line":6,"column":3,"nodeType":"846","messageId":"850","endLine":6,"endColumn":26},{"ruleId":"848","severity":1,"message":"853","line":63,"column":24,"nodeType":"846","messageId":"850","endLine":63,"endColumn":39},{"ruleId":"848","severity":1,"message":"854","line":64,"column":16,"nodeType":"846","messageId":"850","endLine":64,"endColumn":25},{"ruleId":"848","severity":1,"message":"855","line":166,"column":5,"nodeType":"846","messageId":"850","endLine":166,"endColumn":15},{"ruleId":"856","severity":1,"message":"857","line":273,"column":3,"nodeType":"858","messageId":"859","endLine":286,"endColumn":4},{"ruleId":"860","severity":1,"message":"861","line":262,"column":24,"nodeType":"862","messageId":"863","endLine":262,"endColumn":26},{"ruleId":"864","severity":1,"message":"865","line":8,"column":13,"nodeType":"866","endLine":8,"endColumn":198},{"ruleId":"867","severity":1,"message":"868","line":510,"column":9,"nodeType":"869","endLine":510,"endColumn":38},{"ruleId":"844","severity":1,"message":"845","line":252,"column":17,"nodeType":"846","messageId":"847","endLine":252,"endColumn":25},{"ruleId":"848","severity":1,"message":"870","line":6,"column":8,"nodeType":"846","messageId":"850","endLine":6,"endColumn":22},{"ruleId":"848","severity":1,"message":"871","line":7,"column":8,"nodeType":"846","messageId":"850","endLine":7,"endColumn":26},{"ruleId":"837","severity":1,"message":"838","line":716,"column":80,"nodeType":"839","messageId":"840","endLine":716,"endColumn":81},{"ruleId":"837","severity":1,"message":"838","line":716,"column":105,"nodeType":"839","messageId":"840","endLine":716,"endColumn":106},{"ruleId":"848","severity":1,"message":"872","line":4,"column":8,"nodeType":"846","messageId":"850","endLine":4,"endColumn":28},{"ruleId":"856","severity":1,"message":"857","line":25,"column":3,"nodeType":"858","messageId":"859","endLine":36,"endColumn":4},{"ruleId":"873","severity":1,"message":"874","line":16,"column":17,"nodeType":"866","endLine":16,"endColumn":40},{"ruleId":"873","severity":1,"message":"874","line":18,"column":17,"nodeType":"866","endLine":18,"endColumn":40},{"ruleId":"873","severity":1,"message":"874","line":20,"column":17,"nodeType":"866","endLine":20,"endColumn":40},{"ruleId":"873","severity":1,"message":"874","line":22,"column":17,"nodeType":"866","endLine":22,"endColumn":43},{"ruleId":"875","severity":1,"message":"876","line":57,"column":40,"nodeType":"839","messageId":"877","endLine":57,"endColumn":42},{"ruleId":"848","severity":1,"message":"878","line":1,"column":17,"nodeType":"846","messageId":"850","endLine":1,"endColumn":23},{"ruleId":"848","severity":1,"message":"879","line":6,"column":18,"nodeType":"846","messageId":"850","endLine":6,"endColumn":28},{"ruleId":"848","severity":1,"message":"880","line":14,"column":5,"nodeType":"846","messageId":"850","endLine":14,"endColumn":16},{"ruleId":"873","severity":1,"message":"874","line":32,"column":19,"nodeType":"866","endLine":32,"endColumn":42},{"ruleId":"873","severity":1,"message":"874","line":34,"column":19,"nodeType":"866","endLine":34,"endColumn":42},{"ruleId":"873","severity":1,"message":"874","line":36,"column":19,"nodeType":"866","endLine":36,"endColumn":45},{"ruleId":"873","severity":1,"message":"874","line":38,"column":19,"nodeType":"866","endLine":38,"endColumn":42},{"ruleId":"881","severity":1,"message":"882","line":86,"column":20,"nodeType":"866","endLine":86,"endColumn":27},{"ruleId":"875","severity":1,"message":"876","line":200,"column":38,"nodeType":"839","messageId":"877","endLine":200,"endColumn":40},{"ruleId":"875","severity":1,"message":"876","line":245,"column":38,"nodeType":"839","messageId":"877","endLine":245,"endColumn":40},{"ruleId":"875","severity":1,"message":"876","line":262,"column":38,"nodeType":"839","messageId":"877","endLine":262,"endColumn":40},{"ruleId":"848","severity":1,"message":"879","line":3,"column":18,"nodeType":"846","messageId":"850","endLine":3,"endColumn":28},{"ruleId":"848","severity":1,"message":"883","line":6,"column":43,"nodeType":"846","messageId":"850","endLine":6,"endColumn":47},{"ruleId":"848","severity":1,"message":"884","line":14,"column":3,"nodeType":"846","messageId":"850","endLine":14,"endColumn":8},{"ruleId":"848","severity":1,"message":"885","line":24,"column":5,"nodeType":"846","messageId":"850","endLine":24,"endColumn":12},{"ruleId":"848","severity":1,"message":"886","line":27,"column":5,"nodeType":"846","messageId":"850","endLine":27,"endColumn":12},{"ruleId":"887","severity":1,"message":"888","line":34,"column":3,"nodeType":"889","messageId":"890","endLine":36,"endColumn":4},{"ruleId":"873","severity":1,"message":"874","line":49,"column":19,"nodeType":"866","endLine":49,"endColumn":62},{"ruleId":"873","severity":1,"message":"874","line":51,"column":19,"nodeType":"866","endLine":51,"endColumn":59},{"ruleId":"873","severity":1,"message":"874","line":53,"column":19,"nodeType":"866","endLine":53,"endColumn":59},{"ruleId":"873","severity":1,"message":"874","line":55,"column":19,"nodeType":"866","endLine":55,"endColumn":59},{"ruleId":"841","severity":1,"message":"842","line":218,"column":27,"nodeType":"843","endLine":218,"endColumn":43},{"ruleId":"841","severity":1,"message":"842","line":229,"column":56,"nodeType":"843","endLine":229,"endColumn":79},{"ruleId":"875","severity":1,"message":"876","line":309,"column":46,"nodeType":"839","messageId":"877","endLine":309,"endColumn":48},{"ruleId":"848","severity":1,"message":"891","line":2,"column":10,"nodeType":"846","messageId":"850","endLine":2,"endColumn":16},{"ruleId":"848","severity":1,"message":"880","line":9,"column":17,"nodeType":"846","messageId":"850","endLine":9,"endColumn":28},{"ruleId":"848","severity":1,"message":"892","line":13,"column":15,"nodeType":"846","messageId":"850","endLine":13,"endColumn":21},{"ruleId":"848","severity":1,"message":"893","line":4,"column":8,"nodeType":"846","messageId":"850","endLine":4,"endColumn":13},{"ruleId":"848","severity":1,"message":"851","line":6,"column":3,"nodeType":"846","messageId":"850","endLine":6,"endColumn":18},{"ruleId":"848","severity":1,"message":"852","line":8,"column":3,"nodeType":"846","messageId":"850","endLine":8,"endColumn":26},{"ruleId":"848","severity":1,"message":"894","line":23,"column":23,"nodeType":"846","messageId":"850","endLine":23,"endColumn":37},{"ruleId":"848","severity":1,"message":"895","line":27,"column":24,"nodeType":"846","messageId":"850","endLine":27,"endColumn":39},{"ruleId":"848","severity":1,"message":"896","line":55,"column":15,"nodeType":"846","messageId":"850","endLine":55,"endColumn":19},{"ruleId":"848","severity":1,"message":"897","line":2,"column":8,"nodeType":"846","messageId":"850","endLine":2,"endColumn":14},{"ruleId":"848","severity":1,"message":"898","line":5,"column":3,"nodeType":"846","messageId":"850","endLine":5,"endColumn":11},{"ruleId":"848","severity":1,"message":"899","line":10,"column":3,"nodeType":"846","messageId":"850","endLine":10,"endColumn":6},{"ruleId":"848","severity":1,"message":"884","line":11,"column":3,"nodeType":"846","messageId":"850","endLine":11,"endColumn":8},{"ruleId":"848","severity":1,"message":"900","line":12,"column":3,"nodeType":"846","messageId":"850","endLine":12,"endColumn":8},{"ruleId":"848","severity":1,"message":"901","line":13,"column":3,"nodeType":"846","messageId":"850","endLine":13,"endColumn":11},{"ruleId":"848","severity":1,"message":"902","line":15,"column":8,"nodeType":"846","messageId":"850","endLine":15,"endColumn":26},{"ruleId":"848","severity":1,"message":"903","line":21,"column":7,"nodeType":"846","messageId":"850","endLine":21,"endColumn":25},{"ruleId":"848","severity":1,"message":"904","line":26,"column":5,"nodeType":"846","messageId":"850","endLine":26,"endColumn":15},{"ruleId":"848","severity":1,"message":"905","line":27,"column":5,"nodeType":"846","messageId":"850","endLine":27,"endColumn":15},{"ruleId":"848","severity":1,"message":"906","line":28,"column":5,"nodeType":"846","messageId":"850","endLine":28,"endColumn":16},{"ruleId":"873","severity":1,"message":"874","line":45,"column":15,"nodeType":"866","endLine":45,"endColumn":38},{"ruleId":"873","severity":1,"message":"874","line":47,"column":15,"nodeType":"866","endLine":47,"endColumn":41},{"ruleId":"873","severity":1,"message":"874","line":49,"column":15,"nodeType":"866","endLine":49,"endColumn":38},{"ruleId":"873","severity":1,"message":"874","line":51,"column":15,"nodeType":"866","endLine":51,"endColumn":38},{"ruleId":"841","severity":1,"message":"842","line":106,"column":54,"nodeType":"843","endLine":106,"endColumn":77},{"ruleId":"875","severity":1,"message":"876","line":113,"column":46,"nodeType":"839","messageId":"877","endLine":113,"endColumn":48},{"ruleId":"875","severity":1,"message":"876","line":119,"column":46,"nodeType":"839","messageId":"877","endLine":119,"endColumn":48},{"ruleId":"848","severity":1,"message":"907","line":7,"column":3,"nodeType":"846","messageId":"850","endLine":7,"endColumn":11},{"ruleId":"848","severity":1,"message":"908","line":10,"column":3,"nodeType":"846","messageId":"850","endLine":10,"endColumn":8},{"ruleId":"848","severity":1,"message":"900","line":11,"column":3,"nodeType":"846","messageId":"850","endLine":11,"endColumn":8},{"ruleId":"848","severity":1,"message":"909","line":14,"column":8,"nodeType":"846","messageId":"850","endLine":14,"endColumn":18},{"ruleId":"848","severity":1,"message":"910","line":15,"column":10,"nodeType":"846","messageId":"850","endLine":15,"endColumn":27},{"ruleId":"848","severity":1,"message":"911","line":23,"column":5,"nodeType":"846","messageId":"850","endLine":23,"endColumn":13},{"ruleId":"848","severity":1,"message":"894","line":30,"column":5,"nodeType":"846","messageId":"850","endLine":30,"endColumn":19},{"ruleId":"875","severity":1,"message":"876","line":139,"column":50,"nodeType":"839","messageId":"877","endLine":139,"endColumn":52},{"ruleId":"875","severity":1,"message":"876","line":157,"column":65,"nodeType":"839","messageId":"877","endLine":157,"endColumn":67},{"ruleId":"875","severity":1,"message":"876","line":170,"column":65,"nodeType":"839","messageId":"877","endLine":170,"endColumn":67},{"ruleId":"875","severity":1,"message":"876","line":183,"column":65,"nodeType":"839","messageId":"877","endLine":183,"endColumn":67},{"ruleId":"841","severity":1,"message":"842","line":240,"column":35,"nodeType":"843","endLine":240,"endColumn":59},{"ruleId":"848","severity":1,"message":"880","line":13,"column":5,"nodeType":"846","messageId":"850","endLine":13,"endColumn":16},{"ruleId":"848","severity":1,"message":"906","line":15,"column":5,"nodeType":"846","messageId":"850","endLine":15,"endColumn":16},{"ruleId":"848","severity":1,"message":"912","line":16,"column":5,"nodeType":"846","messageId":"850","endLine":16,"endColumn":18},{"ruleId":"848","severity":1,"message":"913","line":18,"column":5,"nodeType":"846","messageId":"850","endLine":18,"endColumn":18},{"ruleId":"848","severity":1,"message":"914","line":21,"column":9,"nodeType":"846","messageId":"850","endLine":21,"endColumn":30},{"ruleId":"848","severity":1,"message":"906","line":12,"column":5,"nodeType":"846","messageId":"850","endLine":12,"endColumn":16},{"ruleId":"848","severity":1,"message":"912","line":13,"column":5,"nodeType":"846","messageId":"850","endLine":13,"endColumn":18},{"ruleId":"848","severity":1,"message":"913","line":15,"column":5,"nodeType":"846","messageId":"850","endLine":15,"endColumn":18},{"ruleId":"848","severity":1,"message":"906","line":13,"column":5,"nodeType":"846","messageId":"850","endLine":13,"endColumn":16},{"ruleId":"848","severity":1,"message":"912","line":14,"column":5,"nodeType":"846","messageId":"850","endLine":14,"endColumn":18},{"ruleId":"848","severity":1,"message":"913","line":16,"column":5,"nodeType":"846","messageId":"850","endLine":16,"endColumn":18},{"ruleId":"848","severity":1,"message":"915","line":9,"column":10,"nodeType":"846","messageId":"850","endLine":9,"endColumn":18},{"ruleId":"848","severity":1,"message":"916","line":9,"column":20,"nodeType":"846","messageId":"850","endLine":9,"endColumn":31},{"ruleId":"848","severity":1,"message":"917","line":10,"column":25,"nodeType":"846","messageId":"850","endLine":10,"endColumn":41},{"ruleId":"848","severity":1,"message":"918","line":11,"column":10,"nodeType":"846","messageId":"850","endLine":11,"endColumn":22},{"ruleId":"848","severity":1,"message":"919","line":11,"column":24,"nodeType":"846","messageId":"850","endLine":11,"endColumn":39},{"ruleId":"848","severity":1,"message":"920","line":12,"column":10,"nodeType":"846","messageId":"850","endLine":12,"endColumn":25},{"ruleId":"848","severity":1,"message":"921","line":12,"column":27,"nodeType":"846","messageId":"850","endLine":12,"endColumn":45},{"ruleId":"848","severity":1,"message":"922","line":13,"column":10,"nodeType":"846","messageId":"850","endLine":13,"endColumn":22},{"ruleId":"848","severity":1,"message":"923","line":13,"column":24,"nodeType":"846","messageId":"850","endLine":13,"endColumn":39},{"ruleId":"848","severity":1,"message":"895","line":14,"column":24,"nodeType":"846","messageId":"850","endLine":14,"endColumn":39},{"ruleId":"848","severity":1,"message":"924","line":2,"column":10,"nodeType":"846","messageId":"850","endLine":2,"endColumn":14},{"ruleId":"881","severity":1,"message":"882","line":56,"column":27,"nodeType":"866","endLine":56,"endColumn":41},{"ruleId":"881","severity":1,"message":"882","line":73,"column":27,"nodeType":"866","endLine":73,"endColumn":41},{"ruleId":"881","severity":1,"message":"882","line":90,"column":27,"nodeType":"866","endLine":90,"endColumn":34},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-redeclare","'formData' is already defined.","Identifier","redeclared","no-unused-vars","'bId' is assigned a value but never used.","unusedVar","'ToastsContainer' is defined but never used.","'ToastsContainerPosition' is defined but never used.","'setSelectedTags' is assigned a value but never used.","'setSelect' is assigned a value but never used.","'createTags' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'CreateCampaign' is defined but never used.","'CampaignMainSource' is defined but never used.","'CampaignAudienceForm' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'useRef' is defined but never used.","'components' is defined but never used.","'setFormData' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Menu' is defined but never used.","'Input' is defined but never used.","'tagName' is assigned a value but never used.","'options' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'render' is defined but never used.","'design' is assigned a value but never used.","'utils' is defined but never used.","'setSegmentData' is assigned a value but never used.","'setFormControls' is assigned a value but never used.","'temp' is assigned a value but never used.","'Select' is defined but never used.","'Dropdown' is defined but never used.","'Ref' is defined but never used.","'Radio' is defined but never used.","'TextArea' is defined but never used.","'SemanticDatepicker' is defined but never used.","'animatedComponents' is assigned a value but never used.","'tagsOption' is assigned a value but never used.","'timeOption' is assigned a value but never used.","'timeHandler' is assigned a value but never used.","'Checkbox' is defined but never used.","'Modal' is defined but never used.","'InputRange' is defined but never used.","'IoIosArrowForward' is defined but never used.","'FormData' is assigned a value but never used.","'FormDataError' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","'checkboxChangeHandler' is assigned a value but never used.","'gpUpdate' is assigned a value but never used.","'setgpUpdate' is assigned a value but never used.","'setgroupNameList' is assigned a value but never used.","'audienceData' is assigned a value but never used.","'setaudienceData' is assigned a value but never used.","'audienceGroupId' is assigned a value but never used.","'setaudienceGroupId' is assigned a value but never used.","'fetchingData' is assigned a value but never used.","'setfetchingData' is assigned a value but never used.","'Link' is defined but never used."]